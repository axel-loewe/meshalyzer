// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef trimesh_h
#define trimesh_h
#include <FL/Fl.H>
#include "Surfaces.h"
#include <FL/gl.h>
class TBmeshWin;
class IsoSurface;
class ObjProps;
#include "Model.h"
#include "colourchoice.h"
#include <FL/Fl_Double_Window.H>
#include "TBmeshWin.h"

class Meshwin {
public:
  Meshwin();
  Fl_Double_Window *winny;
  TBmeshWin *trackballwin;

class UserInterface {
};
};
#include <FL/Fl_Color_Chooser.H>
#include "VecData.h"
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_File_Chooser.H>
#include "Sequence.h"
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Check_Browser.H>
#include <FL/Fl_Tabs.H>
#include "MyValueInput.h"
#include <FL/Fl_Choice.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Value_Input.H>
#include "Colourscale.h"
#include "Myslider.h"
#include <FL/Fl_Counter.H>

class Controls {
  friend class ObjProps; 
public:
  Controls();
  Fl_Double_Window *window;
  Fl_Menu_Bar *mainbar;
  static Fl_Menu_Item menu_mainbar[];
private:
  inline void cb_Add_i(Fl_Menu_*, void*);
  static void cb_Add(Fl_Menu_*, void*);
  inline void cb_Compute_i(Fl_Menu_*, void*);
  static void cb_Compute(Fl_Menu_*, void*);
  inline void cb_Read_i(Fl_Menu_*, void*);
  static void cb_Read(Fl_Menu_*, void*);
  inline void cb_Read1_i(Fl_Menu_*, void*);
  static void cb_Read1(Fl_Menu_*, void*);
  inline void cb_Read2_i(Fl_Menu_*, void*);
  static void cb_Read2(Fl_Menu_*, void*);
  inline void cb_Read3_i(Fl_Menu_*, void*);
  static void cb_Read3(Fl_Menu_*, void*);
  inline void cb_Read4_i(Fl_Menu_*, void*);
  static void cb_Read4(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *hdfreadbut;
private:
  inline void cb_hdfreadbut_i(Fl_Menu_*, void*);
  static void cb_hdfreadbut(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *read_recalibrate;
private:
  inline void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  inline void cb_Read5_i(Fl_Menu_*, void*);
  static void cb_Read5(Fl_Menu_*, void*);
  inline void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  inline void cb_Restore_i(Fl_Menu_*, void*);
  static void cb_Restore(Fl_Menu_*, void*);
  inline void cb_Link_i(Fl_Menu_*, void*);
  static void cb_Link(Fl_Menu_*, void*);
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *imgmenu;
private:
  inline void cb_Reset_i(Fl_Menu_*, void*);
  static void cb_Reset(Fl_Menu_*, void*);
  inline void cb__i(Fl_Menu_*, void*);
  static void cb_(Fl_Menu_*, void*);
  inline void cb_item_i(Fl_Menu_*, void*);
  static void cb_item(Fl_Menu_*, void*);
  inline void cb_item1_i(Fl_Menu_*, void*);
  static void cb_item1(Fl_Menu_*, void*);
  inline void cb_item2_i(Fl_Menu_*, void*);
  static void cb_item2(Fl_Menu_*, void*);
  inline void cb_1_i(Fl_Menu_*, void*);
  static void cb_1(Fl_Menu_*, void*);
  inline void cb_item3_i(Fl_Menu_*, void*);
  static void cb_item3(Fl_Menu_*, void*);
  inline void cb_item4_i(Fl_Menu_*, void*);
  static void cb_item4(Fl_Menu_*, void*);
  inline void cb_item5_i(Fl_Menu_*, void*);
  static void cb_item5(Fl_Menu_*, void*);
  inline void cb_2_i(Fl_Menu_*, void*);
  static void cb_2(Fl_Menu_*, void*);
  inline void cb_item6_i(Fl_Menu_*, void*);
  static void cb_item6(Fl_Menu_*, void*);
  inline void cb_item7_i(Fl_Menu_*, void*);
  static void cb_item7(Fl_Menu_*, void*);
  inline void cb_item8_i(Fl_Menu_*, void*);
  static void cb_item8(Fl_Menu_*, void*);
  inline void cb_3_i(Fl_Menu_*, void*);
  static void cb_3(Fl_Menu_*, void*);
  inline void cb_item9_i(Fl_Menu_*, void*);
  static void cb_item9(Fl_Menu_*, void*);
  inline void cb_itema_i(Fl_Menu_*, void*);
  static void cb_itema(Fl_Menu_*, void*);
  inline void cb_itemb_i(Fl_Menu_*, void*);
  static void cb_itemb(Fl_Menu_*, void*);
  inline void cb_4_i(Fl_Menu_*, void*);
  static void cb_4(Fl_Menu_*, void*);
  inline void cb_itemc_i(Fl_Menu_*, void*);
  static void cb_itemc(Fl_Menu_*, void*);
  inline void cb_itemd_i(Fl_Menu_*, void*);
  static void cb_itemd(Fl_Menu_*, void*);
  inline void cb_iteme_i(Fl_Menu_*, void*);
  static void cb_iteme(Fl_Menu_*, void*);
  inline void cb_5_i(Fl_Menu_*, void*);
  static void cb_5(Fl_Menu_*, void*);
  inline void cb_itemf_i(Fl_Menu_*, void*);
  static void cb_itemf(Fl_Menu_*, void*);
  inline void cb_item10_i(Fl_Menu_*, void*);
  static void cb_item10(Fl_Menu_*, void*);
  inline void cb_item11_i(Fl_Menu_*, void*);
  static void cb_item11(Fl_Menu_*, void*);
  inline void cb_vertices_i(Fl_Menu_*, void*);
  static void cb_vertices(Fl_Menu_*, void*);
  inline void cb_cables_i(Fl_Menu_*, void*);
  static void cb_cables(Fl_Menu_*, void*);
  inline void cb_surface_i(Fl_Menu_*, void*);
  static void cb_surface(Fl_Menu_*, void*);
  inline void cb_surfaces_i(Fl_Menu_*, void*);
  static void cb_surfaces(Fl_Menu_*, void*);
  inline void cb_voxele_i(Fl_Menu_*, void*);
  static void cb_voxele(Fl_Menu_*, void*);
  inline void cb_White_i(Fl_Menu_*, void*);
  static void cb_White(Fl_Menu_*, void*);
  inline void cb_Gray_i(Fl_Menu_*, void*);
  static void cb_Gray(Fl_Menu_*, void*);
  inline void cb_Black_i(Fl_Menu_*, void*);
  static void cb_Black(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *revdraworder;
private:
  inline void cb_revdraworder_i(Fl_Menu_*, void*);
  static void cb_revdraworder(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *norot;
private:
  inline void cb_norot_i(Fl_Menu_*, void*);
  static void cb_norot(Fl_Menu_*, void*);
  inline void cb_Viewport_i(Fl_Menu_*, void*);
  static void cb_Viewport(Fl_Menu_*, void*);
  inline void cb_Colour_i(Fl_Menu_*, void*);
  static void cb_Colour(Fl_Menu_*, void*);
  inline void cb_Opacity_i(Fl_Menu_*, void*);
  static void cb_Opacity(Fl_Menu_*, void*);
  inline void cb_Clipping_i(Fl_Menu_*, void*);
  static void cb_Clipping(Fl_Menu_*, void*);
  inline void cb_Isosurf_i(Fl_Menu_*, void*);
  static void cb_Isosurf(Fl_Menu_*, void*);
  inline void cb_Dead_i(Fl_Menu_*, void*);
  static void cb_Dead(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *brcut;
  static Fl_Menu_Item *brcutNone;
private:
  inline void cb_brcutNone_i(Fl_Menu_*, void*);
  static void cb_brcutNone(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *brcutPM1;
private:
  inline void cb_brcutPM1_i(Fl_Menu_*, void*);
  static void cb_brcutPM1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *brcut01;
private:
  inline void cb_brcut01_i(Fl_Menu_*, void*);
  static void cb_brcut01(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *brcutPMpi;
private:
  inline void cb_brcutPMpi_i(Fl_Menu_*, void*);
  static void cb_brcutPMpi(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *brcut02pi;
private:
  inline void cb_brcut02pi_i(Fl_Menu_*, void*);
  static void cb_brcut02pi(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *outmenu;
private:
  inline void cb_Image_i(Fl_Menu_*, void*);
  static void cb_Image(Fl_Menu_*, void*);
  inline void cb_Sequence_i(Fl_Menu_*, void*);
  static void cb_Sequence(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *transBgd;
private:
  inline void cb_transBgd_i(Fl_Menu_*, void*);
  static void cb_transBgd(Fl_Menu_*, void*);
  inline void cb_PDF_i(Fl_Menu_*, void*);
  static void cb_PDF(Fl_Menu_*, void*);
  inline void cb_EPS_i(Fl_Menu_*, void*);
  static void cb_EPS(Fl_Menu_*, void*);
  inline void cb_Colour1_i(Fl_Menu_*, void*);
  static void cb_Colour1(Fl_Menu_*, void*);
  inline void cb_Visible_i(Fl_Menu_*, void*);
  static void cb_Visible(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *recordmenu;
private:
  inline void cb_start_i(Fl_Menu_*, void*);
  static void cb_start(Fl_Menu_*, void*);
  inline void cb_stop_i(Fl_Menu_*, void*);
  static void cb_stop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *redrawbut;
private:
  inline void cb_redrawbut_i(Fl_Menu_*, void*);
  static void cb_redrawbut(Fl_Menu_*, void*);
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *datadest;
  static Fl_Menu_Item menu_datadest[];
  static Fl_Menu_Item *vertdisp;
private:
  inline void cb_vertdisp_i(Fl_Menu_*, void*);
  static void cb_vertdisp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *cabledisp;
private:
  inline void cb_cabledisp_i(Fl_Menu_*, void*);
  static void cb_cabledisp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *cnnxdisp;
private:
  inline void cb_cnnxdisp_i(Fl_Menu_*, void*);
  static void cb_cnnxdisp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *surfedgedisp;
private:
  inline void cb_surfedgedisp_i(Fl_Menu_*, void*);
  static void cb_surfedgedisp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *surfdisp;
private:
  inline void cb_surfdisp_i(Fl_Menu_*, void*);
  static void cb_surfdisp(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *voldisp;
private:
  inline void cb_voldisp_i(Fl_Menu_*, void*);
  static void cb_voldisp(Fl_Menu_*, void*);
  inline void cb_ALL_i(Fl_Menu_*, void*);
  static void cb_ALL(Fl_Menu_*, void*);
  inline void cb_NONE_i(Fl_Menu_*, void*);
  static void cb_NONE(Fl_Menu_*, void*);
public:
  Fl_Light_Button *draw_axes;
private:
  inline void cb_draw_axes_i(Fl_Light_Button*, void*);
  static void cb_draw_axes(Fl_Light_Button*, void*);
public:
  Fl_Button *voxeleColor;
private:
  inline void cb_voxeleColor_i(Fl_Button*, void*);
  static void cb_voxeleColor(Fl_Button*, void*);
public:
  Fl_Group *dispAs;
  Fl_Check_Button *dispAsSurf;
private:
  inline void cb_dispAsSurf_i(Fl_Check_Button*, void*);
  static void cb_dispAsSurf(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *dispAsVol;
private:
  inline void cb_dispAsVol_i(Fl_Check_Button*, void*);
  static void cb_dispAsVol(Fl_Check_Button*, void*);
public:
  Fl_Group *regiondisp;
  Fl_Light_Button *vertbut;
private:
  inline void cb_vertbut_i(Fl_Light_Button*, void*);
  static void cb_vertbut(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *cabbut;
private:
  inline void cb_cabbut_i(Fl_Light_Button*, void*);
  static void cb_cabbut(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *cnnxbut;
private:
  inline void cb_cnnxbut_i(Fl_Light_Button*, void*);
  static void cb_cnnxbut(Fl_Light_Button*, void*);
public:
  Fl_Button *vertprop;
private:
  inline void cb_vertprop_i(Fl_Button*, void*);
  static void cb_vertprop(Fl_Button*, void*);
public:
  Fl_Button *connprop;
private:
  inline void cb_connprop_i(Fl_Button*, void*);
  static void cb_connprop(Fl_Button*, void*);
public:
  Fl_Light_Button *visbut;
private:
  inline void cb_visbut_i(Fl_Light_Button*, void*);
  static void cb_visbut(Fl_Light_Button*, void*);
  inline void cb_select_i(Fl_Button*, void*);
  static void cb_select(Fl_Button*, void*);
public:
  Fl_Check_Browser *reglist;
private:
  inline void cb_reglist_i(Fl_Check_Browser*, void*);
  static void cb_reglist(Fl_Check_Browser*, void*);
  inline void cb_invert_i(Fl_Button*, void*);
  static void cb_invert(Fl_Button*, void*);
public:
  Fl_Button *cableprop;
private:
  inline void cb_cableprop_i(Fl_Button*, void*);
  static void cb_cableprop(Fl_Button*, void*);
public:
  Fl_Tabs *tabwidget;
  Fl_Group *hilightgrp;
  MyValueInput *tethi;
private:
  inline void cb_tethi_i(MyValueInput*, void*);
  static void cb_tethi(MyValueInput*, void*);
public:
  MyValueInput *elehi;
private:
  inline void cb_elehi_i(MyValueInput*, void*);
  static void cb_elehi(MyValueInput*, void*);
public:
  MyValueInput *cabhi;
private:
  inline void cb_cabhi_i(MyValueInput*, void*);
  static void cb_cabhi(MyValueInput*, void*);
public:
  MyValueInput *verthi;
private:
  inline void cb_verthi_i(MyValueInput*, void*);
  static void cb_verthi(MyValueInput*, void*);
public:
  MyValueInput *cnnxhi;
private:
  inline void cb_cnnxhi_i(MyValueInput*, void*);
  static void cb_cnnxhi(MyValueInput*, void*);
public:
  Fl_Light_Button *hilighton;
private:
  inline void cb_hilighton_i(Fl_Light_Button*, void*);
  static void cb_hilighton(Fl_Light_Button*, void*);
public:
  Fl_Choice *attachtype;
  static Fl_Menu_Item menu_attachtype[];
private:
  inline void cb_Filled_i(Fl_Menu_*, void*);
  static void cb_Filled(Fl_Menu_*, void*);
  inline void cb_Surf_i(Fl_Menu_*, void*);
  static void cb_Surf(Fl_Menu_*, void*);
  inline void cb_Vol_i(Fl_Menu_*, void*);
  static void cb_Vol(Fl_Menu_*, void*);
  inline void cb_Filled1_i(Fl_Menu_*, void*);
  static void cb_Filled1(Fl_Menu_*, void*);
  inline void cb_6_i(Fl_Menu_*, void*);
  static void cb_6(Fl_Menu_*, void*);
  inline void cb_current_i(Fl_Button*, void*);
  static void cb_current(Fl_Button*, void*);
  inline void cb_7_i(Fl_Button*, void*);
  static void cb_7(Fl_Button*, void*);
public:
  Fl_Value_Output *vertvalout;
  Fl_Choice *hitettype;
  static Fl_Menu_Item menu_hitettype[];
private:
  inline void cb_Vol1_i(Fl_Menu_*, void*);
  static void cb_Vol1(Fl_Menu_*, void*);
  inline void cb_Solid_i(Fl_Menu_*, void*);
  static void cb_Solid(Fl_Menu_*, void*);
public:
  Fl_Button *pickvert;
private:
  inline void cb_pickvert_i(Fl_Button*, void*);
  static void cb_pickvert(Fl_Button*, void*);
  inline void cb_Time_i(Fl_Button*, void*);
  static void cb_Time(Fl_Button*, void*);
public:
  Fl_Group *lightgrp;
  Fl_Value_Slider *lightx;
private:
  inline void cb_lightx_i(Fl_Value_Slider*, void*);
  static void cb_lightx(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *lighty;
private:
  inline void cb_lighty_i(Fl_Value_Slider*, void*);
  static void cb_lighty(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *lightz;
private:
  inline void cb_lightz_i(Fl_Value_Slider*, void*);
  static void cb_lightz(Fl_Value_Slider*, void*);
  inline void cb_reset_i(Fl_Button*, void*);
  static void cb_reset(Fl_Button*, void*);
public:
  Fl_Light_Button *showLightDir;
private:
  inline void cb_showLightDir_i(Fl_Light_Button*, void*);
  static void cb_showLightDir(Fl_Light_Button*, void*);
  inline void cb_zero_i(Fl_Button*, void*);
  static void cb_zero(Fl_Button*, void*);
  inline void cb_zero1_i(Fl_Button*, void*);
  static void cb_zero1(Fl_Button*, void*);
  inline void cb_zero2_i(Fl_Button*, void*);
  static void cb_zero2(Fl_Button*, void*);
public:
  Fl_Light_Button *illBut;
private:
  inline void cb_illBut_i(Fl_Light_Button*, void*);
  static void cb_illBut(Fl_Light_Button*, void*);
public:
  Fl_Value_Slider *ambientslide;
private:
  inline void cb_ambientslide_i(Fl_Value_Slider*, void*);
  static void cb_ambientslide(Fl_Value_Slider*, void*);
public:
  Fl_Light_Button *facetshadBut;
private:
  inline void cb_facetshadBut_i(Fl_Light_Button*, void*);
  static void cb_facetshadBut(Fl_Light_Button*, void*);
  inline void cb_fixed_i(Fl_Light_Button*, void*);
  static void cb_fixed(Fl_Light_Button*, void*);
public:
  Fl_Value_Slider *specularslide;
private:
  inline void cb_specularslide_i(Fl_Value_Slider*, void*);
  static void cb_specularslide(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *diffuseslide;
private:
  inline void cb_diffuseslide_i(Fl_Value_Slider*, void*);
  static void cb_diffuseslide(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *backintensityslide;
private:
  inline void cb_backintensityslide_i(Fl_Value_Slider*, void*);
  static void cb_backintensityslide(Fl_Value_Slider*, void*);
public:
  Fl_Group *surfgrp;
  Fl_Light_Button *surfvisbut;
private:
  inline void cb_surfvisbut_i(Fl_Light_Button*, void*);
  static void cb_surfvisbut(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *surfoutlinebut;
private:
  inline void cb_surfoutlinebut_i(Fl_Light_Button*, void*);
  static void cb_surfoutlinebut(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *surffillbut;
private:
  inline void cb_surffillbut_i(Fl_Light_Button*, void*);
  static void cb_surffillbut(Fl_Light_Button*, void*);
  inline void cb_Outline_i(Fl_Button*, void*);
  static void cb_Outline(Fl_Button*, void*);
  inline void cb_Fill_i(Fl_Button*, void*);
  static void cb_Fill(Fl_Button*, void*);
public:
  Fl_Check_Browser *surflist;
private:
  inline void cb_all_i(Fl_Button*, void*);
  static void cb_all(Fl_Button*, void*);
  inline void cb_invert1_i(Fl_Button*, void*);
  static void cb_invert1(Fl_Button*, void*);
  inline void cb_shown_i(Fl_Button*, void*);
  static void cb_shown(Fl_Button*, void*);
  static Fl_Menu_Item menu_Delete[];
  inline void cb_really_i(Fl_Menu_*, void*);
  static void cb_really(Fl_Menu_*, void*);
  inline void cb_Rename_i(Fl_Button*, void*);
  static void cb_Rename(Fl_Button*, void*);
public:
  Fl_Group *vectorgrp;
  Fl_Light_Button *veconbut;
private:
  inline void cb_veconbut_i(Fl_Light_Button*, void*);
  static void cb_veconbut(Fl_Light_Button*, void*);
public:
  Fl_Roller *veclength;
private:
  inline void cb_veclength_i(Fl_Roller*, void*);
  static void cb_veclength(Fl_Roller*, void*);
public:
  Fl_Button *veccolor;
private:
  inline void cb_veccolor_i(Fl_Button*, void*);
  static void cb_veccolor(Fl_Button*, void*);
public:
  Fl_Menu_Button *veclengthdeterm;
  static Fl_Menu_Item menu_veclengthdeterm[];
  static Fl_Menu_Item *veclenmag;
private:
  inline void cb_veclenmag_i(Fl_Menu_*, void*);
  static void cb_veclenmag(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *veclenscalar;
private:
  inline void cb_veclenscalar_i(Fl_Menu_*, void*);
  static void cb_veclenscalar(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *veclenfix;
private:
  inline void cb_veclenfix_i(Fl_Menu_*, void*);
  static void cb_veclenfix(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *veccoldeterm;
  static Fl_Menu_Item menu_veccoldeterm[];
  static Fl_Menu_Item *veccolmag;
private:
  inline void cb_veccolmag_i(Fl_Menu_*, void*);
  static void cb_veccolmag(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *veccolscalar;
private:
  inline void cb_veccolscalar_i(Fl_Menu_*, void*);
  static void cb_veccolscalar(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *veccolfix;
private:
  inline void cb_veccolfix_i(Fl_Menu_*, void*);
  static void cb_veccolfix(Fl_Menu_*, void*);
public:
  Fl_Value_Input *vecstride;
private:
  inline void cb_vecstride_i(Fl_Value_Input*, void*);
  static void cb_vecstride(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *vecstoch;
private:
  inline void cb_vecstoch_i(Fl_Check_Button*, void*);
  static void cb_vecstoch(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *vecheads;
private:
  inline void cb_vecheads_i(Fl_Check_Button*, void*);
  static void cb_vecheads(Fl_Check_Button*, void*);
public:
  MyValueInput *vecstart;
private:
  inline void cb_vecstart_i(MyValueInput*, void*);
  static void cb_vecstart(MyValueInput*, void*);
public:
  Fl_Group *veccolgroup;
  Fl_Value_Input *veccolmin;
private:
  inline void cb_veccolmin_i(Fl_Value_Input*, void*);
  static void cb_veccolmin(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *veccolmax;
private:
  inline void cb_veccolmax_i(Fl_Value_Input*, void*);
  static void cb_veccolmax(Fl_Value_Input*, void*);
public:
  Fl_Choice *veccstype;
  static Fl_Menu_Item menu_veccstype[];
private:
  inline void cb_8_i(Fl_Menu_*, void*);
  static void cb_8(Fl_Menu_*, void*);
  inline void cb_9_i(Fl_Menu_*, void*);
  static void cb_9(Fl_Menu_*, void*);
  inline void cb_a_i(Fl_Menu_*, void*);
  static void cb_a(Fl_Menu_*, void*);
  inline void cb_b_i(Fl_Menu_*, void*);
  static void cb_b(Fl_Menu_*, void*);
  inline void cb_c_i(Fl_Menu_*, void*);
  static void cb_c(Fl_Menu_*, void*);
  inline void cb_d_i(Fl_Menu_*, void*);
  static void cb_d(Fl_Menu_*, void*);
  inline void cb_e_i(Fl_Menu_*, void*);
  static void cb_e(Fl_Menu_*, void*);
  inline void cb_f_i(Fl_Menu_*, void*);
  static void cb_f(Fl_Menu_*, void*);
  inline void cb_10_i(Fl_Menu_*, void*);
  static void cb_10(Fl_Menu_*, void*);
  inline void cb_11_i(Fl_Menu_*, void*);
  static void cb_11(Fl_Menu_*, void*);
  inline void cb_12_i(Fl_Menu_*, void*);
  static void cb_12(Fl_Menu_*, void*);
  inline void cb_13_i(Fl_Menu_*, void*);
  static void cb_13(Fl_Menu_*, void*);
  inline void cb_14_i(Fl_Menu_*, void*);
  static void cb_14(Fl_Menu_*, void*);
  inline void cb_15_i(Fl_Menu_*, void*);
  static void cb_15(Fl_Menu_*, void*);
  inline void cb_optimal_i(Fl_Button*, void*);
  static void cb_optimal(Fl_Button*, void*);
public:
  Fl_Light_Button *vecautocal;
private:
  inline void cb_vecautocal_i(Fl_Light_Button*, void*);
  static void cb_vecautocal(Fl_Light_Button*, void*);
public:
  Fl_Group *auxgridgrp;
  Fl_Light_Button *auxgriddispbut;
private:
  inline void cb_auxgriddispbut_i(Fl_Light_Button*, void*);
  static void cb_auxgriddispbut(Fl_Light_Button*, void*);
  inline void cb_optimal1_i(Fl_Button*, void*);
  static void cb_optimal1(Fl_Button*, void*);
public:
  Fl_Choice *auxcstype;
  static Fl_Menu_Item menu_auxcstype[];
private:
  inline void cb_16_i(Fl_Menu_*, void*);
  static void cb_16(Fl_Menu_*, void*);
  inline void cb_17_i(Fl_Menu_*, void*);
  static void cb_17(Fl_Menu_*, void*);
  inline void cb_18_i(Fl_Menu_*, void*);
  static void cb_18(Fl_Menu_*, void*);
  inline void cb_19_i(Fl_Menu_*, void*);
  static void cb_19(Fl_Menu_*, void*);
  inline void cb_1a_i(Fl_Menu_*, void*);
  static void cb_1a(Fl_Menu_*, void*);
  inline void cb_1b_i(Fl_Menu_*, void*);
  static void cb_1b(Fl_Menu_*, void*);
  inline void cb_1c_i(Fl_Menu_*, void*);
  static void cb_1c(Fl_Menu_*, void*);
  inline void cb_1d_i(Fl_Menu_*, void*);
  static void cb_1d(Fl_Menu_*, void*);
  inline void cb_1e_i(Fl_Menu_*, void*);
  static void cb_1e(Fl_Menu_*, void*);
  inline void cb_1f_i(Fl_Menu_*, void*);
  static void cb_1f(Fl_Menu_*, void*);
  inline void cb_20_i(Fl_Menu_*, void*);
  static void cb_20(Fl_Menu_*, void*);
  inline void cb_21_i(Fl_Menu_*, void*);
  static void cb_21(Fl_Menu_*, void*);
  inline void cb_22_i(Fl_Menu_*, void*);
  static void cb_22(Fl_Menu_*, void*);
  inline void cb_23_i(Fl_Menu_*, void*);
  static void cb_23(Fl_Menu_*, void*);
public:
  Fl_Value_Input *auxmincolval;
private:
  inline void cb_auxmincolval_i(Fl_Value_Input*, void*);
  static void cb_auxmincolval(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *auxmaxcolval;
private:
  inline void cb_auxmaxcolval_i(Fl_Value_Input*, void*);
  static void cb_auxmaxcolval(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *auxnumcolev;
private:
  inline void cb_auxnumcolev_i(Fl_Value_Input*, void*);
  static void cb_auxnumcolev(Fl_Value_Input*, void*);
public:
  Fl_Light_Button *auxautocalibratebut;
private:
  inline void cb_auxautocalibratebut_i(Fl_Light_Button*, void*);
  static void cb_auxautocalibratebut(Fl_Light_Button*, void*);
public:
  Fl_Button *auxptcolor;
private:
  inline void cb_auxptcolor_i(Fl_Button*, void*);
  static void cb_auxptcolor(Fl_Button*, void*);
public:
  Fl_Light_Button *auxptdat;
private:
  inline void cb_auxptdat_i(Fl_Light_Button*, void*);
  static void cb_auxptdat(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *auxptsize;
private:
  inline void cb_auxptsize_i(Fl_Value_Input*, void*);
  static void cb_auxptsize(Fl_Value_Input*, void*);
public:
  Fl_Choice *auxptstyle;
  static Fl_Menu_Item menu_auxptstyle[];
private:
  inline void cb_Off_i(Fl_Menu_*, void*);
  static void cb_Off(Fl_Menu_*, void*);
  inline void cb_Point_i(Fl_Menu_*, void*);
  static void cb_Point(Fl_Menu_*, void*);
  inline void cb_3D_i(Fl_Menu_*, void*);
  static void cb_3D(Fl_Menu_*, void*);
public:
  Fl_Button *auxlinecolor;
private:
  inline void cb_auxlinecolor_i(Fl_Button*, void*);
  static void cb_auxlinecolor(Fl_Button*, void*);
public:
  Fl_Light_Button *auxlinedat;
private:
  inline void cb_auxlinedat_i(Fl_Light_Button*, void*);
  static void cb_auxlinedat(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *auxlinewidth;
private:
  inline void cb_auxlinewidth_i(Fl_Value_Input*, void*);
  static void cb_auxlinewidth(Fl_Value_Input*, void*);
public:
  Fl_Choice *auxlinestyle;
  static Fl_Menu_Item menu_auxlinestyle[];
private:
  inline void cb_Off1_i(Fl_Menu_*, void*);
  static void cb_Off1(Fl_Menu_*, void*);
  inline void cb_Line_i(Fl_Menu_*, void*);
  static void cb_Line(Fl_Menu_*, void*);
  inline void cb_3D1_i(Fl_Menu_*, void*);
  static void cb_3D1(Fl_Menu_*, void*);
public:
  Fl_Button *auxsurfcolor;
private:
  inline void cb_auxsurfcolor_i(Fl_Button*, void*);
  static void cb_auxsurfcolor(Fl_Button*, void*);
public:
  Fl_Light_Button *auxsurfdat;
private:
  inline void cb_auxsurfdat_i(Fl_Light_Button*, void*);
  static void cb_auxsurfdat(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *auxsurfline;
private:
  inline void cb_auxsurfline_i(Fl_Value_Input*, void*);
  static void cb_auxsurfline(Fl_Value_Input*, void*);
public:
  Fl_Choice *auxsurfstyle;
  static Fl_Menu_Item menu_auxsurfstyle[];
private:
  inline void cb_Off2_i(Fl_Menu_*, void*);
  static void cb_Off2(Fl_Menu_*, void*);
  inline void cb_Outline1_i(Fl_Menu_*, void*);
  static void cb_Outline1(Fl_Menu_*, void*);
  inline void cb_Filled2_i(Fl_Menu_*, void*);
  static void cb_Filled2(Fl_Menu_*, void*);
public:
  Fl_Button *auxvolcolor;
private:
  inline void cb_auxvolcolor_i(Fl_Button*, void*);
  static void cb_auxvolcolor(Fl_Button*, void*);
public:
  Fl_Light_Button *auxvoldat;
private:
  inline void cb_auxvoldat_i(Fl_Light_Button*, void*);
  static void cb_auxvoldat(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *auxvolline;
private:
  inline void cb_auxvolline_i(Fl_Value_Input*, void*);
  static void cb_auxvolline(Fl_Value_Input*, void*);
public:
  Fl_Choice *auxvolstyle;
  static Fl_Menu_Item menu_auxvolstyle[];
private:
  inline void cb_Off3_i(Fl_Menu_*, void*);
  static void cb_Off3(Fl_Menu_*, void*);
  inline void cb_Outline2_i(Fl_Menu_*, void*);
  static void cb_Outline2(Fl_Menu_*, void*);
  inline void cb_Filled3_i(Fl_Menu_*, void*);
  static void cb_Filled3(Fl_Menu_*, void*);
public:
  Fl_Button *plotAuxTS;
private:
  inline void cb_plotAuxTS_i(Fl_Button*, void*);
  static void cb_plotAuxTS(Fl_Button*, void*);
public:
  Fl_Light_Button *hiAuxVert;
private:
  inline void cb_hiAuxVert_i(Fl_Light_Button*, void*);
  static void cb_hiAuxVert(Fl_Light_Button*, void*);
public:
  MyValueInput *auxhivert;
private:
  inline void cb_auxhivert_i(MyValueInput*, void*);
  static void cb_auxhivert(MyValueInput*, void*);
public:
  Fl_Value_Output *auxvertval;
private:
  inline void cb_Clip_i(Fl_Light_Button*, void*);
  static void cb_Clip(Fl_Light_Button*, void*);
public:
  Fl_Group *colorscalegrp;
private:
  inline void cb_optimal2_i(Fl_Button*, void*);
  static void cb_optimal2(Fl_Button*, void*);
public:
  Fl_Choice *cstype;
  static Fl_Menu_Item menu_cstype[];
private:
  inline void cb_24_i(Fl_Menu_*, void*);
  static void cb_24(Fl_Menu_*, void*);
  inline void cb_25_i(Fl_Menu_*, void*);
  static void cb_25(Fl_Menu_*, void*);
  inline void cb_26_i(Fl_Menu_*, void*);
  static void cb_26(Fl_Menu_*, void*);
  inline void cb_27_i(Fl_Menu_*, void*);
  static void cb_27(Fl_Menu_*, void*);
  inline void cb_28_i(Fl_Menu_*, void*);
  static void cb_28(Fl_Menu_*, void*);
  inline void cb_29_i(Fl_Menu_*, void*);
  static void cb_29(Fl_Menu_*, void*);
  inline void cb_2a_i(Fl_Menu_*, void*);
  static void cb_2a(Fl_Menu_*, void*);
  inline void cb_2b_i(Fl_Menu_*, void*);
  static void cb_2b(Fl_Menu_*, void*);
  inline void cb_2c_i(Fl_Menu_*, void*);
  static void cb_2c(Fl_Menu_*, void*);
  inline void cb_2d_i(Fl_Menu_*, void*);
  static void cb_2d(Fl_Menu_*, void*);
  inline void cb_2e_i(Fl_Menu_*, void*);
  static void cb_2e(Fl_Menu_*, void*);
  inline void cb_2f_i(Fl_Menu_*, void*);
  static void cb_2f(Fl_Menu_*, void*);
  inline void cb_30_i(Fl_Menu_*, void*);
  static void cb_30(Fl_Menu_*, void*);
  inline void cb_31_i(Fl_Menu_*, void*);
  static void cb_31(Fl_Menu_*, void*);
public:
  Fl_Value_Input *mincolval;
private:
  inline void cb_mincolval_i(Fl_Value_Input*, void*);
  static void cb_mincolval(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *maxcolval;
private:
  inline void cb_maxcolval_i(Fl_Value_Input*, void*);
  static void cb_maxcolval(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *numcolev;
private:
  inline void cb_numcolev_i(Fl_Value_Input*, void*);
  static void cb_numcolev(Fl_Value_Input*, void*);
public:
  Fl_Light_Button *autocalibratebut;
private:
  inline void cb_autocalibratebut_i(Fl_Light_Button*, void*);
  static void cb_autocalibratebut(Fl_Light_Button*, void*);
  inline void cb_32_i(Fl_Button*, void*);
  static void cb_32(Fl_Button*, void*);
public:
  Fl_Group *animate_group;
  Myslider *tmslider;
private:
  inline void cb_tmslider_i(Myslider*, void*);
  static void cb_tmslider(Myslider*, void*);
  inline void cb_33_i(Fl_Button*, void*);
  static void cb_33(Fl_Button*, void*);
  inline void cb_34_i(Fl_Button*, void*);
  static void cb_34(Fl_Button*, void*);
public:
  Fl_Counter *frameskip;
private:
  inline void cb_frameskip_i(Fl_Counter*, void*);
  static void cb_frameskip(Fl_Counter*, void*);
public:
  Fl_Value_Input *animdelay;
private:
  inline void cb_animdelay_i(Fl_Value_Input*, void*);
  static void cb_animdelay(Fl_Value_Input*, void*);
public:
  Fl_Button *tsync_but;
private:
  inline void cb_tsync_but_i(Fl_Button*, void*);
  static void cb_tsync_but(Fl_Button*, void*);
public:
  void outputwin( TBmeshWin *w );
private:
  TBmeshWin *mwtb; 
public:
  Fl_Window* proginfo; 
private:
  ObjProps *objprops[maxobject]; 
public:
  colourChoice * pickcolor(Object_t obj, const char* wintitle, colourChoice *cc=NULL );
  void update_surfGUI( int s );
  void update_regionGUI( int r );
  void highlight_region();
  void set_rot( char n, int neg, int view );
  void set_tet_region( Model *model);
  bool * regselected();
  void save_state();
  void save_colour( ofstream&ofs, const GLfloat *col );
  colourChoice * pick_surf_color(Object_t ot, const char *winlab, colourChoice *cc=NULL);
  void restore_state(const char* fname=NULL);
  void surfselected(vector<int>& lst);
  void refresh_surflist(int state=1);
  void dispVertVal(double d);
  void write_surfaces(int start );
  void update_vecdata(VecData *vd);
};
#include <FL/Fl_Window.H>
#include <FL/Fl_Text_Display.H>

class ProgInfo {
public:
  ProgInfo();
  Fl_Window *proginfo;
  Fl_Text_Display *infotxt;
};
#include <FL/Fl_Return_Button.H>

class ObjProps {
public:
  ObjProps( TBmeshWin* wtb, Object_t o );
  Fl_Window *win;
  Fl_Check_Button *thrD;
private:
  inline void cb_thrD_i(Fl_Check_Button*, void*);
  static void cb_thrD(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *stride;
private:
  inline void cb_stride_i(Fl_Value_Input*, void*);
  static void cb_stride(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *sizeinp;
private:
  inline void cb_sizeinp_i(Fl_Value_Input*, void*);
  static void cb_sizeinp(Fl_Value_Input*, void*);
public:
  Fl_Color_Chooser *color;
private:
  inline void cb_color_i(Fl_Color_Chooser*, void*);
  static void cb_color(Fl_Color_Chooser*, void*);
public:
  Fl_Value_Slider *opacity;
private:
  inline void cb_Done_i(Fl_Button*, void*);
  static void cb_Done(Fl_Button*, void*);
  inline void cb_Apply_i(Fl_Return_Button*, void*);
  static void cb_Apply(Fl_Return_Button*, void*);
  TBmeshWin *mwtb; 
  Object_t obj; 
  int nreg; 
  GLfloat c[4]; 
public:
  void update();
};
#endif
