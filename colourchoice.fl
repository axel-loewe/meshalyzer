# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
decl {\#include <FL/gl.h>} {public local
}

decl {class TBmeshWin;} {public global
}

decl {\#include "TBmeshWin.h"} {private local
}

decl {\#include "FL/Fl_Check_Browser.H"} {public local
}

decl {\#include "Surfaces.h"} {public local
}

decl {\#include "AuxGrid.h"} {private local
}

decl {\#include <string>} {private local
}

class colourChoice {open
} {
  Function {colourChoice( GLfloat *c, Fl_Check_Browser *cb, Object_t o, TBmeshWin *t )} {open
  } {
    Fl_Window window {
      label {Choose colour} open
      xywh {1701 462 225 260} type Double hide
    } {
      Fl_Box rgb_choice {
        callback {uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();}
        xywh {0 0 225 175}
        code0 {\#include <FL/Fl_Color_Chooser.H>}
        class Fl_Color_Chooser
      }
      Fl_Slider opacity {
        label Opacity
        xywh {10 190 205 25} type {Horz Fill} selection_color 0 align 1 step 0.01 value 1
      }
      Fl_Return_Button {} {
        label Done
        callback {apbut->do_callback();
window->hide();}
        xywh {125 225 90 30}
      }
      Fl_Button apbut {
        label Apply
        callback {GLfloat col[4];
col[0] = rgb_choice->r();
col[1] = rgb_choice->g();
col[2] = rgb_choice->b();
col[3] = opacity->value();
for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) 
    tbmw->set_color( obj, r, col[0], col[1], col[2], col[3] );
tbmw->redraw();}
        xywh {15 225 95 30}
      }
    }
    code {obj = o;
tbmw = t;
ch_br = cb;

rgb_choice->rgb(c[0], c[1], c[2] );
opacity->value( c[3] );} {}
  }
  decl {Fl_Check_Browser *ch_br;} {private local
  }
  decl {Object_t obj;} {private local
  }
  decl {TBmeshWin *tbmw;} {private local
  }
}

class surfColourChoice {open
} {
  Function {surfColourChoice( GLfloat *c, GLfloat *matprop, Fl_Check_Browser *cb, Object_t o, TBmeshWin *t )} {open
  } {
    Fl_Window window {
      label {Choose colour} open
      xywh {2005 213 225 425} type Double labelsize 12 align 2 visible
    } {
      Fl_Box rgb_choice {
        callback {uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();} selected
        xywh {0 0 225 175}
        code0 {\#include <FL/Fl_Color_Chooser.H>}
        class Fl_Color_Chooser
      }
      Fl_Return_Button {} {
        label Done
        callback {apbut->do_callback();
window->hide();}
        xywh {125 233 90 30}
      }
      Fl_Button apbut {
        label Apply
        callback {GLfloat col[4];
col[0] = rgb_choice->r();
col[1] = rgb_choice->g();
col[2] = rgb_choice->b();
col[3] = opacity->value();
for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) {
    tbmw->set_color( obj, r, col[0], col[1], col[2], col[3] );
    tbmw->model->set_mat( r, diffuse->value(), specular->value(),
                          shiny->value(), back->value() );
  }
tbmw->redraw();}
        xywh {10 234 95 30}
      }
      Fl_Value_Slider shiny {
        label {shiny:}
        callback {for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) {
    tbmw->model->set_mat( r, diffuse->value(), specular->value(),
                          shiny->value(), back->value() );
  }
tbmw->redraw();}
        xywh {65 273 150 27} type Horizontal labelsize 12 align 4 maximum 128 step 1 value 80 textsize 14
      }
      Fl_Value_Slider diffuse {
        label {diffusive:}
        callback {for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) {
    tbmw->model->set_mat( r, diffuse->value(), specular->value(),
                          shiny->value(), back->value() );
  }
tbmw->redraw();}
        xywh {65 311 150 27} type Horizontal labelsize 12 align 4 minimum -1 value 0.75 textsize 14
      }
      Fl_Value_Slider specular {
        label {specular:}
        callback {for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) {
    tbmw->model->set_mat( r, diffuse->value(), specular->value(),
                          shiny->value(), back->value() );
  }
tbmw->redraw();}
        tooltip {0.75} xywh {65 349 150 27} type Horizontal labelsize 12 align 4 minimum -1 value 0.8 textsize 14
      }
      Fl_Value_Slider back {
        label {back light:}
        callback {for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) {
    tbmw->model->set_mat( r, diffuse->value(), specular->value(),
                          shiny->value(), back->value() );
  }
tbmw->redraw();}
        xywh {65 388 150 27} type Horizontal labelsize 12 align 4 value 0.5 textsize 14
      }
      Fl_Value_Slider opacity {
        label Opacity
        xywh {10 196 210 28} type {Horz Fill} color 47 selection_color 86 align 1 value 1 textsize 14
      }
    }
    code {obj = o;
tbmw = t;
ch_br = cb;

rgb_choice->rgb(c[0], c[1], c[2] );
rgb_choice->redraw();
opacity->value( c[3] );
diffuse->value( matprop[0] );
specular->value( matprop[1] );
shiny->value( matprop[2] );
back->value( matprop[3] );} {}
  }
  decl {Fl_Check_Browser *ch_br;} {private local
  }
  decl {Object_t obj;} {private local
  }
  decl {TBmeshWin *tbmw;} {private local
  }
}

class AuxColourChoice {open
} {
  Function {AuxColourChoice( GLfloat *c, Object_t o, TBmeshWin *tb)} {open
  } {
    Fl_Window window {
      label {Choose colour} open
      xywh {656 435 225 260} type Double hide
    } {
      Fl_Box rgb_choice {
        callback {uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();}
        xywh {0 0 225 175}
        code0 {\#include <FL/Fl_Color_Chooser.H>}
        class Fl_Color_Chooser
      }
      Fl_Slider opacity {
        label Opacity
        xywh {10 190 205 25} type {Horz Fill} selection_color 0 align 1 step 0.01 value 1
      }
      Fl_Return_Button {} {
        label Done
        callback {apbut->do_callback();
window->hide();}
        xywh {125 225 90 30}
      }
      Fl_Button apbut {
        label Apply
        callback {GLfloat col[4];
col[0] = rgb_choice->r();
col[1] = rgb_choice->g();
col[2] = rgb_choice->b();
col[3] = opacity->value(); 
tbmw->auxGrid->color( obj, col );
tbmw->redraw();}
        xywh {15 225 95 30}
      }
    }
    code {col = c;
obj = o;
tbmw = tb;

rgb_choice->rgb(col[0], col[1], col[2] );
opacity->value( col[3] );
string title="Aux ";
title += objnames[obj];
title += " color";
window->label( title.c_str() );
window->show();} {}
  }
  decl {GLfloat *col;} {private local
  }
  decl {Object_t obj;} {private local
  }
  decl {TBmeshWin *tbmw;} {private local
  }
}
