// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "trimesh.h"
#include <vector>
#include "HDF5DataBrowser.h"
#define SAVE_WIDGET(f,a) f<<#a<<" = "<<double(a->value())<<endl;
#define TEST_VAR(A,B,C) if(!strcmp(#A,B)){A->value(C);A->do_callback();continue;}
#define TEST_RADIO(A,B,C,D) if(!strcmp(#A,B)){if(C){A->setonly();A->do_callback(D);}continue;}
#define TEST_CHOICE(A,B,C) if(!strcmp(#A,B)){A->value(C);A->mvalue()->do_callback(A);continue;}
#define TEST_MENUVAR(A,B,C,D) if(!strcmp(#A,B)){if(C)A->set();else A->clear();if(A->callback())A->do_callback(D);continue;}
#define IGNORE_VAR(A,B) if(!strcmp(#A,B)){continue;}
#define MAX_INIT_VECS 200000
#include <set>

Meshwin::Meshwin() {
  { winny = new Fl_Double_Window(455, 455, "trimesh");
    winny->user_data((void*)(this));
    winny->hotspot(winny);
    { trackballwin = new TBmeshWin(0, 0, 455, 455);
      trackballwin->box(FL_NO_BOX);
      trackballwin->color(FL_BACKGROUND_COLOR);
      trackballwin->selection_color(FL_BACKGROUND_COLOR);
      trackballwin->labeltype(FL_NORMAL_LABEL);
      trackballwin->labelfont(0);
      trackballwin->labelsize(14);
      trackballwin->labelcolor(FL_FOREGROUND_COLOR);
      trackballwin->align(Fl_Align(FL_ALIGN_CENTER));
      trackballwin->when(FL_WHEN_RELEASE);
    } // TBmeshWin* trackballwin
    winny->end();
    winny->resizable(winny);
  } // Fl_Double_Window* winny
  winny->resizable(trackballwin);
  winny->size_range(50,50,1600,1600,5,5,1);
}

void Controls::cb_Add_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Surface", "*.{tris,surf,tri}",NULL);
int sn;
if( fn != NULL ) {
  if( (sn=mwtb->add_surface(fn))>0 ) {
    for( int s=0; s<sn; s++ ) {
      surflist->add(mwtb->model->surface(surflist->nitems())->label().c_str(),1);
    }
    elehi->activate();
    elehi->maximum(mwtb->model->number(SurfEle)-1);
    mwtb->redraw();
    surflist->redraw();
  }
};
}
void Controls::cb_Add(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Add_i(o,v);
}

void Controls::cb_Compute_i(Fl_Menu_*, void*) {
  fl_cursor( FL_CURSOR_WAIT ); 
Fl::check();
int nsa=mwtb->model->add_region_surfaces();
int ns = mwtb->model->numSurf();
for( int i=ns-nsa; i<ns; i++ )  
  surflist->add( mwtb->model->surface(i)->label().c_str(),1);
surflist->redraw();
fl_cursor( FL_CURSOR_DEFAULT );
Fl::check();
write_surfaces(ns-nsa);
}
void Controls::cb_Compute(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Compute_i(o,v);
}

void Controls::cb_Read_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Data file","*{out,dat}*",NULL);
if(fn != NULL) mwtb->get_data(fn,tmslider);
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_Read(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read_i(o,v);
}

void Controls::cb_Read1_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Data file","*igb*",NULL);
if(fn != NULL) {
  fl_cursor(FL_CURSOR_WAIT);
  Fl::check();
  mwtb->get_data(fn,tmslider);
  fl_cursor(FL_CURSOR_DEFAULT);
  Fl::check();
}
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_Read1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read1_i(o,v);
}

void Controls::cb_Read2_i(Fl_Menu_*, void*) {
  if( !mwtb->getVecData(tmslider) ) {
  vectorgrp->activate();
  tabwidget->value(vectorgrp);
};
}
void Controls::cb_Read2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read2_i(o,v);
}

void Controls::cb_Read3_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser( "Auxiliary Grid", "*.pts_t", NULL );
if( fn && !mwtb->readAuxGrid(tmslider,fn) ) {
  auxgridgrp->activate();
  tabwidget->value(auxgridgrp);
  float val;
  if( mwtb->auxGrid->highlight_vertex(0,val))
     auxvertval->value(val);
   else
     auxvertval->value(0);
   auxhivert->value(0);
};
}
void Controls::cb_Read3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read3_i(o,v);
}

void Controls::cb_Read4_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("Dynamic Points", "*.dynpt", NULL );
if( fn ) mwtb->read_dynamic_pts( fn, tmslider );
}
void Controls::cb_Read4(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read4_i(o,v);
}

void Controls::cb_hdfreadbut_i(Fl_Menu_*, void*) {
  #ifdef USE_HDF5
HDF5DataBrowser *brow =  new HDF5DataBrowser( fl_file_chooser("Choose HDF5 data file", "*.datH5", NULL ), mwtb );
#endif
}
void Controls::cb_hdfreadbut(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_hdfreadbut_i(o,v);
}

void Controls::cb_Save_i(Fl_Menu_*, void*) {
  char*fn;
fn=fl_file_chooser("Save Xfrm","*.xfrm",NULL);
if( fn != NULL )
 mwtb->trackball.save(fn);
}
void Controls::cb_Save(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void Controls::cb_Read5_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("Xfrm file","*.xfrm",NULL);
if( fn != NULL ){
  mwtb->trackball.read(fn);
  mwtb->redraw();
};
}
void Controls::cb_Read5(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read5_i(o,v);
}

void Controls::cb_Save1_i(Fl_Menu_*, void*) {
  save_state();
}
void Controls::cb_Save1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void Controls::cb_Restore_i(Fl_Menu_*, void*) {
  restore_state();
}
void Controls::cb_Restore(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Restore_i(o,v);
}

void Controls::cb_Link_i(Fl_Menu_*, void*) {
  mwtb->tmLink->list_mesh_pids();
mwtb->tmLink->window->show();
}
void Controls::cb_Link(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Link_i(o,v);
}

void Controls::cb_Quit_i(Fl_Menu_*, void*) {
  exit(0);
}
void Controls::cb_Quit(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void Controls::cb_Reset_i(Fl_Menu_*, void*) {
  mwtb->trackball.Reset();
float md = mwtb->get_maxdim();
mwtb->trackball.mouse.SetOglPosAndSize(-md, md, 2*md, 2*md );
mwtb->trackball.size = md;
const GLfloat* po=mwtb->model->pt_offset();
mwtb->trackball.SetOrigin(-po[0],-po[1],-po[2]);
mwtb->redraw();
}
void Controls::cb_Reset(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void Controls::cb__i(Fl_Menu_*, void*) {
  set_rot('X',0,0);
}
void Controls::cb_(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb__i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_ppaxis[] =
{254,254,254,254,254,254,254,254,254,253,253,253,254,254,254,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,237,237,237,135,135,135,251,251,251,
254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,178,178,178,
7,7,7,221,221,221,255,255,255,253,253,253,254,254,254,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,93,93,93,0,0,0,137,137,137,255,255,255,250,250,250,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,219,219,219,18,18,18,0,0,0,48,48,48,249,249,249,255,255,255,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,127,127,127,0,0,0,3,3,3,0,0,0,179,179,179,255,255,255,
251,251,251,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,32,32,32,0,0,0,4,4,4,0,0,0,89,89,89,255,255,255,
252,252,252,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,211,211,211,255,
255,255,253,253,253,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,156,156,156,115,115,115,22,22,22,145,145,145,143,
143,143,214,214,214,255,255,255,253,253,253,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,200,200,200,41,
41,41,247,247,247,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,192,192,192,37,37,37,242,242,242,253,253,253,252,252,252,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,
254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,
246,246,246,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
195,195,195,38,38,38,246,246,246,255,255,255,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,
255,255,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,
246,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,254,254,254,254,254,254,255,255,255,252,252,252,251,251,251,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,195,195,
195,38,38,38,245,245,245,255,255,255,253,253,253,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,253,253,253,255,255,255,214,214,214,213,213,213,
255,255,255,254,254,254,254,254,254,251,251,251,253,253,253,254,254,254,254,254,
254,255,255,255,195,195,195,40,40,40,247,247,247,255,255,255,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,250,250,250,255,255,255,
144,144,144,0,0,0,90,90,90,181,181,181,248,248,248,255,255,255,254,254,254,254,
254,254,254,254,254,255,255,255,192,192,192,35,35,35,238,238,238,248,248,248,
245,245,245,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,242,242,
242,255,255,255,145,145,145,0,0,0,3,3,3,0,0,0,44,44,44,138,138,138,223,223,223,
254,254,254,253,253,253,255,255,255,224,224,224,37,37,37,31,31,31,39,39,39,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,37,37,40,40,40,22,22,22,
0,0,0,5,5,5,3,3,3,0,0,0,0,0,0,6,6,6,134,134,134,255,255,255,254,254,254,255,
255,255,221,221,221,191,191,191,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,191,191,191,208,208,208,114,114,114,0,0,0,2,
2,2,0,0,0,18,18,18,93,93,93,179,179,179,236,236,236,254,254,254,254,254,254,
254,254,254,254,254,254,255,255,255,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,251,251,251,255,255,255,152,152,152,0,0,
0,31,31,31,128,128,128,221,221,221,255,255,255,254,254,254,254,254,254,254,
254,254};
static Fl_RGB_Image image_ppaxis(idata_ppaxis, 22, 22, 3, 0);

void Controls::cb_item_i(Fl_Menu_*, void*) {
  set_rot('X',0,1);
}
void Controls::cb_item(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item_i(o,v);
}

static const unsigned char idata_npaxis[] =
{254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,156,156,156,0,0,0,32,32,32,127,127,127,219,219,219,255,255,255,255,255,255,
255,255,255,254,254,254,254,254,254,255,255,255,224,224,224,192,192,192,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,192,
192,192,200,200,200,115,115,115,0,0,0,0,0,0,0,0,0,18,18,18,93,93,93,178,178,178,
237,237,237,254,254,254,254,254,254,221,221,221,37,37,37,35,35,35,40,40,40,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,37,37,41,41,41,22,22,22,
0,0,0,4,4,4,3,3,3,0,0,0,0,0,0,7,7,7,135,135,135,254,254,254,255,255,255,191,
191,191,31,31,31,238,238,238,247,247,247,245,245,245,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,242,242,242,247,247,247,145,145,145,0,0,0,0,
0,0,0,0,0,48,48,48,137,137,137,221,221,221,251,251,251,253,253,253,254,254,
254,195,195,195,39,39,39,248,248,248,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,143,143,143,
4,4,4,89,89,89,179,179,179,249,249,249,255,255,255,255,255,255,254,254,254,
254,254,254,255,255,255,195,195,195,38,38,38,245,245,245,254,254,254,253,253,
253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,252,252,252,254,
254,254,214,214,214,211,211,211,255,255,255,255,255,255,255,255,255,250,250,250,
253,253,253,254,254,254,255,255,255,255,255,255,195,195,195,38,38,38,246,246,
246,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,254,254,254,255,255,255,255,255,255,252,252,252,251,251,251,
254,254,254,255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,195,195,
195,38,38,38,246,246,246,255,255,255,254,254,254,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,255,255,255,253,253,253,253,253,253,
254,254,254,255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,255,255,
255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,254,254,254,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,
255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,195,195,38,
38,38,246,246,246,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,
251,251,191,191,191,37,37,37,242,242,242,250,250,250,253,253,253,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,208,208,208,40,40,40,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,152,152,152,114,114,114,22,22,22,
145,145,145,144,144,144,214,214,214,254,254,254,253,253,253,254,254,254,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,213,213,213,255,255,255,253,253,253,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,2,2,2,
5,5,5,3,3,3,90,90,90,255,255,255,252,252,252,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,128,128,128,
0,0,0,3,3,3,0,0,0,181,181,181,254,254,254,251,251,251,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,
221,221,18,18,18,0,0,0,44,44,44,248,248,248,254,254,254,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,93,93,93,0,0,0,138,138,138,255,255,255,251,251,251,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,179,179,179,6,6,6,223,223,223,254,254,254,
253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,236,236,236,134,134,134,
254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
254,254,254,255,255,255,253,253,253,254,254,254,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255};
static Fl_RGB_Image image_npaxis(idata_npaxis, 22, 22, 3, 0);

void Controls::cb_item1_i(Fl_Menu_*, void*) {
  set_rot('X',0,2);
}
void Controls::cb_item1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item1_i(o,v);
}

static const unsigned char idata_nnaxis[] =
{254,254,254,254,254,254,254,254,254,255,255,255,221,221,221,128,128,128,31,
31,31,0,0,0,152,152,152,255,255,255,251,251,251,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,254,254,254,
254,254,254,254,254,254,254,254,254,236,236,236,179,179,179,93,93,93,18,18,18,0,
0,0,2,2,2,0,0,0,114,114,114,208,208,208,191,191,191,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,191,191,191,221,221,
221,255,255,255,254,254,254,255,255,255,134,134,134,6,6,6,0,0,0,0,0,0,3,3,3,5,5,
5,0,0,0,22,22,22,40,40,40,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,39,39,39,31,31,31,37,37,37,224,224,224,255,255,255,253,253,253,254,
254,254,223,223,223,138,138,138,44,44,44,0,0,0,3,3,3,0,0,0,145,145,145,255,255,
255,242,242,242,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,245,
245,245,248,248,248,238,238,238,35,35,35,192,192,192,255,255,255,254,254,254,
254,254,254,254,254,254,255,255,255,248,248,248,181,181,181,90,90,90,0,0,0,144,
144,144,255,255,255,250,250,250,254,254,254,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,247,247,247,40,40,40,195,195,195,255,255,
255,254,254,254,254,254,254,253,253,253,251,251,251,254,254,254,254,254,254,255,
255,255,213,213,213,214,214,214,255,255,255,253,253,253,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,253,253,253,255,255,255,245,245,245,38,38,
38,195,195,195,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,251,251,251,252,252,252,255,255,255,254,254,254,254,254,254,255,255,255,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,
255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,253,253,253,253,253,253,
255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,254,254,254,255,255,255,246,246,246,38,38,38,195,
195,195,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,246,
246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,252,252,252,253,253,253,242,242,242,37,37,37,192,192,192,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,247,247,247,
41,41,41,200,200,200,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,255,255,253,253,253,255,255,255,214,214,214,
143,143,143,145,145,145,22,22,22,115,115,115,156,156,156,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,253,253,253,
255,255,255,211,211,211,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,252,
252,252,255,255,255,89,89,89,0,0,0,4,4,4,0,0,0,32,32,32,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,251,
251,251,255,255,255,179,179,179,0,0,0,3,3,3,0,0,0,127,127,127,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,249,249,249,48,48,48,0,0,0,18,18,18,219,219,219,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,255,255,255,250,250,250,255,255,255,137,137,137,0,0,0,93,93,93,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,253,253,253,255,255,255,221,221,221,
7,7,7,178,178,178,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,251,251,251,135,135,135,237,237,237,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,254,254,254,253,253,253,254,254,254,254,254,254,254,254,254};
static Fl_RGB_Image image_nnaxis(idata_nnaxis, 22, 22, 3, 0);

void Controls::cb_item2_i(Fl_Menu_*, void*) {
  set_rot('X',0,3);
}
void Controls::cb_item2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item2_i(o,v);
}

static const unsigned char idata_pnaxis[] =
{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,253,253,253,255,
255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,254,254,254,134,134,134,236,236,236,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254,253,253,253,254,254,254,223,223,223,6,6,6,179,179,179,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,254,254,254,251,251,251,255,255,255,138,138,138,0,0,0,93,93,93,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,254,254,254,248,248,248,44,44,44,0,
0,0,18,18,18,221,221,221,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,251,251,251,254,254,254,181,181,
181,0,0,0,3,3,3,0,0,0,128,128,128,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,254,254,254,252,252,252,255,255,255,
90,90,90,3,3,3,5,5,5,2,2,2,31,31,31,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,253,253,253,255,255,255,213,213,
213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,253,253,253,254,254,254,214,214,214,
144,144,144,145,145,145,22,22,22,114,114,114,152,152,152,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,40,40,40,208,208,208,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,253,253,253,250,250,250,242,242,242,37,37,
37,191,191,191,251,251,251,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,
254,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,254,254,254,255,255,255,246,246,246,38,38,38,195,
195,195,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,
255,255,255,254,254,254,253,253,253,253,253,253,255,255,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,246,
246,246,38,38,38,195,195,195,255,255,255,254,254,254,254,254,254,254,254,254,
255,255,255,254,254,254,251,251,251,252,252,252,255,255,255,255,255,255,254,254,
254,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,
254,254,254,253,253,253,250,250,250,255,255,255,255,255,255,255,255,255,211,211,
211,214,214,214,254,254,254,252,252,252,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,253,253,253,254,254,254,245,245,245,38,38,38,195,195,195,
255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,249,249,249,179,179,
179,89,89,89,4,4,4,143,143,143,255,255,255,253,253,253,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,39,39,
39,195,195,195,254,254,254,253,253,253,251,251,251,221,221,221,137,137,137,48,
48,48,0,0,0,0,0,0,0,0,0,145,145,145,247,247,247,242,242,242,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,245,245,245,247,247,247,238,238,238,
31,31,31,191,191,191,255,255,255,254,254,254,135,135,135,7,7,7,0,0,0,0,0,0,3,3,
3,4,4,4,0,0,0,22,22,22,41,41,41,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,40,40,40,35,35,35,37,37,37,221,221,221,254,254,254,254,254,
254,237,237,237,178,178,178,93,93,93,18,18,18,0,0,0,0,0,0,0,0,0,115,115,115,200,
200,200,192,192,192,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,192,192,192,224,224,224,255,255,255,254,254,254,254,254,
254,255,255,255,255,255,255,255,255,255,219,219,219,127,127,127,32,32,32,0,0,0,
156,156,156,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254};
static Fl_RGB_Image image_pnaxis(idata_pnaxis, 22, 22, 3, 0);

void Controls::cb_1_i(Fl_Menu_*, void*) {
  set_rot('Y',0,0);
}
void Controls::cb_1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void Controls::cb_item3_i(Fl_Menu_*, void*) {
  set_rot('Y',0,1);
}
void Controls::cb_item3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item3_i(o,v);
}

void Controls::cb_item4_i(Fl_Menu_*, void*) {
  set_rot('Y',0,2);
}
void Controls::cb_item4(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item4_i(o,v);
}

void Controls::cb_item5_i(Fl_Menu_*, void*) {
  set_rot('Y',0,3);
}
void Controls::cb_item5(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item5_i(o,v);
}

void Controls::cb_2_i(Fl_Menu_*, void*) {
  set_rot('Z',0,0);
}
void Controls::cb_2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void Controls::cb_item6_i(Fl_Menu_*, void*) {
  set_rot('Z',0,1);
}
void Controls::cb_item6(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item6_i(o,v);
}

void Controls::cb_item7_i(Fl_Menu_*, void*) {
  set_rot('Z',0,2);
}
void Controls::cb_item7(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item7_i(o,v);
}

void Controls::cb_item8_i(Fl_Menu_*, void*) {
  set_rot('Z',0,3);
}
void Controls::cb_item8(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item8_i(o,v);
}

void Controls::cb_3_i(Fl_Menu_*, void*) {
  set_rot('X',1,0);
}
void Controls::cb_3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void Controls::cb_item9_i(Fl_Menu_*, void*) {
  set_rot('X',1,1);
}
void Controls::cb_item9(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item9_i(o,v);
}

void Controls::cb_itema_i(Fl_Menu_*, void*) {
  set_rot('X',1,2);
}
void Controls::cb_itema(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itema_i(o,v);
}

void Controls::cb_itemb_i(Fl_Menu_*, void*) {
  set_rot('X',1,3);
}
void Controls::cb_itemb(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemb_i(o,v);
}

void Controls::cb_4_i(Fl_Menu_*, void*) {
  set_rot('Y',1,0);
}
void Controls::cb_4(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_4_i(o,v);
}

void Controls::cb_itemc_i(Fl_Menu_*, void*) {
  set_rot('Y',1,1);
}
void Controls::cb_itemc(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemc_i(o,v);
}

void Controls::cb_itemd_i(Fl_Menu_*, void*) {
  set_rot('Y',1,2);
}
void Controls::cb_itemd(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemd_i(o,v);
}

void Controls::cb_iteme_i(Fl_Menu_*, void*) {
  set_rot('Y',1,3);
}
void Controls::cb_iteme(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_iteme_i(o,v);
}

void Controls::cb_5_i(Fl_Menu_*, void*) {
  set_rot('Z',1,0);
}
void Controls::cb_5(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void Controls::cb_itemf_i(Fl_Menu_*, void*) {
  set_rot('Z',1,1);
}
void Controls::cb_itemf(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemf_i(o,v);
}

void Controls::cb_item10_i(Fl_Menu_*, void*) {
  set_rot('Z',1,2);
}
void Controls::cb_item10(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item10_i(o,v);
}

void Controls::cb_item11_i(Fl_Menu_*, void*) {
  set_rot('Z',1,3);
}
void Controls::cb_item11(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item11_i(o,v);
}

void Controls::cb_vertices_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Vertex);
}
void Controls::cb_vertices(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_vertices_i(o,v);
}

void Controls::cb_cables_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Cable);
}
void Controls::cb_cables(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_cables_i(o,v);
}

void Controls::cb_surface_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(SurfEle);
}
void Controls::cb_surface(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_surface_i(o,v);
}

void Controls::cb_surfaces_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Surface);
}
void Controls::cb_surfaces(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_surfaces_i(o,v);
}

void Controls::cb_voxele_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(VolEle);
}
void Controls::cb_voxele(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_voxele_i(o,v);
}

void Controls::cb_White_i(Fl_Menu_*, void*) {
  mwtb->bgd(1);
}
void Controls::cb_White(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_White_i(o,v);
}

void Controls::cb_Gray_i(Fl_Menu_*, void*) {
  mwtb->bgd(0.6);
}
void Controls::cb_Gray(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Gray_i(o,v);
}

void Controls::cb_Black_i(Fl_Menu_*, void*) {
  mwtb->bgd(0);
}
void Controls::cb_Black(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Black_i(o,v);
}

void Controls::cb_revdraworder_i(Fl_Menu_*, void* v) {
  mwtb->revdraworder(((Fl_Menu_Item*)v)->checked());
}
void Controls::cb_revdraworder(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_revdraworder_i(o,v);
}

void Controls::cb_norot_i(Fl_Menu_*, void* v) {
  mwtb->norot(((Fl_Menu_Item*)v)->checked());
}
void Controls::cb_norot(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_norot_i(o,v);
}

void Controls::cb_Viewport_i(Fl_Menu_*, void*) {
  mwtb->SendViewportSyncMessage();
}
void Controls::cb_Viewport(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Viewport_i(o,v);
}

void Controls::cb_Colour_i(Fl_Menu_*, void*) {
  mwtb->SendColourSyncMessage();
}
void Controls::cb_Colour(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Colour_i(o,v);
}

void Controls::cb_Opacity_i(Fl_Menu_*, void*) {
  mwtb->dataopac->window->show();
}
void Controls::cb_Opacity(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Opacity_i(o,v);
}

void Controls::cb_Clipping_i(Fl_Menu_*, void*) {
  mwtb->cplane->window->show();
}
void Controls::cb_Clipping(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Clipping_i(o,v);
}

void Controls::cb_Isosurf_i(Fl_Menu_*, void*) {
  mwtb->isosurfwin->isowin->show();
}
void Controls::cb_Isosurf(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Isosurf_i(o,v);
}

void Controls::cb_Dead_i(Fl_Menu_*, void*) {
  mwtb->deadData->window->show();
}
void Controls::cb_Dead(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Dead_i(o,v);
}

void Controls::cb_brcutNone_i(Fl_Menu_*, void*) {
  mwtb->branch_cut(0,0,0);
}
void Controls::cb_brcutNone(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_brcutNone_i(o,v);
}

void Controls::cb_brcutPM1_i(Fl_Menu_*, void*) {
  mwtb->branch_cut(-1,1,0.2);
}
void Controls::cb_brcutPM1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_brcutPM1_i(o,v);
}

void Controls::cb_brcut01_i(Fl_Menu_*, void*) {
  mwtb->branch_cut(0,1,0.2);
}
void Controls::cb_brcut01(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_brcut01_i(o,v);
}

void Controls::cb_brcutPMpi_i(Fl_Menu_*, void*) {
  mwtb->branch_cut(-M_PI,M_PI,.2);
}
void Controls::cb_brcutPMpi(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_brcutPMpi_i(o,v);
}

void Controls::cb_brcut02pi_i(Fl_Menu_*, void*) {
  mwtb->branch_cut(0,2*M_PI,.2);
}
void Controls::cb_brcut02pi(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_brcut02pi_i(o,v);
}

void Controls::cb_Image_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("PNG image", "*.png", "image.png" );
if( fn!=NULL)
mwtb->output_png(fn);
}
void Controls::cb_Image(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Image_i(o,v);
}

void Controls::cb_Sequence_i(Fl_Menu_*, void*) {
  Sequence *s=new Sequence( mwtb );
s->window->show();
}
void Controls::cb_Sequence(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Sequence_i(o,v);
}

void Controls::cb_transBgd_i(Fl_Menu_*, void*) {
  mwtb->transBgd( transBgd->value() );
}
void Controls::cb_transBgd(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_transBgd_i(o,v);
}

void Controls::cb_PDF_i(Fl_Menu_*, void*) {
  char* fn = fl_file_chooser("PDF file name", "*.pdf", "image.pdf");
if( fn==NULL) return;
mwtb->output_pdf( fn,true );
}
void Controls::cb_PDF(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_PDF_i(o,v);
}

void Controls::cb_EPS_i(Fl_Menu_*, void*) {
  char* fn = fl_file_chooser("EPS file name", "*.eps", "image.eps");
if( fn==NULL) return;
mwtb->output_pdf( fn, false );
}
void Controls::cb_EPS(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_EPS_i(o,v);
}

void Controls::cb_Colour1_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("colour bar image", "*.png", "colour_bar.png" );
if( fn!=NULL)
mwtb->cs->output_png(fn);
}
void Controls::cb_Colour1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Colour1_i(o,v);
}

void Controls::cb_Visible_i(Fl_Menu_*, void*) {
  mwtb->dump_vertices();
}
void Controls::cb_Visible(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Visible_i(o,v);
}

void Controls::cb_start_i(Fl_Menu_*, void*) {
  if( !mwtb->recording ) {
  char* fn=fl_file_chooser( "Pick base name", "*.png", "frame.png" );
  if( fn != NULL ) {
    outmenu->labelcolor(FL_GREEN);
    redrawbut->show();
    mwtb->recording=true;
    mwtb->record_events( fn );
  }
};
}
void Controls::cb_start(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_start_i(o,v);
}

void Controls::cb_stop_i(Fl_Menu_*, void*) {
  mwtb->recording = false;
outmenu->labelcolor(FL_BLACK);
redrawbut->hide();
mainbar->redraw();
}
void Controls::cb_stop(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_stop_i(o,v);
}

void Controls::cb_redrawbut_i(Fl_Menu_*, void*) {
  mwtb->redraw();
}
void Controls::cb_redrawbut(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_redrawbut_i(o,v);
}

void Controls::cb_About_i(Fl_Menu_*, void*) {
  proginfo->show();
}
void Controls::cb_About(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item Controls::menu_mainbar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add surface", 0,  (Fl_Callback*)Controls::cb_Add, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Compute surfaces", 0,  (Fl_Callback*)Controls::cb_Compute, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read data", 0,  (Fl_Callback*)Controls::cb_Read, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read IGB data", 0,  (Fl_Callback*)Controls::cb_Read1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Vector Data", 0,  (Fl_Callback*)Controls::cb_Read2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Aux Grid", 0,  (Fl_Callback*)Controls::cb_Read3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Dyn Pts", 0,  (Fl_Callback*)Controls::cb_Read4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read  HDF5 Data", 0,  (Fl_Callback*)Controls::cb_hdfreadbut, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Recalibrate on read", 0,  0, 0, 134, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save transform", 0,  (Fl_Callback*)Controls::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read transform", 0,  (Fl_Callback*)Controls::cb_Read5, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save state", 0,  (Fl_Callback*)Controls::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Restore state", 0,  (Fl_Callback*)Controls::cb_Restore, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Link", 0,  (Fl_Callback*)Controls::cb_Link, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)Controls::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Image", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reset transform", 0,  (Fl_Callback*)Controls::cb_Reset, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"+X", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"+Y", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"+Z", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-X", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itema, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemb, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-Y", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemc, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemd, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_iteme, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-Z", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemf, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item11, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Randomly colour", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"vertices", 0,  (Fl_Callback*)Controls::cb_vertices, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"cables", 0,  (Fl_Callback*)Controls::cb_cables, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"surface eles", 0,  (Fl_Callback*)Controls::cb_surface, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"surfaces", 0,  (Fl_Callback*)Controls::cb_surfaces, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"voxele", 0,  (Fl_Callback*)Controls::cb_voxele, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Background colour", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"White", 0,  (Fl_Callback*)Controls::cb_White, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Gray", 0,  (Fl_Callback*)Controls::cb_Gray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Black", 0,  (Fl_Callback*)Controls::cb_Black, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Reverse draw order", 0,  (Fl_Callback*)Controls::cb_revdraworder, (void*)(revdraworder), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"No rotation", 0,  (Fl_Callback*)Controls::cb_norot, (void*)(norot), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sync", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Viewport Sync", 0,  (Fl_Callback*)Controls::cb_Viewport, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Colour Scale Sync", 0,  (Fl_Callback*)Controls::cb_Colour, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Data", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Opacity", 0,  (Fl_Callback*)Controls::cb_Opacity, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clipping", 0,  (Fl_Callback*)Controls::cb_Clipping, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Isosurf", 0,  (Fl_Callback*)Controls::cb_Isosurf, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Dead range", 0,  (Fl_Callback*)Controls::cb_Dead, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Branch cut", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"None", 0,  (Fl_Callback*)Controls::cb_brcutNone, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"[-1,1)", 0,  (Fl_Callback*)Controls::cb_brcutPM1, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"[0,1)", 0,  (Fl_Callback*)Controls::cb_brcut01, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"[-pi,pi)", 0,  (Fl_Callback*)Controls::cb_brcutPMpi, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"[0,2pi)", 0,  (Fl_Callback*)Controls::cb_brcut02pi, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Output", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"PNG", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Image", 0,  (Fl_Callback*)Controls::cb_Image, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sequence", 0,  (Fl_Callback*)Controls::cb_Sequence, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Transparent Bgd", 0,  (Fl_Callback*)Controls::cb_transBgd, (void*)(transBgd), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"PDF", 0,  (Fl_Callback*)Controls::cb_PDF, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"EPS", 0,  (Fl_Callback*)Controls::cb_EPS, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Colour Bar", 0,  (Fl_Callback*)Controls::cb_Colour1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Visible vertices", 0,  (Fl_Callback*)Controls::cb_Visible, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Record", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"start", 0,  (Fl_Callback*)Controls::cb_start, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"stop", 0,  (Fl_Callback*)Controls::cb_stop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Redraw", 0,  (Fl_Callback*)Controls::cb_redrawbut, 0, 16, FL_NORMAL_LABEL, 0, 14, 180},
 {"item", 0,  0, 0, 0, FL_NO_LABEL, 0, 14, 0},
 {"item", 0,  0, 0, 0, FL_NO_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)Controls::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Controls::hdfreadbut = Controls::menu_mainbar + 8;
Fl_Menu_Item* Controls::read_recalibrate = Controls::menu_mainbar + 9;
Fl_Menu_Item* Controls::imgmenu = Controls::menu_mainbar + 17;
Fl_Menu_Item* Controls::revdraworder = Controls::menu_mainbar + 69;
Fl_Menu_Item* Controls::norot = Controls::menu_mainbar + 70;
Fl_Menu_Item* Controls::brcut = Controls::menu_mainbar + 81;
Fl_Menu_Item* Controls::brcutNone = Controls::menu_mainbar + 82;
Fl_Menu_Item* Controls::brcutPM1 = Controls::menu_mainbar + 83;
Fl_Menu_Item* Controls::brcut01 = Controls::menu_mainbar + 84;
Fl_Menu_Item* Controls::brcutPMpi = Controls::menu_mainbar + 85;
Fl_Menu_Item* Controls::brcut02pi = Controls::menu_mainbar + 86;
Fl_Menu_Item* Controls::outmenu = Controls::menu_mainbar + 89;
Fl_Menu_Item* Controls::transBgd = Controls::menu_mainbar + 93;
Fl_Menu_Item* Controls::recordmenu = Controls::menu_mainbar + 99;
Fl_Menu_Item* Controls::redrawbut = Controls::menu_mainbar + 104;

void Controls::cb_vertdisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked()) mwtb->datify(Vertex);
else mwtb->undatify(Vertex);
}
void Controls::cb_vertdisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_vertdisp_i(o,v);
}

void Controls::cb_cabledisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked()) mwtb->datify(Cable);
else mwtb->undatify(Cable);
}
void Controls::cb_cabledisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_cabledisp_i(o,v);
}

void Controls::cb_cnnxdisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked()) mwtb->datify(Cnnx);
else mwtb->undatify(Cnnx);
}
void Controls::cb_cnnxdisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_cnnxdisp_i(o,v);
}

void Controls::cb_surfedgedisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked() ) mwtb->datify(SurfEle);
else mwtb->undatify(SurfEle);
}
void Controls::cb_surfedgedisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_surfedgedisp_i(o,v);
}

void Controls::cb_surfdisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked() ) mwtb->datify(Surface);
else mwtb->undatify(Surface);
}
void Controls::cb_surfdisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_surfdisp_i(o,v);
}

void Controls::cb_voldisp_i(Fl_Menu_*, void* v) {
  if(((Fl_Menu_Item*)v)->checked() ) mwtb->datify(VolEle);
else mwtb->undatify(VolEle);
}
void Controls::cb_voldisp(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_voldisp_i(o,v);
}

void Controls::cb_ALL_i(Fl_Menu_*, void*) {
  mwtb->datify(All);
vertdisp->check();
cabledisp->check();
cnnxdisp->check();
surfedgedisp->check();
surfdisp->check();
voldisp->check();
}
void Controls::cb_ALL(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_ALL_i(o,v);
}

void Controls::cb_NONE_i(Fl_Menu_*, void*) {
  mwtb->undatify(All);
vertdisp->uncheck();
cabledisp->uncheck();
cnnxdisp->uncheck();
surfedgedisp->uncheck();
surfdisp->uncheck();
voldisp->uncheck();
}
void Controls::cb_NONE(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_NONE_i(o,v);
}

Fl_Menu_Item Controls::menu_datadest[] = {
 {"Vertices", 0,  (Fl_Callback*)Controls::cb_vertdisp, (void*)(vertdisp), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Cables", 0,  (Fl_Callback*)Controls::cb_cabledisp, (void*)(cabledisp), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Cnnx", 0,  (Fl_Callback*)Controls::cb_cnnxdisp, (void*)(cnnxdisp), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface edges", 0,  (Fl_Callback*)Controls::cb_surfedgedisp, (void*)(surfedgedisp), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surface Elements", 0,  (Fl_Callback*)Controls::cb_surfdisp, (void*)(surfdisp), 6, FL_NORMAL_LABEL, 0, 14, 0},
 {"Volume Elements", 0,  (Fl_Callback*)Controls::cb_voldisp, (void*)(voldisp), 2, FL_NORMAL_LABEL, 0, 14, 0},
 {"ALL", 0,  (Fl_Callback*)Controls::cb_ALL, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"NONE", 0,  (Fl_Callback*)Controls::cb_NONE, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Controls::vertdisp = Controls::menu_datadest + 0;
Fl_Menu_Item* Controls::cabledisp = Controls::menu_datadest + 1;
Fl_Menu_Item* Controls::cnnxdisp = Controls::menu_datadest + 2;
Fl_Menu_Item* Controls::surfedgedisp = Controls::menu_datadest + 3;
Fl_Menu_Item* Controls::surfdisp = Controls::menu_datadest + 4;
Fl_Menu_Item* Controls::voldisp = Controls::menu_datadest + 5;

void Controls::cb_draw_axes_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void Controls::cb_draw_axes(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_draw_axes_i(o,v);
}

void Controls::cb_voxeleColor_i(Fl_Button*, void*) {
  static colourChoice* cc=NULL;
cc=pickcolor(VolEle, "Voxele colour",cc);
}
void Controls::cb_voxeleColor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_voxeleColor_i(o,v);
}

void Controls::cb_dispAsSurf_i(Fl_Check_Button*, void*) {
  mwtb->dispmode(asSurface);
}
void Controls::cb_dispAsSurf(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_dispAsSurf_i(o,v);
}

void Controls::cb_dispAsVol_i(Fl_Check_Button*, void*) {
  mwtb->dispmode(asTetMesh);
}
void Controls::cb_dispAsVol(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_dispAsVol_i(o,v);
}

void Controls::cb_vertbut_i(Fl_Light_Button* o, void*) {
  bool *selreg = regselected();
mwtb->showobj(Vertex,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_vertbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_vertbut_i(o,v);
}

void Controls::cb_cabbut_i(Fl_Light_Button* o, void*) {
  bool *selreg = regselected();
mwtb->showobj(Cable,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_cabbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cabbut_i(o,v);
}

void Controls::cb_cnnxbut_i(Fl_Light_Button* o, void*) {
  bool* selreg=regselected();
mwtb->showobj(Cnnx,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_cnnxbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cnnxbut_i(o,v);
}

void Controls::cb_vertprop_i(Fl_Button*, void*) {
  if( !objprops[Vertex] )
  objprops[Vertex] = new ObjProps( mwtb, Vertex );
else {
 objprops[Vertex]->update();
}
objprops[Vertex]->win->show();
}
void Controls::cb_vertprop(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_vertprop_i(o,v);
}

void Controls::cb_connprop_i(Fl_Button*, void*) {
  if( !objprops[Cnnx] )
  objprops[Cnnx] = new ObjProps( mwtb, Cnnx );
else {
 objprops[Cnnx]->update();
} 
objprops[Cnnx]->win->show();
}
void Controls::cb_connprop(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_connprop_i(o,v);
}

void Controls::cb_visbut_i(Fl_Light_Button* o, void*) {
  bool *selreg=regselected();
mwtb->visibility(selreg, o->value());
delete[] selreg;
}
void Controls::cb_visbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_visbut_i(o,v);
}

void Controls::cb_select_i(Fl_Button*, void*) {
  reglist->check_all();
reglist->do_callback();
}
void Controls::cb_select(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_select_i(o,v);
}

void Controls::cb_reglist_i(Fl_Check_Browser*, void*) {
  if( objprops[Vertex] ) objprops[Vertex]->update();
if( objprops[Cnnx] )   objprops[Cnnx]->update();
if( objprops[Cable] )  objprops[Cable]->update();
}
void Controls::cb_reglist(Fl_Check_Browser* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_reglist_i(o,v);
}

void Controls::cb_invert_i(Fl_Button*, void*) {
  for( int i=0; i<=reglist->nitems(); i++ )
  reglist->checked( i, !reglist->checked(i) );
reglist->do_callback();
}
void Controls::cb_invert(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_invert_i(o,v);
}

void Controls::cb_cableprop_i(Fl_Button*, void*) {
  if( !objprops[Cable] )
  objprops[Cable] = new ObjProps( mwtb, Cable );
else {
 objprops[Cable]->update();
} 
objprops[Cable]->win->show();
}
void Controls::cb_cableprop(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cableprop_i(o,v);
}

void Controls::cb_tethi_i(MyValueInput* o, void*) {
  mwtb->highlight(VolEle,int((o->value())));
}
void Controls::cb_tethi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_tethi_i(o,v);
}

void Controls::cb_elehi_i(MyValueInput* o, void*) {
  mwtb->highlight(SurfEle,static_cast<int>(o->value()));
}
void Controls::cb_elehi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_elehi_i(o,v);
}

void Controls::cb_cabhi_i(MyValueInput* o, void*) {
  mwtb->highlight(Cable,static_cast<int>(o->value()));
}
void Controls::cb_cabhi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_cabhi_i(o,v);
}

void Controls::cb_verthi_i(MyValueInput* o, void*) {
  mwtb->highlight(Vertex,int(o->value()));
}
void Controls::cb_verthi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_verthi_i(o,v);
}

void Controls::cb_cnnxhi_i(MyValueInput* o, void*) {
  mwtb->highlight(Cnnx,static_cast<int>(o->value()));
}
void Controls::cb_cnnxhi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_cnnxhi_i(o,v);
}

void Controls::cb_hilighton_i(Fl_Light_Button* o, void*) {
  mwtb->set_hilight( static_cast<bool>(o->value()) );
}
void Controls::cb_hilighton(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_hilighton_i(o,v);
}

void Controls::cb_Filled_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(SurfEle,true);
}
void Controls::cb_Filled(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Filled_i(o,v);
}

void Controls::cb_Surf_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(SurfEle);
}
void Controls::cb_Surf(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Surf_i(o,v);
}

void Controls::cb_Vol_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(VolEle);
}
void Controls::cb_Vol(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vol_i(o,v);
}

void Controls::cb_Filled1_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(VolEle, 1 );
}
void Controls::cb_Filled1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Filled1_i(o,v);
}

void Controls::cb_6_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(Nothing);
}
void Controls::cb_6(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_6_i(o,v);
}

Fl_Menu_Item Controls::menu_attachtype[] = {
 {"Filled Surf eles", 0,  (Fl_Callback*)Controls::cb_Filled, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surf ele outline", 0,  (Fl_Callback*)Controls::cb_Surf, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Vol eles", 0,  (Fl_Callback*)Controls::cb_Vol, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Filled Vol eles", 0,  (Fl_Callback*)Controls::cb_Filled1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"-", 0,  (Fl_Callback*)Controls::cb_6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_current_i(Fl_Button*, void*) {
  highlight_region();
}
void Controls::cb_current(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_current_i(o,v);
}

void Controls::cb_7_i(Fl_Button*, void*) {
  mwtb->hiliteinfo();
}
void Controls::cb_7(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_7_i(o,v);
}

void Controls::cb_Vol1_i(Fl_Menu_*, void*) {
  mwtb->solid_hitet(false);
mwtb->redraw();
}
void Controls::cb_Vol1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vol1_i(o,v);
}

void Controls::cb_Solid_i(Fl_Menu_*, void*) {
  mwtb->solid_hitet(true);
mwtb->redraw();
}
void Controls::cb_Solid(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Solid_i(o,v);
}

Fl_Menu_Item Controls::menu_hitettype[] = {
 {"Vol Ele", 0,  (Fl_Callback*)Controls::cb_Vol1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Solid Vol Ele", 0,  (Fl_Callback*)Controls::cb_Solid, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_pickvert_i(Fl_Button* o, void*) {
  o->color(128);
mwtb->select_vertex();
}
void Controls::cb_pickvert(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_pickvert_i(o,v);
}

void Controls::cb_Time_i(Fl_Button*, void*) {
  mwtb->timeplot();
}
void Controls::cb_Time(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Time_i(o,v);
}

void Controls::cb_lightx_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lightx(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lightx_i(o,v);
}

void Controls::cb_lighty_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lighty(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lighty_i(o,v);
}

void Controls::cb_lightz_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lightz(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lightz_i(o,v);
}

void Controls::cb_reset_i(Fl_Button*, void*) {
  lightx->value(0);
lighty->value(0.);
lightz->value(1);
mwtb->redraw();
}
void Controls::cb_reset(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

void Controls::cb_showLightDir_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void Controls::cb_showLightDir(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_showLightDir_i(o,v);
}

void Controls::cb_zero_i(Fl_Button*, void*) {
  lightx->value(0);
mwtb->redraw();
}
void Controls::cb_zero(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero_i(o,v);
}

void Controls::cb_zero1_i(Fl_Button*, void*) {
  lighty->value(0);
mwtb->redraw();
}
void Controls::cb_zero1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero1_i(o,v);
}

void Controls::cb_zero2_i(Fl_Button*, void*) {
  lightz->value(0);
mwtb->redraw();
}
void Controls::cb_zero2(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero2_i(o,v);
}

void Controls::cb_illBut_i(Fl_Light_Button* o, void*) {
  mwtb->lights((bool)o->value());
}
void Controls::cb_illBut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_illBut_i(o,v);
}

void Controls::cb_ambientslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_ambientslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_ambientslide_i(o,v);
}

void Controls::cb_facetshadBut_i(Fl_Light_Button* o, void*) {
  mwtb->facetshade( (bool)(o->value()) );
}
void Controls::cb_facetshadBut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_facetshadBut_i(o,v);
}

void Controls::cb_fixed_i(Fl_Light_Button* o, void*) {
  mwtb->headlamp(o->value());
}
void Controls::cb_fixed(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_fixed_i(o,v);
}

void Controls::cb_specularslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_specularslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_specularslide_i(o,v);
}

void Controls::cb_diffuseslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_diffuseslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_diffuseslide_i(o,v);
}

void Controls::cb_backintensityslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_backintensityslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_backintensityslide_i(o,v);
}

void Controls::cb_surfvisbut_i(Fl_Light_Button* o, void*) {
  vector<int>lst;
surfselected(lst);
mwtb->surfVis(lst,static_cast<bool>(o->value()));
}
void Controls::cb_surfvisbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surfvisbut_i(o,v);
}

void Controls::cb_surfoutlinebut_i(Fl_Light_Button* o, void*) {
  vector<int>lst;
surfselected(lst);
mwtb->surfOutline(lst,static_cast<bool>(o->value()));
}
void Controls::cb_surfoutlinebut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surfoutlinebut_i(o,v);
}

void Controls::cb_surffillbut_i(Fl_Light_Button* o, void*) {
  vector<int> lst;
surfselected(lst);
mwtb->surfFilled(lst,static_cast<bool>(o->value()));
}
void Controls::cb_surffillbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surffillbut_i(o,v);
}

void Controls::cb_Outline_i(Fl_Button*, void*) {
  static colourChoice *cc=NULL;
cc=pick_surf_color( SurfEle, "Outline Colour",cc );
}
void Controls::cb_Outline(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Outline_i(o,v);
}

void Controls::cb_Fill_i(Fl_Button*, void*) {
  static colourChoice *cc=NULL;
cc=pick_surf_color( Surface, "Surface colour",cc );
}
void Controls::cb_Fill(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Fill_i(o,v);
}

void Controls::cb_all_i(Fl_Button*, void*) {
  surflist->check_all();
update_surfGUI(0);
}
void Controls::cb_all(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_all_i(o,v);
}

void Controls::cb_invert1_i(Fl_Button*, void*) {
  bool done=false;

for( int i=1; i<=surflist->nitems(); i++ ) {
    if( !done && !surflist->checked(i) ) {
      done = true;
      update_surfGUI(i-1);
    }
    surflist->checked(i, !surflist->checked(i));
};
}
void Controls::cb_invert1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_invert1_i(o,v);
}

void Controls::cb_shown_i(Fl_Button*, void*) {
  bool done=false;

for( int i=1; i<=surflist->nitems(); i++ ) {
    if( !done && mwtb->model->surface(i-1)->visible() ) {
      done = true;
      update_surfGUI(i-1);
    }
    surflist->checked(i,mwtb->model->surface(i-1)->visible());
};
}
void Controls::cb_shown(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_shown_i(o,v);
}

void Controls::cb_really_i(Fl_Menu_*, void*) {
  vector<int> lst;
surfselected(lst);
int hsurf;
int lnum = mwtb->model->localElemnum( elehi->value(), hsurf );
for( int i=lst.size()-1; i>=0; i-- ){
  if( lst[i]==hsurf )
    lnum = hsurf = 0;
  if( lst[i]<hsurf )
    hsurf--;
  mwtb->model->surfKill( lst[i] );
}
elehi->value( mwtb->model->globalElemnum(hsurf,lnum) );
elehi->do_callback();
refresh_surflist();
if( !mwtb->model->number(SurfEle) )
  elehi->deactivate();
}
void Controls::cb_really(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_really_i(o,v);
}

Fl_Menu_Item Controls::menu_Delete[] = {
 {"really", 0,  (Fl_Callback*)Controls::cb_really, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_Rename_i(Fl_Button*, void*) {
  string oldlabel;
int sel;

for( int i=0; i<surflist->nitems(); i++ )
  if(surflist->checked(i+1)) {
    oldlabel = mwtb->model->surface(i)->label();
    sel = i;
    break;
  }

const char* surfname=fl_input("Enter surface name",oldlabel.c_str());
if( !surfname ) return;

mwtb->model->surface(sel)->label(surfname);
  
refresh_surflist(0);

surflist->set_checked(sel+1);

write_surfaces(0);
}
void Controls::cb_Rename(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Rename_i(o,v);
}

void Controls::cb_veconbut_i(Fl_Light_Button* o, void*) {
  mwtb->vecdata->display(o->value());
mwtb->redraw();
}
void Controls::cb_veconbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veconbut_i(o,v);
}

void Controls::cb_veclength_i(Fl_Roller* o, void*) {
  mwtb->vecdata->length(o->value());
mwtb->redraw();
}
void Controls::cb_veclength(Fl_Roller* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veclength_i(o,v);
}

void Controls::cb_veccolor_i(Fl_Button*, void*) {
  mwtb->vecdata->colourize();
mwtb->redraw();
}
void Controls::cb_veccolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veccolor_i(o,v);
}

void Controls::cb_veclenmag_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(Vector);
mwtb->redraw();
}
void Controls::cb_veclenmag(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veclenmag_i(o,v);
}

void Controls::cb_veclenscalar_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(Scalar);
mwtb->redraw();
}
void Controls::cb_veclenscalar(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veclenscalar_i(o,v);
}

void Controls::cb_veclenfix_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(FixedVCdata);
mwtb->redraw();
}
void Controls::cb_veclenfix(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veclenfix_i(o,v);
}

Fl_Menu_Item Controls::menu_veclengthdeterm[] = {
 {"Vector mag", 0,  (Fl_Callback*)Controls::cb_veclenmag, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalar", 0,  (Fl_Callback*)Controls::cb_veclenscalar, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fixed", 0,  (Fl_Callback*)Controls::cb_veclenfix, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Controls::veclenmag = Controls::menu_veclengthdeterm + 0;
Fl_Menu_Item* Controls::veclenscalar = Controls::menu_veclengthdeterm + 1;
Fl_Menu_Item* Controls::veclenfix = Controls::menu_veclengthdeterm + 2;

void Controls::cb_veccolmag_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(Vector);
veccolgroup->activate();
veccolor->deactivate();
veccolmin->value(mwtb->vecdata->cs->min());
veccolmax->value(mwtb->vecdata->cs->max());
mwtb->redraw();
}
void Controls::cb_veccolmag(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veccolmag_i(o,v);
}

void Controls::cb_veccolscalar_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(Scalar);
veccolgroup->activate();
veccolor->deactivate();
veccolmin->value(mwtb->vecdata->cs->min());
veccolmax->value(mwtb->vecdata->cs->max());
mwtb->redraw();
}
void Controls::cb_veccolscalar(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veccolscalar_i(o,v);
}

void Controls::cb_veccolfix_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(FixedVCdata);
veccolgroup->deactivate();
veccolor->activate();
mwtb->redraw();
}
void Controls::cb_veccolfix(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veccolfix_i(o,v);
}

Fl_Menu_Item Controls::menu_veccoldeterm[] = {
 {"Vector mag", 0,  (Fl_Callback*)Controls::cb_veccolmag, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalar", 0,  (Fl_Callback*)Controls::cb_veccolscalar, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fixed", 0,  (Fl_Callback*)Controls::cb_veccolfix, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Controls::veccolmag = Controls::menu_veccoldeterm + 0;
Fl_Menu_Item* Controls::veccolscalar = Controls::menu_veccoldeterm + 1;
Fl_Menu_Item* Controls::veccolfix = Controls::menu_veccoldeterm + 2;

void Controls::cb_vecstride_i(Fl_Value_Input* o, void*) {
  mwtb->vecdata->stride(o->value());
int stride = int(o->value());
vecstart->maximum(stride-1);
if( vecstart->value() >= stride )
  vecstart->value(int(vecstart->value())%stride);
mwtb->redraw();
}
void Controls::cb_vecstride(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_vecstride_i(o,v);
}

void Controls::cb_vecstoch_i(Fl_Check_Button* o, void*) {
  mwtb->vecdata->stoch_stride(o->value());
mwtb->redraw();
}
void Controls::cb_vecstoch(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_vecstoch_i(o,v);
}

void Controls::cb_vecheads_i(Fl_Check_Button* o, void*) {
  mwtb->vecdata->heads(o->value());
mwtb->redraw();
}
void Controls::cb_vecheads(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_vecheads_i(o,v);
}

void Controls::cb_vecstart_i(MyValueInput* o, void*) {
  mwtb->vecdata->start(o->value());
mwtb->redraw();
}
void Controls::cb_vecstart(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_vecstart_i(o,v);
}

void Controls::cb_veccolmin_i(Fl_Value_Input* o, void*) {
  mwtb->vecdata->cs->calibrate(o->value(),mwtb->vecdata->cs->max());
mwtb->redraw();
}
void Controls::cb_veccolmin(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_veccolmin_i(o,v);
}

void Controls::cb_veccolmax_i(Fl_Value_Input* o, void*) {
  mwtb->vecdata->cs->calibrate(mwtb->vecdata->cs->min(),o->value());
mwtb->redraw();
}
void Controls::cb_veccolmax(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_veccolmax_i(o,v);
}

void Controls::cb_8_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_RAINBOW);
mwtb->redraw();
}
void Controls::cb_8(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_8_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_rainbow[] = {
"70 15 70 1",
"  c #0207ff",
". c #0f00ff",
"X c #001bff",
"o c #0032ff",
"O c #2500ff",
"+ c #3b00ff",
"@ c #0046ff",
"# c #005cff",
"$ c #0072ff",
"% c #5000ff",
"& c #6600ff",
"* c #7b00ff",
"= c #03ff02",
"- c #00ff12",
"; c #16ff00",
": c #00ff2b",
"> c #00ff3f",
", c #2dff00",
"< c #00ff55",
"1 c #00ff6b",
"2 c #00ff7f",
"3 c #42ff00",
"4 c #58ff00",
"5 c #6dff00",
"6 c #7eff00",
"7 c #0083ff",
"8 c #0097ff",
"9 c #00adff",
"0 c #00ff91",
"q c #00ffa5",
"w c #00ffbb",
"e c #00c2ff",
"r c #00d8ff",
"t c #00ffd0",
"y c #00eeff",
"u c #00ffe6",
"i c #00fcf9",
"p c #ff0603",
"a c #ff0012",
"s c #ff1800",
"d c #ff0027",
"f c #ff003d",
"g c #ff2f00",
"h c #ff0053",
"j c #ff0067",
"k c #ff0079",
"l c #ff4400",
"z c #ff5a00",
"x c #ff7000",
"c c #8c00ff",
"v c #9f00ff",
"b c #b600ff",
"n c #ff008d",
"m c #ff00a3",
"M c #ff00b6",
"N c #cd00ff",
"B c #d400ff",
"V c #ff00d1",
"C c #92ff00",
"Z c #a8ff00",
"A c #bdff00",
"S c #ff8200",
"D c #ff9400",
"F c #ffaa00",
"G c #d3ff00",
"H c #ffc000",
"J c #ffd500",
"K c #e8ff00",
"L c #ffeb00",
"P c #fafb00",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV"
};
static Fl_Pixmap image_rainbow(idata_rainbow);

void Controls::cb_9_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_BL_RAINBOW);
mwtb->redraw();
}
void Controls::cb_9(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_9_i(o,v);
}

static const char *idata_blrainbow[] = {
"70 15 70 1",
"  c Gray0",
". c #00000d",
"X c #000025",
"o c #000039",
"O c #000054",
"+ c #000069",
"@ c #00007e",
"# c #000092",
"$ c #0000a7",
"% c #0000bc",
"& c #0000d1",
"* c #0000e7",
"= c #0005fd",
"- c #0016ff",
"; c #002cff",
": c #0041ff",
"> c #0056ff",
", c #006bff",
"< c #007eff",
"1 c #00ff07",
"2 c #0bff00",
"3 c #00ff24",
"4 c #00ff39",
"5 c #21ff00",
"6 c #36ff00",
"7 c #00ff4e",
"8 c #00ff63",
"9 c #00ff78",
"0 c #4bff00",
"q c #60ff00",
"w c #75ff00",
"e c #0097ff",
"r c #00b0ff",
"t c #00ff8c",
"y c #00ffa1",
"u c #00ffb7",
"i c #00c4ff",
"p c #00d9ff",
"a c #00ffd2",
"s c #00efff",
"d c #00ffe6",
"f c #00fcf8",
"g c #ff0905",
"h c #ff1900",
"j c #ff1516",
"k c #ff2f00",
"l c #ff2b2b",
"z c #ff4400",
"x c #ff5900",
"c c #ff6e00",
"v c #ff4040",
"b c #ff5555",
"n c #ff6a6a",
"m c #ff7e7e",
"M c #89ff00",
"N c #9fff00",
"B c #baff00",
"V c #ff8300",
"C c #ff9600",
"Z c #ffaf00",
"A c #ceff00",
"S c #ffc800",
"D c #ffdc00",
"F c #e3ff00",
"G c #f6fd00",
"H c #fff200",
"J c #ff9393",
"K c #ffaeae",
"L c #ffc2c2",
"P c #ffdada",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP"
};
static Fl_Pixmap image_blrainbow(idata_blrainbow);

void Controls::cb_a_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_HOT);
mwtb->redraw();
}
void Controls::cb_a(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_i(o,v);
}

static const char *idata_hot[] = {
"70 15 76 1",
"  c #1c0301",
". c #1d0302",
"X c #1d0402",
"o c #250000",
"O c #300000",
"+ c #3a0000",
"@ c #430000",
"# c #4e0000",
"$ c #590000",
"% c #5b3616",
"& c #640000",
"* c #6f0000",
"= c #790000",
"- c #70441e",
"; c #72451f",
": c #73461f",
"> c #734720",
", c #830000",
"< c #8e0000",
"1 c #990000",
"2 c #a40000",
"3 c #af0000",
"4 c #ba0000",
"5 c #c20000",
"6 c #cd0000",
"7 c #d80000",
"8 c #e20000",
"9 c #ed0000",
"0 c #f80000",
"q c #fe0500",
"w c #ff0f00",
"e c #ff1a00",
"r c #ff2400",
"t c #ff3000",
"y c #ff3900",
"u c #ff4200",
"i c #ff4d00",
"p c #ff5800",
"a c #ff6300",
"s c #ff6e00",
"d c #ff7800",
"f c #ff8300",
"g c #ff8d00",
"h c #ff9800",
"j c #ffa300",
"k c #ffae00",
"l c #ffb800",
"z c #ffc100",
"x c #ffcc00",
"c c #ffd700",
"v c #ffe200",
"b c #ffed00",
"n c #fff700",
"m c #fffe04",
"M c #ffff0e",
"N c #ffff19",
"B c #ffff24",
"V c #ffff2e",
"C c #ffff3a",
"Z c #ffff42",
"A c #ffff4d",
"S c #ffff57",
"D c #ffff62",
"F c #ffff6d",
"G c #ffff78",
"H c #ffff82",
"J c #ffff8d",
"K c #ffff97",
"L c #ffffa2",
"P c #ffffad",
"I c #ffffb7",
"U c #ffffc0",
"Y c #ffffcb",
"T c #ffffd6",
"R c LightYellow",
"E c #ffffed",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
">XoO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
"%.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":XoO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE"
};
static Fl_Pixmap image_hot(idata_hot);

void Controls::cb_b_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_COLD_HOT);
mwtb->redraw();
}
void Controls::cb_b(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_i(o,v);
}

static const char *idata_coldhot[] = {
"70 15 70 1",
"  c #0f0fff",
". c #1414ff",
"X c #1c1cff",
"o c #2323ff",
"O c #2929ff",
"+ c #3030ff",
"@ c #3737ff",
"# c #3e3eff",
"$ c #4545ff",
"% c #4d4dff",
"& c #5454ff",
"* c #5b5bff",
"= c #6262ff",
"- c #6969ff",
"; c #7070ff",
": c #7878ff",
"> c #7f7fff",
", c #ff0404",
"< c #ff0c0c",
"1 c #ff1313",
"2 c #ff1a1a",
"3 c #ff2222",
"4 c #ff2828",
"5 c #ff2e2e",
"6 c #ff3535",
"7 c #ff3d3d",
"8 c #ff4444",
"9 c #ff4b4b",
"0 c #ff5252",
"q c #ff5959",
"w c #ff6060",
"e c #ff6868",
"r c #ff6f6f",
"t c #ff7676",
"y c #ff7c7c",
"u c #8484ff",
"i c #8b8bff",
"p c #9292ff",
"a c #9999ff",
"s c #a0a0ff",
"d c #a7a7ff",
"f c #aeaeff",
"g c #b6b6ff",
"h c #bdbdff",
"j c #ff8282",
"k c #ff8989",
"l c #ff9090",
"z c #ff9797",
"x c #ff9e9e",
"c c #ffa6a6",
"v c #ffadad",
"b c #ffb4b4",
"n c #ffbbbb",
"m c #c4c4ff",
"M c #cbcbff",
"N c #d1d1ff",
"B c #d8d8ff",
"V c #dfdfff",
"C c #ffc2c2",
"Z c #ffcaca",
"A c #ffd0d0",
"S c #ffd6d6",
"D c #ffdddd",
"F c #e6e6ff",
"G c #ededff",
"H c #ffe5e5",
"J c #ffecec",
"K c #f5f5ff",
"L c #fff3f3",
"P c #fcf8fb",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,"
};
static Fl_Pixmap image_coldhot(idata_coldhot);

void Controls::cb_c_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_GREY);
mwtb->redraw();
}
void Controls::cb_c(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_i(o,v);
}

static const char *idata_blwhite[] = {
"70 15 88 1",
"  c #06080a",
". c #06080b",
"X c #06090b",
"o c #07090b",
"O c #10100f",
"+ c #1a130b",
"@ c #1c140b",
"# c #1e150c",
"$ c #1f150c",
"% c #1f160d",
"& c #131313",
"* c #161616",
"= c #191919",
"- c #1d1d1d",
"; c Gray13",
": c Gray14",
"> c #282828",
", c Gray17",
"< c #2f2f2f",
"1 c Gray20",
"2 c Gray21",
"3 c #3a3a3a",
"4 c #3e3e3e",
"5 c #414141",
"6 c #444444",
"7 c #484848",
"8 c #4b4b4b",
"9 c Gray31",
"0 c #535353",
"q c #565656",
"w c #5a5a5a",
"e c #5d5d5d",
"r c Gray38",
"t c #656565",
"y c #686868",
"u c Gray42",
"i c #6f6f6f",
"p c #727272",
"a c #767676",
"s c Gray48",
"d c Gray49",
"f c #9c5f23",
"g c #a2601e",
"h c #b16a23",
"j c #b26923",
"k c #b26a23",
"l c #b16b24",
"z c #b36c21",
"x c #b36c23",
"c c #b36c24",
"v c #b56c21",
"b c #b56f26",
"n c #b66e24",
"m c #818181",
"M c #838383",
"N c Gray53",
"B c #8b8b8b",
"V c #8e8e8e",
"C c #929292",
"Z c #959595",
"A c #989898",
"S c Gray61",
"D c #a0a0a0",
"F c Gray64",
"G c #a7a7a7",
"H c #aaaaaa",
"J c #aeaeae",
"K c #b2b2b2",
"L c Gray71",
"P c #b9b9b9",
"I c Gray74",
"U c #c0c0c0",
"Y c #c3c3c3",
"T c Gray78",
"R c #cacaca",
"E c #cecece",
"W c #d2d2d2",
"Q c #d5d5d5",
"! c Gray85",
"~ c gainsboro",
"^ c Gray88",
"/ c #e4e4e4",
"( c #e7e7e7",
") c #eaeaea",
"_ c #eeeeee",
"` c #f1f1f1",
"\' c Gray96",
"] c #f9f9f9",
"z$.O&*=-;:>,11134568890qwertyyipasdmmNBVCZASDDFHJKLPIUTTREWQ!~^/))_`\']",
"v$.O&*=-;:>,,1134568890qwertyiipasdmmBBVCZASDDHHJKLPIUUTREWQ!~^//)_`\']",
"v$.O&*=-;:>>11334558890qwertyyipasdmmNBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']",
"n$.O&*=-;:>>,1134566890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"c$.O&*=-;:>,11134568890qwertyyipasdmNNBVCZASDFHHJKLPIUTTREWQ!~^//)_`\']",
"k$.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"k$.O&*=-;:>,11334558890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^//)_`\']",
"z$.O&*=-;:>,,1134568890qwertyiipasdmmNBVCZASDFHHJKLPIUURREWQ!~^//)_`\']",
"g@.O&*=-;:>,11134568890qwertyyipasdmmNBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']",
"f+.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"n$.O&*=-;:>>11334558890qwertyiipasdmmBBVCZASDFFHJKLPIUTTREWQ!~^//)_`\']",
"l$.O&*=-;:>>,1134566890qwertyyipasdmmNBVCZASDDHHJKLPIUUTREWQ!~^//)_`\']",
"k$.O&*=-;:>,11134568890qwertyiipasdmmNBVCZASDDHHJKLPIUUTREWQ!~^/))_`\']",
"k$.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDDFHJKLPIUURREWQ!~^//)_`\']",
"c$.O**=-;:>,,1334568890qwertyyipasdmmBBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']"
};
static Fl_Pixmap image_blwhite(idata_blwhite);

void Controls::cb_d_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_CG);
mwtb->redraw();
}
void Controls::cb_d(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_d_i(o,v);
}

static const char *idata_cg[] = {
"70 15 164 2",
"  \tc None",
". \tc #0000FF",
"+ \tc #000BFF",
"@ \tc #0019FF",
"# \tc #0029FF",
"$ \tc #0037FF",
"% \tc #0045FF",
"& \tc #0055FF",
"* \tc #0063FF",
"= \tc #0072FF",
"- \tc #0081FF",
"; \tc #008FFF",
"> \tc #009EFF",
", \tc #00ACFF",
"\' \tc #00BBFF",
") \tc #00CAFF",
"! \tc #00D9FF",
"~ \tc #00E7FF",
"{ \tc #00F7FF",
"] \tc #00FFF9",
"^ \tc #00FFEA",
"/ \tc #00FFDB",
"( \tc #00FFCD",
"_ \tc #00FFBF",
": \tc #00FFB0",
"< \tc #00FFA1",
"[ \tc #00FF92",
"} \tc #00FF83",
"| \tc #00FF75",
"1 \tc #00FF66",
"2 \tc #00FF58",
"3 \tc #00FF49",
"4 \tc #00FF3A",
"5 \tc #00FF2B",
"6 \tc #00FF1C",
"7 \tc #00FF0E",
"8 \tc #01FF00",
"9 \tc #0FFF00",
"0 \tc #1FFF00",
"a \tc #2CFF00",
"b \tc #3BFF00",
"c \tc #4BFF00",
"d \tc #59FF00",
"e \tc #68FF00",
"f \tc #77FF00",
"g \tc #86FF00",
"h \tc #93FF00",
"i \tc #A2FF00",
"j \tc #B1FF00",
"k \tc #C0FF00",
"l \tc #CFFF00",
"m \tc #DEFF00",
"n \tc #ECFF00",
"o \tc #FAFF00",
"p \tc #FFF400",
"q \tc #FFE600",
"r \tc #FFD700",
"s \tc #FFC800",
"t \tc #FFB900",
"u \tc #FFAB00",
"v \tc #FF9D00",
"w \tc #FF8E00",
"x \tc #FF7F00",
"y \tc #FF7000",
"z \tc #FF6200",
"A \tc #FF5200",
"B \tc #FF4500",
"C \tc #FF3600",
"D \tc #FF2700",
"E \tc #FF1800",
"F \tc #FF0900",
"G \tc #001AFF",
"H \tc #0046FF",
"I \tc #0054FF",
"J \tc #0064FF",
"K \tc #0080FF",
"L \tc #00ADFF",
"M \tc #00F6FF",
"N \tc #00FFDC",
"O \tc #00FF93",
"P \tc #00FF84",
"Q \tc #00FF57",
"R \tc #00FF48",
"S \tc #00FF00",
"T \tc #10FF00",
"U \tc #1EFF00",
"V \tc #2DFF00",
"W \tc #3CFF00",
"X \tc #4AFF00",
"Y \tc #5AFF00",
"Z \tc #67FF00",
"` \tc #76FF00",
" .\tc #85FF00",
"..\tc #94FF00",
"+.\tc #CEFF00",
"@.\tc #FBFF00",
"#.\tc #FFF500",
"$.\tc #FFBA00",
"%.\tc #FF9C00",
"&.\tc #FF6100",
"*.\tc #FF5300",
"=.\tc #FF4400",
"-.\tc #0090FF",
";.\tc #00D8FF",
">.\tc #00FFFA",
",.\tc #00FFBE",
"\'.\tc #00FF74",
").\tc #FFE500",
"!.\tc #FF3500",
"~.\tc #00BCFF",
"{.\tc #00FFAF",
"].\tc #00FF1D",
"^.\tc #A3FF00",
"/.\tc #DDFF00",
"(.\tc #FF8D00",
"_.\tc #FF7100",
":.\tc #FF2600",
"<.\tc #FF0A00",
"[.\tc #0028FF",
"}.\tc #0038FF",
"|.\tc #009FFF",
"1.\tc #00E8FF",
"2.\tc #B2FF00",
"3.\tc #FF7E00",
"4.\tc #00FFEB",
"5.\tc #C1FF00",
"6.\tc #EDFF00",
"7.\tc #00FFCC",
"8.\tc #2EFF00",
"9.\tc #00FF65",
"0.\tc #FCFF00",
"a.\tc #000CFF",
"b.\tc #0073FF",
"c.\tc #00CBFF",
"d.\tc #FFD600",
"e.\tc #FFC900",
"f.\tc #FFAA00",
"g.\tc #FF4300",
"h.\tc #00DAFF",
"i.\tc #00FFF8",
"j.\tc #00FFA0",
"k.\tc #00FF2A",
"l.\tc #00FF0D",
"m.\tc #02FF00",
"n.\tc #0047FF",
"o.\tc #00FF56",
"p.\tc #00FF39",
"q.\tc #FF9B00",
"r.\tc #FF6F00",
"s.\tc #00AEFF",
"t.\tc #D0FF00",
"u.\tc #FF1700",
"v.\tc #00FFE9",
"w.\tc #00FFBD",
"x.\tc #00FF91",
"y.\tc #69FF00",
"z.\tc #95FF00",
"A.\tc #FFF300",
"B.\tc #FFC700",
"C.\tc #FF0800",
"D.\tc #0082FF",
"E.\tc #00E9FF",
"F.\tc #3DFF00",
"G.\tc #4CFF00",
". + @ # $ % & * = - ; > , \' ) ! ~ { ] ^ / ( _ : < [ } | 1 2 3 4 5 6 7 8 9 0 \
a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F ",
". + G # $ H I J = K ; > L \' ) ! ~ M ] ^ N ( _ : < O P | 1 Q R 4 5 6 7 S T U \
V W X Y Z `  ...i j k +.m n @.#.q r s $.u %.w x y &.*.=.C D E F ",
". + G # $ H & * = K -.> L \' ) ;.~ M >.^ N ( ,.: < [ P \'.1 Q R 4 5 6 7 8 T U\
 V W X d Z f  ...i j k +.m n @.p ).r s $.u v w x y &.*.=.!.D E F ",
". + G # $ H I * = - -.> L ~.) ! ~ M ] ^ / ( ,.{.< O P | 1 Q R 4 5 ].7 8 T 0 V\
 W c d Z f g ..^.j k l /.n @.p ).r s $.u v (.x _.&.A =.C :.E <.",
". + G [.}.H & * = - ; |.L ~.) ! 1.M ] ^ N ( ,.{.< [ P | 1 Q 3 4 5 ].7 8 9 U V\
 W X d e ` g ..^.2.k l m n @.p ).r s t u %.(.3.y z *.=.!.:.E <.",
". + G # $ H & J = K ; |., \' ) ! 1.M ] 4.N ( ,.{.< [ } \'.1 Q 3 4 5 6 7 8 T U\
 V W c d e `  ...^.2.5.l m 6.@.p q r s t u %.(.x y &.*.=.C D E F ",
". + G [.}.H & J = - ; > L ~.) ! 1.M ] ^ / 7.,.: < [ P | 1 2 R 4 5 ].7 8 T U 8\
.W X Y e `  ...^.2.5.l m n @.#.q r s $.u %.(.3.y z A =.C D E F ",
". + G # $ H & * = K -.> L ~.) ! 1.M ] ^ / ( ,.: < [ } \'.9.Q R 4 5 6 7 8 T U \
V W c Y e f g ..^.j k l /.6.0.p ).r s t u %.(.x y &.*.=.!.:.E F ",
". a.G [.$ H & J b.- ; > L \' c.! ~ { ] ^ / ( ,.{.< [ } \'.9.Q R 4 5 6 7 8 T 0\
 8.W c Y e f g ..^.2.k l m n @.p ).d.e.$.f.%.(.x y z *.g.!.:.E F ",
". + G # $ H & * = - -.> L ~.) h.1.M i.^ N 7.,.{.j.[ } \'.1 Q 3 4 k.6 l.m.T 0 \
V W c d e ` g ..^.2.5.l m n @.p q d.s t u %.(.3.y &.A =.!.:.E F ",
". + G # $ n.& J b.- -.> L ~.) h.1.{ i.^ N ( ,.{.j.[ } | 9.o.R p.5 6 l.8 T U V\
 W c d e f g ..^.2.k l m 6.0.p ).r s t u q.(.3.r.&.A g.!.:.E F ",
". + G # }.H & J = - -.> s.~.c.! 1.{ i.^ / 7.,.{.< [ } | 9.Q R p.k.6 7 m.T U V\
 W c d e f g ..^.2.5.t.m n @.p ).d.s $.u %.(.3.y &.A g.!.:.u.F ",
". + G # }.H & J = - -.> L ~.c.! 1.{ i.v./ 7.w.{.< x.} \'.1 o.R p.5 6 l.m.T 0 \
8.W c Y y.f  ...^.2.5.l m n @.p ).d.s t u %.(.3.y &.A g.!.:.u.F ",
". + G # $ n.& J = - -.> L ~.) ! 1.M ] ^ / ( ,.{.j.x.} \'.9.o.R p.k.6 7 m.T 0 \
8.W c d y.f g z.^.2.k l m 6.0.A.).d.B.t f.%.(.3.y &.A g.!.:.u.C.",
". a.G # }.H & J b.D.-.> s.~.c.! E.{ ] ^ / ( w.{.j.[ } \'.9.Q R 4 k.6 l.8 T 0 \
8.F.G.Y e f g z.^.2.5.l m n 0.p ).r s t u %.(.x r.&.A g.!.:.u.F "
};
static Fl_Pixmap image_cg(idata_cg);

void Controls::cb_e_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_MATLAB);
mwtb->redraw();
}
void Controls::cb_e(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_e_i(o,v);
}

static const char *idata_matlab[] = {
"70 15 177 2",
"  \tc #800000",
". \tc #8F0000",
"+ \tc #9D0000",
"@ \tc #AC0000",
"# \tc #BB0000",
"$ \tc #C90000",
"% \tc #D80000",
"& \tc #E70000",
"* \tc #F60000",
"= \tc #FF0500",
"- \tc #FF1400",
"; \tc #FF2300",
"> \tc #FF3200",
", \tc #FF4100",
"\' \tc #FF4F00",
") \tc #FF5E00",
"! \tc #FF6D00",
"~ \tc #FF7B00",
"{ \tc #FF8B00",
"] \tc #FF9900",
"^ \tc #FFA800",
"/ \tc #FFB600",
"( \tc #FFC500",
"_ \tc #FFD400",
": \tc #FFE200",
"< \tc #FFF100",
"[ \tc #FFFF00",
"} \tc #F0FF10",
"| \tc #E1FF1E",
"1 \tc #D2FF2D",
"2 \tc #C3FF3C",
"3 \tc #B5FF4B",
"4 \tc #A6FF59",
"5 \tc #97FF68",
"6 \tc #89FF76",
"7 \tc #7AFF85",
"8 \tc #6BFF94",
"9 \tc #5CFFA2",
"0 \tc #4DFFB1",
"a \tc #3EFFC0",
"b \tc #30FFCF",
"c \tc #22FFDD",
"d \tc #13FFEC",
"e \tc #04FFFB",
"f \tc #00F4FF",
"g \tc #00E6FF",
"h \tc #00D7FF",
"i \tc #00C8FF",
"j \tc #00BAFF",
"k \tc #00ABFF",
"l \tc #009CFF",
"m \tc #008EFF",
"n \tc #007FFF",
"o \tc #0071FF",
"p \tc #0061FF",
"q \tc #0053FF",
"r \tc #0044FF",
"s \tc #0036FF",
"t \tc #0027FF",
"u \tc #0017FF",
"v \tc #0009FF",
"w \tc #0000F9",
"x \tc #0000EA",
"y \tc #0000DC",
"z \tc #0000CD",
"A \tc #0000BE",
"B \tc #0000B0",
"C \tc #0000A1",
"D \tc #000093",
"E \tc #000084",
"F \tc #F50000",
"G \tc #FF3100",
"H \tc #FF4000",
"I \tc #FF5000",
"J \tc #FF8A00",
"K \tc #FFA700",
"L \tc #FFD300",
"M \tc #FEFF01",
"N \tc #F0FF0F",
"O \tc #D2FF2C",
"P \tc #C4FF3C",
"Q \tc #89FF77",
"R \tc #5CFFA3",
"S \tc #4EFFB1",
"T \tc #3FFFC0",
"U \tc #21FFDE",
"V \tc #12FFEC",
"W \tc #00F5FF",
"X \tc #0070FF",
"Y \tc #0035FF",
"Z \tc #0018FF",
"` \tc #0000BF",
" .\tc #0000AF",
"..\tc #AD0000",
"+.\tc #CA0000",
"@.\tc #E60000",
"#.\tc #FF2200",
"$.\tc #FF7C00",
"%.\tc #FFB700",
"&.\tc #FFE300",
"*.\tc #FFF000",
"=.\tc #FFFF01",
"-.\tc #EFFF0F",
";.\tc #B4FF4A",
">.\tc #98FF67",
",.\tc #30FFCE",
"\'.\tc #22FFDE",
").\tc #04FFFA",
"!.\tc #00C9FF",
"~.\tc #00ACFF",
"{.\tc #0026FF",
"].\tc #0008FF",
"^.\tc #000092",
"/.\tc #000083",
"(.\tc #810000",
"_.\tc #FEFF00",
":.\tc #D3FF2D",
"<.\tc #B5FF4A",
"[.\tc #88FF76",
"}.\tc #4EFFB2",
"|.\tc #21FFDD",
"1.\tc #00D8FF",
"2.\tc #009DFF",
"3.\tc #0062FF",
"4.\tc #D90000",
"5.\tc #FFC400",
"6.\tc #C4FF3B",
"7.\tc #98FF68",
"8.\tc #5DFFA2",
"9.\tc #3FFFBF",
"0.\tc #05FFFB",
"a.\tc #00E5FF",
"b.\tc #8E0000",
"c.\tc #9E0000",
"d.\tc #FF5D00",
"e.\tc #FF6C00",
"f.\tc #FF9800",
"g.\tc #D3FF2C",
"h.\tc #A6FF58",
"i.\tc #31FFCF",
"j.\tc #0000EB",
"k.\tc #6BFF93",
"l.\tc #5DFFA3",
"m.\tc #0000FA",
"n.\tc #FF1300",
"o.\tc #C3FF3B",
"p.\tc #A7FF59",
"q.\tc #6CFF94",
"r.\tc #31FFCE",
"s.\tc #0000CE",
"t.\tc #0080FF",
"u.\tc #0000A2",
"v.\tc #E1FF1D",
"w.\tc #A7FF58",
"x.\tc #97FF67",
"y.\tc #7BFF85",
"z.\tc #6CFF93",
"A.\tc #008FFF",
"B.\tc #7AFF84",
"C.\tc #40FFC0",
"D.\tc #14FFEC",
"E.\tc #05FFFA",
"F.\tc #0045FF",
"G.\tc #000AFF",
"H.\tc #4EFFB0",
"I.\tc #000085",
"J.\tc #BA0000",
"K.\tc #00BBFF",
"L.\tc #AB0000",
"M.\tc #FF0400",
"N.\tc #FFE100",
"O.\tc #E2FF1D",
"P.\tc #4FFFB1",
"Q.\tc #00E7FF",
"R.\tc #FF3F00",
"S.\tc #E2FF1E",
"T.\tc #0054FF",
"  . + @ # $ % & * = - ; > , \' ) ! ~ { ] ^ / ( _ : < [ } | 1 2 3 4 5 6 7 8 9 \
0 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E ",
"  . + @ # $ % & F = - ; G H I ) ! ~ J ] K / ( L : < M N | O P 3 4 5 Q 7 8 R S\
 T b U V e W g h i j k l m n X p q r Y t Z v w x y z `  .C D E ",
"  . + ..# +.% @.* = - #.> H \' ) ! $.J ] K %.( _ &.*.=.-.| O P ;.4 >.6 7 8 9 \
S T ,.\'.d ).f g h !.j ~.l m n o p q r s {.u ].w x y z A  .C ^./.",
"(.. + ..# +.% & F = - #.G H \' ) ! $.J ] K %.( _ : < _.N | :.2 <.4 >.[.7 8 9 \
}.T b |.d e W g 1.!.j k 2.m n X 3.q r Y t Z ].w x y z A B C ^.E ",
"(.. + ..# +.4.& F = - #.> H \' ) ! $.J ] ^ / 5.L &.< _.N | :.6.<.4 7.6 7 8 8.\
S 9.b c d 0.f a.h !.j k l m n X p q r s {.Z v w x y z A  .C ^.E ",
"  b.c.@ # $ % & * = - ; > H \' d.e.$.J f.^ / ( L &.*.[ N | g.P ;.h.7.6 7 8 9 \
S T i.|.d e f g h !.j k 2.m n X p q r Y {.Z v w j.y z A B C D E ",
"  . + @ # +.% @.* = - #.G H \' ) ! $.J ] K / 5.L : < _.N | O 6.<.4 5 Q 7 k.l.\
S 9.b \'.d 0.W g h !.j k 2.m n o 3.q r s t Z v m.j.y z A B C ^.E ",
"  . + @ # $ % @.* = n.; > H \' ) ! $.J ] K / ( L : *.=.N | 1 o.<.p.5 6 7 q.l.\
S T r.c d e f g h !.j k 2.m n o p q r Y {.u v w j.y s.` B C D E ",
"  . + @ # +.% & F = - ; G H \' ) ! $.J ] K / ( _ : *.[ N | 1 6.<.p.7.Q 7 8 8.\
S 9.b U d e W g 1.i j ~.l m t.o 3.q r Y t Z v w j.y z ` B u.^.E ",
"  . + @ # $ % @.F = - ; G H \' d.! ~ J ] K / ( L : < [ N v.:.P <.w.x.6 y.z.8.\
S T r.\'.d 0.W g 1.!.j k l A.t.X 3.q r Y {.Z v m.j.y s.A B u.^.E ",
"  . + @ # $ % & F = - #.> H \' ) e.~ J f.^ / 5.L : *.M N | g.6.<.p.>.6 B.8 8.\
S C.r.|.D.E.W g h !.j ~.2.m t.X 3.q F.Y t Z G.w j.y z ` B C ^.E ",
"  b.c.@ # +.% & F = - #.G H \' ) e.~ J ] ^ / 5._ : *.[ N | :.o.<.p.>.6 7 8 9 \
H.9.r.c d 0.W g 1.!.j k 2.m n X 3.q r Y t Z v w x y s.` B C D I.",
"  b.+ @ J.$ % & * = - #.G H \' ) e.~ J ] ^ / ( L : *.=.N v.g.6.<.p.>.6 7 z.8.\
S C.i.c D.E.W g h !.K.~.l m n o 3.q r s {.Z v m.j.y z ` B C D I.",
"  b.+ L.J.$ % & F M.- #.G H \' d.e.~ J f.K / 5.L N.< [ N O.:.6.<.w.>.6 7 q.8.\
P.T r.c d ).W Q.h !.K.k 2.m n X 3.q F.s t Z G.w j.y s.` B u.D E ",
"  b.c.@ # $ % @.* = - ; G R.\' d.e.~ J f.K / 5.L N.< [ N S.1 6.<.p.>.6 y.q.8.\
P.9.r.c d E.W Q.1.!.j ~.2.A.t.o 3.T.F.Y t Z G.m.j.y s.` B C D E "
};
static Fl_Pixmap image_matlab(idata_matlab);

void Controls::cb_f_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_RGREY);
                  mwtb->redraw();
}
void Controls::cb_f(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_f_i(o,v);
}

static const char *idata_blred[] = {
"70 15 62 1 ",
"  c #020000",
". c #050000",
"X c #090000",
"o c #0D0000",
"O c #100000",
"+ c #140000",
"@ c #180000",
"# c #1F0000",
"$ c #230000",
"% c #260000",
"& c #2A0000",
"* c #2E0000",
"= c #310000",
"- c #350000",
"; c #380000",
": c #3C0000",
"> c #430000",
", c #470000",
"< c #4B0000",
"1 c #4E0000",
"2 c #520000",
"3 c #560000",
"4 c #590000",
"5 c #5D0000",
"6 c #640000",
"7 c #680000",
"8 c #6C0000",
"9 c #6F0000",
"0 c #730000",
"q c #770000",
"w c #7A0000",
"e c #7E0000",
"r c #820000",
"t c #850000",
"y c #880000",
"u c #8C0000",
"i c #900000",
"p c #930000",
"a c #970000",
"s c #9E0000",
"d c #A20000",
"f c #A60000",
"g c #A90000",
"h c #AD0000",
"j c #B10000",
"k c #B40000",
"l c #B80000",
"z c #BC0000",
"x c #C30000",
"c c #C70000",
"v c #CE0000",
"b c #D10000",
"n c #D50000",
"m c #D90000",
"M c #DC0000",
"N c #E00000",
"B c #E40000",
"V c #E70000",
"C c #EF0000",
"Z c #F20000",
"A c #F60000",
"S c #FD0000",
" .XoO+@@$$%&*=-;:>>,<12345767800wwertyuipassdfghjklzzxccbbnmMNBVZCZASS",
" .XoO+@##$%&*=-;::>,<123454678800werttuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO++##$%&*=-;:>>,<12345767880wwertyuipassdfghjklzzxccvbnmMNBVZCZAAS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO+@##$%&*=-;::,,<123457677000wertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO++##$%&*=-;:>>,<12345467880wwertyuipassdfghjklzzxccvbnmMNBVBCZAAS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO+@@#$%&*=-;::>,<123454778000wertyuipassdfghjklzzxccvbnmMNBVBZZAAS",
" .XoO++##$%&*=-;:>>,<12345667880wwertyuipaaddfghjklzxxccvbnmMNBVBZZASS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzzxcvvbnmMNBVCCZAAS",
" .XoO+@##$%&*=-;:>>,<123454778000wertyuipassdfghjklzxxcvvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzzxxvvbnmMNBVCCZAAS",
" .XoO+@@#$%&*=-;:>>,<123457678800eertyuipassdfghjklzzxxcvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<123454678000wertyuipaasdfghjklzxxcvvbnmMNBVCCZASS",
" .XoO+@@#$%&*=-;:>>,<12343767800wwertyuipassdfghjklzxxccvbnmMNBVVZZZSS"
};
static Fl_Pixmap image_blred(idata_blred);

void Controls::cb_10_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_GGREY);
                  mwtb->redraw();
}
void Controls::cb_10(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_10_i(o,v);
}

static const char *idata_blgreen[] = {
"70 15 62 1 ",
"  c #000200",
". c #000500",
"X c #000900",
"o c #000D00",
"O c #001000",
"+ c #001400",
"@ c #001800",
"# c #001F00",
"$ c #002300",
"% c #002600",
"& c #002A00",
"* c #002E00",
"= c #003100",
"- c #003500",
"; c #003800",
": c #003C00",
"> c #004300",
", c #004700",
"< c #004B00",
"1 c #004E00",
"2 c #005200",
"3 c #005600",
"4 c #005900",
"5 c #005D00",
"6 c #006400",
"7 c #006800",
"8 c #006C00",
"9 c #006F00",
"0 c #007300",
"q c #007700",
"w c #007A00",
"e c #007E00",
"r c #008200",
"t c #008500",
"y c #008800",
"u c #008C00",
"i c #009000",
"p c #009300",
"a c #009700",
"s c #009E00",
"d c #00A200",
"f c #00A600",
"g c #00A900",
"h c #00AD00",
"j c #00B100",
"k c #00B400",
"l c #00B800",
"z c #00BC00",
"x c #00C300",
"c c #00C700",
"v c #00CE00",
"b c #00D100",
"n c #00D500",
"m c #00D900",
"M c #00DC00",
"N c #00E000",
"B c #00E400",
"V c #00E700",
"C c #00EF00",
"Z c #00F200",
"A c #00F600",
"S c #00FD00",
" .XoO+@@$$%&*=-;:>>,<12345767800wwertyuipassdfghjklzzxccbbnmMNBVZCZASS",
" .XoO+@##$%&*=-;::>,<123454678800werttuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO++##$%&*=-;:>>,<12345767880wwertyuipassdfghjklzzxccvbnmMNBVZCZAAS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO+@##$%&*=-;::,,<123457677000wertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO++##$%&*=-;:>>,<12345467880wwertyuipassdfghjklzzxccvbnmMNBVBCZAAS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO+@@#$%&*=-;::>,<123454778000wertyuipassdfghjklzzxccvbnmMNBVBZZAAS",
" .XoO++##$%&*=-;:>>,<12345667880wwertyuipaaddfghjklzxxccvbnmMNBVBZZASS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzzxcvvbnmMNBVCCZAAS",
" .XoO+@##$%&*=-;:>>,<123454778000wertyuipassdfghjklzxxcvvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzzxxvvbnmMNBVCCZAAS",
" .XoO+@@#$%&*=-;:>>,<123457678800eertyuipassdfghjklzzxxcvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<123454678000wertyuipaasdfghjklzxxcvvbnmMNBVCCZASS",
" .XoO+@@#$%&*=-;:>>,<12343767800wwertyuipassdfghjklzxxccvbnmMNBVVZZZSS"
};
static Fl_Pixmap image_blgreen(idata_blgreen);

void Controls::cb_11_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_BGREY);
                  mwtb->redraw();
}
void Controls::cb_11(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_11_i(o,v);
}

static const char *idata_blblue[] = {
"70 15 62 1 ",
"  c #000002",
". c #000005",
"X c #000009",
"o c #00000D",
"O c #000010",
"+ c #000014",
"@ c #000018",
"# c #00001F",
"$ c #000023",
"% c #000026",
"& c #00002A",
"* c #00002E",
"= c #000031",
"- c #000035",
"; c #000038",
": c #00003C",
"> c #000043",
", c #000047",
"< c #00004B",
"1 c #00004E",
"2 c #000052",
"3 c #000056",
"4 c #000059",
"5 c #00005D",
"6 c #000064",
"7 c #000068",
"8 c #00006C",
"9 c #00006F",
"0 c #000073",
"q c #000077",
"w c #00007A",
"e c #00007E",
"r c #000082",
"t c #000085",
"y c #000088",
"u c #00008C",
"i c #000090",
"p c #000093",
"a c #000097",
"s c #00009E",
"d c #0000A2",
"f c #0000A6",
"g c #0000A9",
"h c #0000AD",
"j c #0000B1",
"k c #0000B4",
"l c #0000B8",
"z c #0000BC",
"x c #0000C3",
"c c #0000C7",
"v c #0000CE",
"b c #0000D1",
"n c #0000D5",
"m c #0000D9",
"M c #0000DC",
"N c #0000E0",
"B c #0000E4",
"V c #0000E7",
"C c #0000EF",
"Z c #0000F2",
"A c #0000F6",
"S c #0000FD",
" .XoO+@@$$%&*=-;:>>,<12345767800wwertyuipassdfghjklzzxccbbnmMNBVZCZASS",
" .XoO+@##$%&*=-;::>,<123454678800werttuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO++##$%&*=-;:>>,<12345767880wwertyuipassdfghjklzzxccvbnmMNBVZCZAAS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzxxcvvbnmMNBVBCZASS",
" .XoO+@##$%&*=-;::,,<123457677000wertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO++##$%&*=-;:>>,<12345467880wwertyuipassdfghjklzzxccvbnmMNBVBCZAAS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzxxcvvbnmMNBVZCZASS",
" .XoO+@@#$%&*=-;::>,<123454778000wertyuipassdfghjklzzxccvbnmMNBVBZZAAS",
" .XoO++##$%&*=-;:>>,<12345667880wwertyuipaaddfghjklzxxccvbnmMNBVBZZASS",
" .XoO+@@#$%&*=-;::>,<123454677000eertyuipaasdfghjklzzxcvvbnmMNBVCCZAAS",
" .XoO+@##$%&*=-;:>>,<123454778000wertyuipassdfghjklzxxcvvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<12345777880wwertyuipaasdfghjklzzxxvvbnmMNBVCCZAAS",
" .XoO+@@#$%&*=-;:>>,<123457678800eertyuipassdfghjklzzxxcvbnmMNBVBZZASS",
" .XoO+@##$%&*=-;::>,<123454678000wertyuipaasdfghjklzxxcvvbnmMNBVCCZASS",
" .XoO+@@#$%&*=-;:>>,<12343767800wwertyuipassdfghjklzxxccvbnmMNBVVZZZSS"
};
static Fl_Pixmap image_blblue(idata_blblue);

void Controls::cb_12_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_ACID);
                  mwtb->redraw();
}
void Controls::cb_12(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_12_i(o,v);
}

static const char *idata_acid_trip[] = {
"70 15 70 1 ",
"  c #FFFF03",
". c #FFFF0B",
"X c #FFFF12",
"o c #FFFF19",
"O c #FFFF21",
"+ c #FFFF28",
"@ c #FFFF2F",
"# c #FFFF37",
"$ c #FFFF3E",
"% c #FFFF45",
"& c #FFFF4C",
"* c #FFFF54",
"= c #FFFF5B",
"- c #FFFF62",
"; c #FFFF6A",
": c #FFFF71",
"> c #FFFF78",
", c #FF03FF",
"< c #FF0BFF",
"1 c #FF12FF",
"2 c #FF19FF",
"3 c #FF21FF",
"4 c #FF28FF",
"5 c #FF2FFF",
"6 c #FF37FF",
"7 c #FF3EFF",
"8 c #FF45FF",
"9 c #FF4CFF",
"0 c #FF54FF",
"q c #FF5BFF",
"w c #FF62FF",
"e c #FF6AFF",
"r c #FF71FF",
"t c #FF78FF",
"y c #FFFF80",
"u c #FFFF87",
"i c #FFFF8E",
"p c #FFFF96",
"a c #FFFF9D",
"s c #FFFFA4",
"d c #FFFFAB",
"f c #FFFFB2",
"g c #FFFFBA",
"h c #FF80FF",
"j c #FF87FF",
"k c #FF8EFF",
"l c #FF96FF",
"z c #FF9DFF",
"x c #FFA4FF",
"c c #FFABFF",
"v c #FFB2FF",
"b c #FFBAFF",
"n c #FFFFC1",
"m c #FFFFC8",
"M c #FFFFD0",
"N c #FFFFD7",
"B c #FFFFDE",
"V c #FFC1FF",
"C c #FFC8FF",
"Z c #FFD0FF",
"A c #FFD7FF",
"S c #FFDEFF",
"D c #FFFFE5",
"F c #FFFFED",
"G c #FFE5FF",
"H c #FFEDFF",
"J c #FFFFF4",
"K c #FFF4FF",
"L c #FFFFFB",
"P c #FFFBFF",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. ",
",<1234567890qwerthjklzxcvbVCZASGHKPLJFDBNMmngfdsapiuy>:;-=*&%$#@+OoX. "
};
static Fl_Pixmap image_acid_trip(idata_acid_trip);

void Controls::cb_13_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_P2G);
                  mwtb->redraw();
}
void Controls::cb_13(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_13_i(o,v);
}

static const char *idata_Pink2Green[] = {
"70 15 32 1 ",
"  c #81FE81",
". c #84FB84",
"X c #8AF58A",
"o c #8FF08F",
"O c #93EC93",
"+ c #97E897",
"@ c #9AE59A",
"# c #9EE19E",
"$ c #A3DCA3",
"% c #A7D8A7",
"& c #ABD4AB",
"* c #AED1AE",
"= c #B4CBB4",
"- c #B5CAB5",
"; c #BBC4BB",
": c #BFC0BF",
"> c #C2BDC2",
", c #C6B9C6",
"< c #C8B7C8",
"1 c #CBB4CB",
"2 c #D3ACD3",
"3 c #D6A9D6",
"4 c #D8A7D8",
"5 c #DCA3DC",
"6 c #E19EE1",
"7 c #E798E7",
"8 c #EA95EA",
"9 c #EE91EE",
"0 c #F38CF3",
"q c #F58AF5",
"w c #F986F9",
"e c #FE81FE",
"eewwwq009988877666555442212111<,,>:::;;====***&%%$$$##@@++OOOooXXX..  ",
"eewwqq00999877766655442222211<<<,>>:;;;====***&&%%$#$##@@++OooXoXX..  ",
"eeewwq090998777665655444221111<,>>>::;;=====*&&%%%$$###@+++OOooXX.... ",
"eewwqq00998887766655444222121<<,,>::;;:===***&&&%$$$$#@@++OOooXoXXX.  ",
"eeewqq009988777666554442221111<,,>:::;;====**&&&%$$$##@@@++OOooXXX... ",
"eewwqq000998777666554422412111<,>>::;;;=====*&&%%%$#$##@++OOooXoXX..  ",
"eewwwqq09998877665655442221211<,,>>::;;=====**&&%%$$##@@++OOOooXX...  ",
"ewewqq00098877766655444222111<<<>>::;;:===***&&%%$$#$#@@@++OooXoXXX.. ",
"eewwqq099988877665554442222111<,,>>::;=;===***&&%%$#$##@++OOOooXXX..  ",
"eewwwq00999877766665542222111<<,>>::;;;====**&&%%%$$##@@+++OoooXXX... ",
"eeewqq000998777666554444222111<,>>:::;;====**&&&%$$#$#@@+++OOooXX...  ",
"eewwwq00998887766565542422211<<,,>>:;;;====**&&%%%$$###@@+OOoooXXXX.  ",
"ewewqqq0099877766555444222111<<<>>:::;=:===**&&&%%$#$#@@+++OOooXXX..  ",
"eewwwq009988777666654242211211<<,>::;;;=;==***&%%$$$##@@++OOoooXXX..  ",
"eewwqq0099888776665554242221<<<,>>>::;=;===**&&&%%$#$#@@@+OOOooXO .   "
};
static Fl_Pixmap image_Pink2Green(idata_Pink2Green);

void Controls::cb_14_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_VIRIDIS);
                  mwtb->redraw();
}
void Controls::cb_14(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_14_i(o,v);
}

static const char *idata_viridis[] = {
"70 15 70 1 ",
"  c #440256",
". c #45075B",
"X c #460D60",
"o c #471265",
"O c #47176A",
"+ c #481C6E",
"@ c #472576",
"# c #482172",
"$ c #472A79",
"% c #462F7C",
"& c #45337F",
"* c #29AF7E",
"= c #2EB27C",
"- c #3FBC73",
"; c #38B976",
": c #33B679",
"> c #45BF6F",
", c #7CD24F",
"< c #62CA5E",
"1 c #6BCD59",
"2 c #73CF54",
"3 c #4CC26B",
"4 c #53C567",
"5 c #5BC863",
"6 c #98D83D",
"7 c #BFDF24",
"8 c #B5DD2B",
"9 c #A1DA37",
"0 c #ABDB31",
"q c #C8E01F",
"w c #D2E11B",
"e c #DBE218",
"r c #E5E318",
"t c #EFE51B",
"y c #F7E620",
"u c #8ED644",
"i c #85D449",
"p c #443882",
"a c #433C84",
"s c #3E4989",
"d c #3C4D8A",
"f c #3B518A",
"g c #39558B",
"h c #37588C",
"j c #355C8C",
"k c #2F6B8E",
"l c #2D6E8E",
"z c #33608D",
"x c #32638D",
"c c #30678D",
"v c #2C728E",
"b c #2A768E",
"n c #277C8E",
"m c #29798E",
"M c #414086",
"N c #404587",
"B c #1F948B",
"V c #1E9B89",
"C c #1E988A",
"Z c #1E9E88",
"A c #25838D",
"S c #26808E",
"D c #23878D",
"F c #228A8D",
"G c #218D8C",
"H c #20918C",
"J c #1FA286",
"K c #20A585",
"L c #23A883",
"P c #26AC81",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSAFFGHBCVZJKLPP=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSAAFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSAFFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnnADFGHBCVZJKPP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnSADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnnADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnAADFGHBCVZJKLP*=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnAADFGHBCVZJKLPP=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnnADFGHBCVZJKLP==:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnnADFGHBCVZJKLPP=:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbmnAADFGHBCVZJKLP==:;->345<12,iu69087qwerty",
" .XoO+#@$%&paMNsdfghjzxcklvbbnAADFGHBCVZJKLPP=:;->345<12,iu69087qwerty"
};
static Fl_Pixmap image_viridis(idata_viridis);

void Controls::cb_15_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_VIRIDIS_LIGHT);
                  mwtb->redraw();
}
void Controls::cb_15(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_15_i(o,v);
}

static const char *idata_viridis_light[] = {
"70 15 70 1 ",
"  c #76EE2C",
". c #69EC35",
"X c #35DF68",
"o c #31DC6E",
"O c #2DD974",
"+ c #2BD77A",
"@ c #2AD47F",
"# c #3BE261",
"$ c #5DEB40",
"% c #53E949",
"& c #49E752",
"* c #42E45A",
"= c #84EE26",
"- c #91EF25",
"; c #9EEF29",
": c #A9F02D",
"> c #B4F032",
", c #BEF136",
"< c #C8F139",
"1 c #D1F139",
"2 c #DBF238",
"3 c #F5F328",
"4 c #E4F236",
"5 c #EDF330",
"6 c #4B74BF",
"7 c #477CBB",
"8 c #467EBA",
"9 c #4978BD",
"0 c #6E38C3",
"q c #6C3EC5",
"w c #7132C2",
"e c #5E58C7",
"r c #5B5CC7",
"t c #6A43C6",
"y c #6749C7",
"u c #644EC7",
"i c #6153C7",
"p c #5565C4",
"a c #5861C6",
"s c #5369C3",
"d c #506DC2",
"f c #4D71C0",
"g c #39B59F",
"h c #34BB9A",
"j c #33BE98",
"k c #37B89D",
"l c #3FA7A7",
"z c #3EAAA5",
"x c #3DADA4",
"c c #3AB2A1",
"v c #3BB0A2",
"b c #4193AF",
"n c #4196AE",
"m c #419CAB",
"M c #409EAA",
"N c #4199AD",
"B c #4385B6",
"V c #428BB3",
"C c #428DB2",
"Z c #4388B5",
"A c #4582B8",
"S c #4290B0",
"D c #40A1A9",
"F c #40A4A8",
"G c #2BCB8B",
"H c #2ACE88",
"J c #2DC88F",
"K c #29D183",
"L c #2EC592",
"P c #30C295",
"w0qtyuierapsdf6978ABBCCSbnNmMDFlzxvggkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABBVCSbnNmMDFlzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABZVCSbnNmMDllzxxggkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABZCCSbnNmMDDlzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABBVCSbnNmMDDlxxvcgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABZVCSbnNmMDllzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978BBZCCSbnNmMDllzxvggkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABBVCSbnNmMDDlzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6988ABBCCSbnNmMDFlzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6998ABBVCSbnNNMDFlzxvggkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6988ABZVCSbnNMMDFlzxvvgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6998ABZCCSbnnMMDFlzxvcgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978ABZVCSbnNmMDFlzxvckkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6978AZZVCSbnNmMDFlzxvcgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453",
"w0qtyuierapsdf6998AZZVCSbnNmMDFlzxvcgkhjPLJGHK@+OoX#*&%$. =-;:>,<12453"
};
static Fl_Pixmap image_viridis_light(idata_viridis_light);

Fl_Menu_Item Controls::menu_veccstype[] = {
 {0, 0,  (Fl_Callback*)Controls::cb_8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_a, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_b, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_c, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_d, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_e, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_f, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_11, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_13, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_14, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_15, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_optimal_i(Fl_Button*, void*) {
  mwtb->vecdata->optimize_cs();
veccolmin->value(mwtb->vecdata->cs->min());
veccolmax->value(mwtb->vecdata->cs->max());
mwtb->redraw();
}
void Controls::cb_optimal(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_optimal_i(o,v);
}

void Controls::cb_vecautocal_i(Fl_Light_Button* o, void*) {
  mwtb->vecdata->auto_cs(o->value());
}
void Controls::cb_vecautocal(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_vecautocal_i(o,v);
}

void Controls::cb_auxgriddispbut_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->display( o->value() );
mwtb->redraw();
}
void Controls::cb_auxgriddispbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxgriddispbut_i(o,v);
}

void Controls::cb_optimal1_i(Fl_Button*, void*) {
  mwtb->auxGrid->optimize_cs(tmslider->value());
auxmincolval->value(mwtb->auxGrid->cs.min());
auxmaxcolval->value(mwtb->auxGrid->cs.max());
mwtb->redraw();
}
void Controls::cb_optimal1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_optimal1_i(o,v);
}

void Controls::cb_16_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_RAINBOW);
mwtb->redraw();
}
void Controls::cb_16(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void Controls::cb_17_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_BL_RAINBOW);
mwtb->redraw();
}
void Controls::cb_17(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_17_i(o,v);
}

void Controls::cb_18_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_HOT);
mwtb->redraw();
}
void Controls::cb_18(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_18_i(o,v);
}

void Controls::cb_19_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_COLD_HOT);
mwtb->redraw();
}
void Controls::cb_19(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_19_i(o,v);
}

void Controls::cb_1a_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_GREY);
mwtb->redraw();
}
void Controls::cb_1a(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1a_i(o,v);
}

void Controls::cb_1b_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_CG);
mwtb->redraw();
}
void Controls::cb_1b(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1b_i(o,v);
}

void Controls::cb_1c_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_MATLAB);
mwtb->redraw();
}
void Controls::cb_1c(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1c_i(o,v);
}

void Controls::cb_1d_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_RGREY);
                mwtb->redraw();
}
void Controls::cb_1d(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1d_i(o,v);
}

void Controls::cb_1e_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_GGREY);
                mwtb->redraw();
}
void Controls::cb_1e(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1e_i(o,v);
}

void Controls::cb_1f_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_BGREY);
                mwtb->redraw();
}
void Controls::cb_1f(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_1f_i(o,v);
}

void Controls::cb_20_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_ACID);
                mwtb->redraw();
}
void Controls::cb_20(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_20_i(o,v);
}

void Controls::cb_21_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_P2G);
                mwtb->redraw();
}
void Controls::cb_21(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_21_i(o,v);
}

void Controls::cb_22_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_VIRIDIS);
                mwtb->redraw();
}
void Controls::cb_22(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_22_i(o,v);
}

void Controls::cb_23_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->cs.scale(CS_VIRIDIS_LIGHT);
                mwtb->redraw();
}
void Controls::cb_23(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_23_i(o,v);
}

Fl_Menu_Item Controls::menu_auxcstype[] = {
 {0, 0,  (Fl_Callback*)Controls::cb_16, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_17, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_18, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_19, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1a, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1b, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1c, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1d, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1e, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1f, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_20, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_21, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_22, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_23, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_auxmincolval_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->cs.calibrate(o->value(),mwtb->auxGrid->cs.max());
mwtb->redraw();
}
void Controls::cb_auxmincolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxmincolval_i(o,v);
}

void Controls::cb_auxmaxcolval_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->cs.calibrate(mwtb->auxGrid->cs.min(),o->value());
mwtb->redraw();
}
void Controls::cb_auxmaxcolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxmaxcolval_i(o,v);
}

void Controls::cb_auxnumcolev_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->cs.size((int)(o->value()));
mwtb->redraw();
}
void Controls::cb_auxnumcolev(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxnumcolev_i(o,v);
}

void Controls::cb_auxautocalibratebut_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->autocolor(o->value());
}
void Controls::cb_auxautocalibratebut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxautocalibratebut_i(o,v);
}

void Controls::cb_auxptcolor_i(Fl_Button*, void*) {
  static AuxColourChoice *cc=NULL;

if( !cc )
  cc = new AuxColourChoice(mwtb->auxGrid->color(Vertex),Vertex,mwtb);
cc->window->show();
}
void Controls::cb_auxptcolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxptcolor_i(o,v);
}

void Controls::cb_auxptdat_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->datify(Vertex,o->value());
mwtb->redraw();
}
void Controls::cb_auxptdat(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxptdat_i(o,v);
}

void Controls::cb_auxptsize_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->size(Vertex,o->value());
mwtb->redraw();
}
void Controls::cb_auxptsize(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxptsize_i(o,v);
}

void Controls::cb_Off_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Vertex,false);
mwtb->redraw();
}
void Controls::cb_Off(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Off_i(o,v);
}

void Controls::cb_Point_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Vertex,true);
mwtb->auxGrid->threeD(Vertex,false);
mwtb->redraw();
}
void Controls::cb_Point(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Point_i(o,v);
}

void Controls::cb_3D_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Vertex,true);
mwtb->auxGrid->threeD(Vertex,true);
mwtb->redraw();
}
void Controls::cb_3D(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_3D_i(o,v);
}

Fl_Menu_Item Controls::menu_auxptstyle[] = {
 {"Off", 0,  (Fl_Callback*)Controls::cb_Off, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Point", 0,  (Fl_Callback*)Controls::cb_Point, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3D", 0,  (Fl_Callback*)Controls::cb_3D, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_auxlinecolor_i(Fl_Button*, void*) {
  static AuxColourChoice *cc=NULL;
if( !cc ) cc =new AuxColourChoice(mwtb->auxGrid->color(Cnnx),Cnnx,mwtb);
cc->window->show();
}
void Controls::cb_auxlinecolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxlinecolor_i(o,v);
}

void Controls::cb_auxlinedat_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->datify(Cnnx,o->value());
mwtb->redraw();
}
void Controls::cb_auxlinedat(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxlinedat_i(o,v);
}

void Controls::cb_auxlinewidth_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->size(Cnnx,o->value());
mwtb->redraw();
}
void Controls::cb_auxlinewidth(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxlinewidth_i(o,v);
}

void Controls::cb_Off1_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Cnnx,false);
mwtb->redraw();
}
void Controls::cb_Off1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Off1_i(o,v);
}

void Controls::cb_Line_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Cnnx,true);
mwtb->auxGrid->threeD(Cnnx,false);
mwtb->redraw();
}
void Controls::cb_Line(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Line_i(o,v);
}

void Controls::cb_3D1_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(Cnnx,true);
mwtb->auxGrid->threeD(Cnnx,true);
mwtb->redraw();
}
void Controls::cb_3D1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_3D1_i(o,v);
}

Fl_Menu_Item Controls::menu_auxlinestyle[] = {
 {"Off", 0,  (Fl_Callback*)Controls::cb_Off1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Line", 0,  (Fl_Callback*)Controls::cb_Line, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3D", 0,  (Fl_Callback*)Controls::cb_3D1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_auxsurfcolor_i(Fl_Button*, void*) {
  static AuxColourChoice *cc=NULL;
if(!cc)
cc = new AuxColourChoice(mwtb->auxGrid->color(SurfEle),SurfEle,mwtb);
cc->window->show();
}
void Controls::cb_auxsurfcolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxsurfcolor_i(o,v);
}

void Controls::cb_auxsurfdat_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->datify(Surface,o->value());
mwtb->redraw();
}
void Controls::cb_auxsurfdat(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxsurfdat_i(o,v);
}

void Controls::cb_auxsurfline_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->size(SurfEle,o->value());
mwtb->redraw();
}
void Controls::cb_auxsurfline(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxsurfline_i(o,v);
}

void Controls::cb_Off2_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(SurfEle,false);
mwtb->redraw();
}
void Controls::cb_Off2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Off2_i(o,v);
}

void Controls::cb_Outline1_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(SurfEle,true);
mwtb->auxGrid->surfill(false);
mwtb->redraw();
}
void Controls::cb_Outline1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Outline1_i(o,v);
}

void Controls::cb_Filled2_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(SurfEle,true);
mwtb->auxGrid->surfill(true);
mwtb->redraw();
}
void Controls::cb_Filled2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Filled2_i(o,v);
}

Fl_Menu_Item Controls::menu_auxsurfstyle[] = {
 {"Off", 0,  (Fl_Callback*)Controls::cb_Off2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Outline", 0,  (Fl_Callback*)Controls::cb_Outline1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Filled", 0,  (Fl_Callback*)Controls::cb_Filled2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_auxvolcolor_i(Fl_Button*, void*) {
  static AuxColourChoice *cc=NULL;
if(!cc)
cc=new AuxColourChoice(mwtb->auxGrid->color(VolEle),VolEle,mwtb);
cc->window->show();
}
void Controls::cb_auxvolcolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxvolcolor_i(o,v);
}

void Controls::cb_auxvoldat_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->datify(VolEle,o->value());
mwtb->redraw();
}
void Controls::cb_auxvoldat(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxvoldat_i(o,v);
}

void Controls::cb_auxvolline_i(Fl_Value_Input* o, void*) {
  mwtb->auxGrid->size(VolEle,o->value());
mwtb->redraw();
}
void Controls::cb_auxvolline(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_auxvolline_i(o,v);
}

void Controls::cb_Off3_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(VolEle,false);
mwtb->redraw();
}
void Controls::cb_Off3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Off3_i(o,v);
}

void Controls::cb_Outline2_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(VolEle,true);
mwtb->auxGrid->volfill(false);
mwtb->redraw();
}
void Controls::cb_Outline2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Outline2_i(o,v);
}

void Controls::cb_Filled3_i(Fl_Menu_*, void*) {
  mwtb->auxGrid->showobj(VolEle,true);
mwtb->auxGrid->volfill(true);
mwtb->redraw();
}
void Controls::cb_Filled3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Filled3_i(o,v);
}

Fl_Menu_Item Controls::menu_auxvolstyle[] = {
 {"Off", 0,  (Fl_Callback*)Controls::cb_Off3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Outline", 0,  (Fl_Callback*)Controls::cb_Outline2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Filled", 0,  (Fl_Callback*)Controls::cb_Filled3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_plotAuxTS_i(Fl_Button*, void*) {
  mwtb->auxGrid->plot(tmslider->value());
}
void Controls::cb_plotAuxTS(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_plotAuxTS_i(o,v);
}

void Controls::cb_hiAuxVert_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->highlight(o->value());
if( o->value() ) {
  auxhivert->activate();
  if( mwtb->auxGrid->data() ) {
   auxvertval->activate();
   if( mwtb->auxGrid->plottable() )
     plotAuxTS->activate();
  }  
  float val;
  if(mwtb->auxGrid->highlight_vertex(auxhivert->value(),val) )
    auxvertval->value(val);
} else {
  auxhivert->deactivate();
  auxvertval->deactivate();
  plotAuxTS->deactivate();
}
mwtb->redraw();
}
void Controls::cb_hiAuxVert(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_hiAuxVert_i(o,v);
}

void Controls::cb_auxhivert_i(MyValueInput* o, void*) {
  float val;
if( mwtb->auxGrid->highlight_vertex(o->value(),val) )
  auxvertval->value(val);
mwtb->redraw();
}
void Controls::cb_auxhivert(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_auxhivert_i(o,v);
}

void Controls::cb_Clip_i(Fl_Light_Button* o, void*) {
  mwtb->auxGrid->clip(o->value());
mwtb->redraw();
}
void Controls::cb_Clip(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Clip_i(o,v);
}

void Controls::cb_optimal2_i(Fl_Button*, void*) {
  mwtb->optimize_cs();
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_optimal2(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_optimal2_i(o,v);
}

void Controls::cb_24_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_RAINBOW);
mwtb->redraw();
}
void Controls::cb_24(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_24_i(o,v);
}

void Controls::cb_25_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_BL_RAINBOW);
mwtb->redraw();
}
void Controls::cb_25(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_25_i(o,v);
}

void Controls::cb_26_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_HOT);
mwtb->redraw();
}
void Controls::cb_26(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_26_i(o,v);
}

void Controls::cb_27_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_COLD_HOT);
mwtb->redraw();
}
void Controls::cb_27(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_27_i(o,v);
}

void Controls::cb_28_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_GREY);
mwtb->redraw();
}
void Controls::cb_28(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_28_i(o,v);
}

void Controls::cb_29_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_CG);
mwtb->redraw();
}
void Controls::cb_29(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_29_i(o,v);
}

void Controls::cb_2a_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_MATLAB);
mwtb->redraw();
}
void Controls::cb_2a(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2a_i(o,v);
}

void Controls::cb_2b_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_RGREY);
              mwtb->redraw();
}
void Controls::cb_2b(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2b_i(o,v);
}

void Controls::cb_2c_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_GGREY);
              mwtb->redraw();
}
void Controls::cb_2c(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2c_i(o,v);
}

void Controls::cb_2d_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_BGREY);
              mwtb->redraw();
}
void Controls::cb_2d(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2d_i(o,v);
}

void Controls::cb_2e_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_ACID);
              mwtb->redraw();
}
void Controls::cb_2e(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2e_i(o,v);
}

void Controls::cb_2f_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_P2G);
              mwtb->redraw();
}
void Controls::cb_2f(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_2f_i(o,v);
}

void Controls::cb_30_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_VIRIDIS);
              mwtb->redraw();
}
void Controls::cb_30(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_30_i(o,v);
}

void Controls::cb_31_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_VIRIDIS_LIGHT);
              mwtb->redraw();
}
void Controls::cb_31(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_31_i(o,v);
}

Fl_Menu_Item Controls::menu_cstype[] = {
 {0, 0,  (Fl_Callback*)Controls::cb_24, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_25, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_26, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_27, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_28, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_29, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2a, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2b, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2c, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2d, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2e, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2f, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_30, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_31, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_mincolval_i(Fl_Value_Input* o, void*) {
  mwtb->cs->calibrate(o->value(),mwtb->cs->max());
mwtb->redraw();
}
void Controls::cb_mincolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_mincolval_i(o,v);
}

void Controls::cb_maxcolval_i(Fl_Value_Input* o, void*) {
  mwtb->cs->calibrate(mwtb->cs->min(),o->value());
mwtb->redraw();
}
void Controls::cb_maxcolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_maxcolval_i(o,v);
}

void Controls::cb_numcolev_i(Fl_Value_Input* o, void*) {
  mwtb->cs->size((int)(o->value()));
mwtb->redraw();
}
void Controls::cb_numcolev(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_numcolev_i(o,v);
}

void Controls::cb_autocalibratebut_i(Fl_Light_Button* o, void*) {
  mwtb->autocolour(o->value());
}
void Controls::cb_autocalibratebut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_autocalibratebut_i(o,v);
}

void Controls::cb_32_i(Fl_Button*, void*) {
  mwtb->SendColourSyncMessage();
}
void Controls::cb_32(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_32_i(o,v);
}

static const unsigned char idata_sync[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,198,253,24,148,
199,253,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,131,191,253,45,128,189,253,165,124,187,253,240,122,186,
253,255,125,188,253,255,131,191,253,246,137,194,253,177,141,196,253,60,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,189,253,120,120,185,253,
252,97,173,252,255,69,159,252,255,49,149,251,255,46,147,251,255,61,155,252,255,
86,167,252,255,107,178,252,255,118,184,253,138,116,183,253,3,0,0,0,0,0,0,0,0,
86,167,252,255,108,176,247,51,112,181,252,114,107,178,252,255,80,165,252,255,
35,141,251,255,24,113,206,168,20,95,173,117,19,90,164,111,21,101,184,165,26,
124,226,249,51,149,251,255,85,167,252,255,97,173,252,138,0,0,0,0,0,0,0,0,48,148,
251,255,71,157,246,165,75,162,252,249,61,155,252,255,28,134,244,228,22,106,192,
63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,91,165,45,26,123,223,219,56,152,251,255,
85,167,252,255,93,171,252,57,0,0,0,0,27,127,230,255,34,136,243,255,37,142,251,
255,28,133,241,252,24,112,204,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,21,101,184,39,29,136,247,249,69,159,252,255,85,167,252,174,0,0,0,0,22,103,
187,255,26,112,201,255,25,120,218,255,25,116,211,197,24,104,187,51,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,129,234,165,59,154,252,255,80,
164,252,246,0,0,0,0,16,78,142,255,18,86,156,255,21,98,178,255,23,107,195,255,23,
111,203,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,143,251,255,64,156,249,255,87,168,248,255,92,
170,249,255,80,164,250,255,0,0,0,0,19,89,161,210,24,114,207,255,38,143,251,198,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,145,244,51,56,150,
249,152,58,152,249,255,53,149,250,241,42,145,251,255,0,0,0,0,18,81,147,157,22,
103,187,255,29,136,247,255,75,162,252,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,51,149,251,63,38,143,251,255,28,134,244,255,26,126,229,255,26,123,
223,255,0,0,0,0,16,74,135,21,18,87,157,243,24,114,208,255,45,146,251,243,90,170,
252,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,157,252,90,30,138,251,237,25,120,218,
255,22,103,188,249,21,94,169,165,21,99,180,255,0,0,0,0,0,0,0,0,16,74,133,116,19,
89,162,255,24,115,210,255,38,143,251,255,72,160,252,216,88,169,252,162,83,166,
252,159,59,154,252,213,27,130,237,255,21,101,184,255,16,77,141,255,14,64,116,
135,14,62,111,51,16,74,135,255,0,0,0,0,0,0,0,0,0,0,0,0,13,61,110,101,15,73,132,
222,19,90,163,255,22,107,194,255,25,117,213,255,24,116,211,255,22,104,190,255,
18,84,153,255,13,63,115,234,11,50,90,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,10,43,78,61,10,47,85,152,11,54,97,198,12,59,107,252,13,61,
110,255,12,58,105,207,11,52,95,135,11,47,86,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_sync(idata_sync, 16, 16, 4, 0);

void Controls::cb_tmslider_i(Myslider* o, void*) {
  mwtb->set_time(int(o->value()));
}
void Controls::cb_tmslider(Myslider* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_tmslider_i(o,v);
}

void Controls::cb_33_i(Fl_Button*, void*) {
  mwtb->animate_skip( int(frameskip->value()),this );
}
void Controls::cb_33(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_33_i(o,v);
}

void Controls::cb_34_i(Fl_Button*, void*) {
  mwtb->animate_skip(0,this);
}
void Controls::cb_34(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_34_i(o,v);
}

void Controls::cb_frameskip_i(Fl_Counter*, void*) {
  mwtb->animate_skip(int(frameskip->value()),NULL);
}
void Controls::cb_frameskip(Fl_Counter* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_frameskip_i(o,v);
}

void Controls::cb_animdelay_i(Fl_Value_Input* o, void*) {
  mwtb->animate_delay(o->value()/1000.);
}
void Controls::cb_animdelay(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_animdelay_i(o,v);
}

void Controls::cb_tsync_but_i(Fl_Button*, void*) {
  mwtb->SendTimeSyncMessage();
}
void Controls::cb_tsync_but(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_tsync_but_i(o,v);
}

Controls::Controls() {
  { window = new Fl_Double_Window(350, 645, "Meshalyzer Controls");
    window->box(FL_UP_BOX);
    window->user_data((void*)(this));
    { mainbar = new Fl_Menu_Bar(0, 0, 350, 30);
      mainbar->labelcolor((Fl_Color)1);
      { Fl_Menu_Item* o = &menu_mainbar[21];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[22];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[23];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[24];
      o->image(image_pnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[27];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[28];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[29];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[30];
      o->image(image_pnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[33];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[34];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[35];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[36];
      o->image(image_pnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[39];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[40];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[41];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[42];
      o->image(image_pnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[45];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[46];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[47];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[48];
      o->image(image_pnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[51];
      o->image(image_ppaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[52];
      o->image(image_npaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[53];
      o->image(image_nnaxis);
      }
      { Fl_Menu_Item* o = &menu_mainbar[54];
      o->image(image_pnaxis);
      }
      mainbar->menu(menu_mainbar);
    } // Fl_Menu_Bar* mainbar
    { datadest = new Fl_Menu_Button(10, 50, 170, 30, "Data on:");
      datadest->color((Fl_Color)26);
      datadest->menu(menu_datadest);
    } // Fl_Menu_Button* datadest
    { draw_axes = new Fl_Light_Button(10, 85, 65, 25, "Axes");
      draw_axes->tooltip("toggle axs display");
      draw_axes->callback((Fl_Callback*)cb_draw_axes);
    } // Fl_Light_Button* draw_axes
    { voxeleColor = new Fl_Button(80, 85, 100, 25, "Voxele  colour");
      voxeleColor->labelsize(13);
      voxeleColor->callback((Fl_Callback*)cb_voxeleColor);
    } // Fl_Button* voxeleColor
    { dispAs = new Fl_Group(190, 50, 150, 60, "Display as:");
      dispAs->box(FL_ENGRAVED_BOX);
      { dispAsSurf = new Fl_Check_Button(195, 55, 90, 25, "Surfaces");
        dispAsSurf->type(102);
        dispAsSurf->down_box(FL_DIAMOND_DOWN_BOX);
        dispAsSurf->value(1);
        dispAsSurf->callback((Fl_Callback*)cb_dispAsSurf);
      } // Fl_Check_Button* dispAsSurf
      { dispAsVol = new Fl_Check_Button(195, 80, 140, 25, "Volume Mesh");
        dispAsVol->type(102);
        dispAsVol->down_box(FL_DIAMOND_DOWN_BOX);
        dispAsVol->callback((Fl_Callback*)cb_dispAsVol);
      } // Fl_Check_Button* dispAsVol
      dispAs->end();
    } // Fl_Group* dispAs
    { regiondisp = new Fl_Group(10, 120, 330, 145, "Region");
      regiondisp->box(FL_ENGRAVED_BOX);
      regiondisp->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { vertbut = new Fl_Light_Button(160, 141, 100, 25, "Vertices");
        vertbut->callback((Fl_Callback*)cb_vertbut);
        vertbut->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* vertbut
      { cabbut = new Fl_Light_Button(160, 166, 100, 24, "Cables");
        cabbut->callback((Fl_Callback*)cb_cabbut);
      } // Fl_Light_Button* cabbut
      { cnnxbut = new Fl_Light_Button(160, 190, 100, 25, "Connections");
        cnnxbut->callback((Fl_Callback*)cb_cnnxbut);
      } // Fl_Light_Button* cnnxbut
      { vertprop = new Fl_Button(260, 140, 70, 25, "props");
        vertprop->labelsize(12);
        vertprop->callback((Fl_Callback*)cb_vertprop);
      } // Fl_Button* vertprop
      { connprop = new Fl_Button(260, 190, 70, 25, "props");
        connprop->labelsize(12);
        connprop->callback((Fl_Callback*)cb_connprop);
      } // Fl_Button* connprop
      { visbut = new Fl_Light_Button(160, 215, 100, 20, "visible");
        visbut->value(1);
        visbut->callback((Fl_Callback*)cb_visbut);
      } // Fl_Light_Button* visbut
      { Fl_Button* o = new Fl_Button(160, 240, 90, 20, "select all");
        o->callback((Fl_Callback*)cb_select);
      } // Fl_Button* o
      { reglist = new Fl_Check_Browser(25, 130, 120, 125);
        reglist->callback((Fl_Callback*)cb_reglist);
        reglist->when(FL_WHEN_CHANGED);
      } // Fl_Check_Browser* reglist
      { Fl_Button* o = new Fl_Button(250, 240, 80, 20, "invert");
        o->color(FL_FOREGROUND_COLOR);
        o->labelcolor(FL_BACKGROUND_COLOR);
        o->callback((Fl_Callback*)cb_invert);
      } // Fl_Button* o
      { cableprop = new Fl_Button(260, 165, 70, 25, "props");
        cableprop->labelsize(12);
        cableprop->callback((Fl_Callback*)cb_cableprop);
      } // Fl_Button* cableprop
      regiondisp->end();
    } // Fl_Group* regiondisp
    { tabwidget = new Fl_Tabs(10, 270, 330, 220);
      tabwidget->align(Fl_Align(FL_ALIGN_CENTER));
      { hilightgrp = new Fl_Group(10, 305, 330, 185, "Highlight");
        hilightgrp->color((Fl_Color)11);
        hilightgrp->labelfont(1);
        hilightgrp->labelsize(12);
        hilightgrp->labelcolor((Fl_Color)121);
        hilightgrp->align(Fl_Align(FL_ALIGN_LEFT));
        hilightgrp->hide();
        { tethi = new MyValueInput(100, 345, 85, 25, "VolEle:");
          tethi->box(FL_DOWN_BOX);
          tethi->color(FL_BACKGROUND2_COLOR);
          tethi->selection_color(FL_SELECTION_COLOR);
          tethi->labeltype(FL_NO_LABEL);
          tethi->labelfont(0);
          tethi->labelsize(14);
          tethi->labelcolor(FL_FOREGROUND_COLOR);
          tethi->step(1);
          tethi->callback((Fl_Callback*)cb_tethi);
          tethi->align(Fl_Align(FL_ALIGN_LEFT));
          tethi->when(FL_WHEN_CHANGED);
        } // MyValueInput* tethi
        { elehi = new MyValueInput(190, 345, 85, 25, ":Surf Ele");
          elehi->box(FL_DOWN_BOX);
          elehi->color(FL_BACKGROUND2_COLOR);
          elehi->selection_color(FL_SELECTION_COLOR);
          elehi->labeltype(FL_NORMAL_LABEL);
          elehi->labelfont(0);
          elehi->labelsize(14);
          elehi->labelcolor(FL_FOREGROUND_COLOR);
          elehi->step(1);
          elehi->callback((Fl_Callback*)cb_elehi);
          elehi->align(Fl_Align(FL_ALIGN_RIGHT));
          elehi->when(FL_WHEN_CHANGED);
        } // MyValueInput* elehi
        { cabhi = new MyValueInput(190, 375, 85, 25, ":Cable");
          cabhi->box(FL_DOWN_BOX);
          cabhi->color(FL_BACKGROUND2_COLOR);
          cabhi->selection_color(FL_SELECTION_COLOR);
          cabhi->labeltype(FL_NORMAL_LABEL);
          cabhi->labelfont(0);
          cabhi->labelsize(14);
          cabhi->labelcolor(FL_FOREGROUND_COLOR);
          cabhi->step(1);
          cabhi->callback((Fl_Callback*)cb_cabhi);
          cabhi->align(Fl_Align(FL_ALIGN_RIGHT));
          cabhi->when(FL_WHEN_CHANGED);
        } // MyValueInput* cabhi
        { verthi = new MyValueInput(100, 405, 85, 25, "Vertex:");
          verthi->box(FL_DOWN_BOX);
          verthi->color(FL_BACKGROUND2_COLOR);
          verthi->selection_color(FL_SELECTION_COLOR);
          verthi->labeltype(FL_NORMAL_LABEL);
          verthi->labelfont(0);
          verthi->labelsize(14);
          verthi->labelcolor(FL_FOREGROUND_COLOR);
          verthi->step(1);
          verthi->callback((Fl_Callback*)cb_verthi);
          verthi->align(Fl_Align(FL_ALIGN_LEFT));
          verthi->when(FL_WHEN_CHANGED);
        } // MyValueInput* verthi
        { cnnxhi = new MyValueInput(100, 375, 85, 25, "Connection:");
          cnnxhi->box(FL_DOWN_BOX);
          cnnxhi->color(FL_BACKGROUND2_COLOR);
          cnnxhi->selection_color(FL_SELECTION_COLOR);
          cnnxhi->labeltype(FL_NORMAL_LABEL);
          cnnxhi->labelfont(0);
          cnnxhi->labelsize(14);
          cnnxhi->labelcolor(FL_FOREGROUND_COLOR);
          cnnxhi->step(1);
          cnnxhi->callback((Fl_Callback*)cb_cnnxhi);
          cnnxhi->align(Fl_Align(FL_ALIGN_LEFT));
          cnnxhi->when(FL_WHEN_CHANGED);
        } // MyValueInput* cnnxhi
        { hilighton = new Fl_Light_Button(100, 315, 85, 25, "on");
          hilighton->callback((Fl_Callback*)cb_hilighton);
        } // Fl_Light_Button* hilighton
        { attachtype = new Fl_Choice(190, 435, 140, 25, "attached");
          attachtype->tooltip("draw which objects associated with vertex");
          attachtype->down_box(FL_BORDER_BOX);
          attachtype->align(Fl_Align(FL_ALIGN_BOTTOM));
          attachtype->when(FL_WHEN_CHANGED);
          attachtype->menu(menu_attachtype);
        } // Fl_Choice* attachtype
        { Fl_Button* o = new Fl_Button(190, 315, 85, 25, "current reg/surf");
          o->tooltip("set all objects to 1st in currently selected surface");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_current);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(290, 315, 30, 25, "?");
          o->tooltip("display info on highlighted objects");
          o->box(FL_ROUND_UP_BOX);
          o->color((Fl_Color)133);
          o->callback((Fl_Callback*)cb_7);
        } // Fl_Button* o
        { vertvalout = new Fl_Value_Output(190, 405, 85, 25, ":value");
          vertvalout->tooltip("vertex value");
          vertvalout->color((Fl_Color)174);
          vertvalout->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Value_Output* vertvalout
        { hitettype = new Fl_Choice(15, 345, 85, 25);
          hitettype->tooltip("display style");
          hitettype->down_box(FL_BORDER_BOX);
          hitettype->textsize(10);
          hitettype->menu(menu_hitettype);
        } // Fl_Choice* hitettype
        { pickvert = new Fl_Button(15, 435, 80, 25, "Pick Vertex");
          pickvert->tooltip("select a vertex with mouse");
          pickvert->color((Fl_Color)131);
          pickvert->labelsize(12);
          pickvert->callback((Fl_Callback*)cb_pickvert);
        } // Fl_Button* pickvert
        { Fl_Button* o = new Fl_Button(100, 435, 85, 25, "Time series");
          o->color((Fl_Color)124);
          o->callback((Fl_Callback*)cb_Time);
        } // Fl_Button* o
        hilightgrp->end();
      } // Fl_Group* hilightgrp
      { lightgrp = new Fl_Group(10, 295, 330, 185, "Lights");
        lightgrp->color((Fl_Color)188);
        lightgrp->labelfont(1);
        lightgrp->labelsize(12);
        lightgrp->labelcolor((Fl_Color)188);
        lightgrp->hide();
        { lightx = new Fl_Value_Slider(15, 330, 120, 20, "X direction");
          lightx->tooltip("X component of light direction");
          lightx->type(1);
          lightx->selection_color((Fl_Color)71);
          lightx->labelsize(12);
          lightx->minimum(-1);
          lightx->callback((Fl_Callback*)cb_lightx);
        } // Fl_Value_Slider* lightx
        { lighty = new Fl_Value_Slider(15, 370, 120, 20, "Y direction");
          lighty->tooltip("Y component of light direction");
          lighty->type(1);
          lighty->selection_color((Fl_Color)190);
          lighty->labelsize(12);
          lighty->minimum(-1);
          lighty->callback((Fl_Callback*)cb_lighty);
        } // Fl_Value_Slider* lighty
        { lightz = new Fl_Value_Slider(15, 410, 120, 20, "Z directtion");
          lightz->tooltip("z component of light direction");
          lightz->type(1);
          lightz->selection_color((Fl_Color)244);
          lightz->labelsize(12);
          lightz->minimum(-1);
          lightz->value(1);
          lightz->callback((Fl_Callback*)cb_lightz);
        } // Fl_Value_Slider* lightz
        { Fl_Button* o = new Fl_Button(165, 305, 60, 20, "reset");
          o->tooltip("reset light direction to default");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_reset);
        } // Fl_Button* o
        { showLightDir = new Fl_Light_Button(125, 450, 100, 25, "show direction");
          showLightDir->tooltip("draw an arrow indicating the light direction");
          showLightDir->labelsize(12);
          showLightDir->callback((Fl_Callback*)cb_showLightDir);
        } // Fl_Light_Button* showLightDir
        { Fl_Button* o = new Fl_Button(15, 305, 35, 20, "zero X");
          o->tooltip("set x component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(60, 305, 35, 20, "zero Y");
          o->tooltip("set y component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero1);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(105, 305, 35, 20, "zero Z");
          o->tooltip("set z component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero2);
        } // Fl_Button* o
        { illBut = new Fl_Light_Button(15, 450, 100, 25, "Illuminate");
          illBut->tooltip("turn on light");
          illBut->value(1);
          illBut->labelsize(12);
          illBut->callback((Fl_Callback*)cb_illBut);
        } // Fl_Light_Button* illBut
        { ambientslide = new Fl_Value_Slider(150, 330, 25, 95, "Ambient");
          ambientslide->tooltip("ambient lighting component level");
          ambientslide->selection_color((Fl_Color)3);
          ambientslide->labelsize(12);
          ambientslide->value(0.2);
          ambientslide->callback((Fl_Callback*)cb_ambientslide);
        } // Fl_Value_Slider* ambientslide
        { facetshadBut = new Fl_Light_Button(235, 450, 100, 25, "facet shading");
          facetshadBut->tooltip("do not blend colours over surface");
          facetshadBut->labelsize(12);
          facetshadBut->callback((Fl_Callback*)cb_facetshadBut);
        } // Fl_Light_Button* facetshadBut
        { Fl_Light_Button* o = new Fl_Light_Button(240, 305, 60, 20, "fixed");
          o->tooltip("Fixed light - headlamp mode");
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_fixed);
          o->align(Fl_Align(132|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* o
        { specularslide = new Fl_Value_Slider(200, 330, 25, 95, "Specular");
          specularslide->tooltip("specular lighting component level");
          specularslide->selection_color((Fl_Color)6);
          specularslide->labelsize(12);
          specularslide->value(0.65);
          specularslide->callback((Fl_Callback*)cb_specularslide);
        } // Fl_Value_Slider* specularslide
        { diffuseslide = new Fl_Value_Slider(245, 330, 25, 95, "Diffuse");
          diffuseslide->tooltip("specular lighting component level");
          diffuseslide->selection_color((Fl_Color)6);
          diffuseslide->labelsize(12);
          diffuseslide->value(0.65);
          diffuseslide->callback((Fl_Callback*)cb_diffuseslide);
        } // Fl_Value_Slider* diffuseslide
        { backintensityslide = new Fl_Value_Slider(300, 330, 25, 95, "Backside");
          backintensityslide->tooltip("intensity of back side of surface");
          backintensityslide->selection_color((Fl_Color)6);
          backintensityslide->labelsize(12);
          backintensityslide->value(0.5);
          backintensityslide->callback((Fl_Callback*)cb_backintensityslide);
        } // Fl_Value_Slider* backintensityslide
        lightgrp->end();
      } // Fl_Group* lightgrp
      { surfgrp = new Fl_Group(15, 310, 315, 175, "Surface");
        surfgrp->color((Fl_Color)93);
        surfgrp->labelfont(1);
        surfgrp->labelsize(12);
        surfgrp->labelcolor((Fl_Color)90);
        surfgrp->hide();
        { surfvisbut = new Fl_Light_Button(140, 395, 55, 30, "Visible");
          surfvisbut->value(1);
          surfvisbut->selection_color((Fl_Color)2);
          surfvisbut->labelsize(12);
          surfvisbut->callback((Fl_Callback*)cb_surfvisbut);
        } // Fl_Light_Button* surfvisbut
        { surfoutlinebut = new Fl_Light_Button(140, 315, 90, 30, "Outline");
          surfoutlinebut->callback((Fl_Callback*)cb_surfoutlinebut);
        } // Fl_Light_Button* surfoutlinebut
        { surffillbut = new Fl_Light_Button(240, 315, 90, 30, "Filled");
          surffillbut->value(1);
          surffillbut->callback((Fl_Callback*)cb_surffillbut);
        } // Fl_Light_Button* surffillbut
        { Fl_Button* o = new Fl_Button(140, 355, 90, 30, "Outline colour");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Outline);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(240, 355, 90, 30, "Fill colour");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Fill);
        } // Fl_Button* o
        { surflist = new Fl_Check_Browser(20, 320, 110, 160, "apply to");
          surflist->type(3);
          surflist->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Check_Browser* surflist
        { Fl_Group* o = new Fl_Group(140, 445, 185, 35, "Select");
          o->box(FL_ENGRAVED_FRAME);
          o->labelsize(13);
          { Fl_Button* o = new Fl_Button(145, 450, 55, 25, "all");
            o->callback((Fl_Callback*)cb_all);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(205, 450, 55, 25, "invert");
            o->color(FL_FOREGROUND_COLOR);
            o->labelfont(1);
            o->labelsize(12);
            o->labelcolor(FL_BACKGROUND_COLOR);
            o->callback((Fl_Callback*)cb_invert1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(265, 450, 55, 25, "shown");
            o->color((Fl_Color)4);
            o->labelfont(1);
            o->labelsize(12);
            o->labelcolor(FL_BACKGROUND_COLOR);
            o->callback((Fl_Callback*)cb_shown);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Menu_Button* o = new Fl_Menu_Button(265, 395, 65, 30, "Delete");
          o->box(FL_GTK_UP_BOX);
          o->color(FL_RED);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          o->menu(menu_Delete);
        } // Fl_Menu_Button* o
        { Fl_Button* o = new Fl_Button(200, 395, 60, 30, "Rename");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Rename);
        } // Fl_Button* o
        surfgrp->end();
      } // Fl_Group* surfgrp
      { vectorgrp = new Fl_Group(15, 315, 315, 175, "Vectors");
        vectorgrp->color((Fl_Color)75);
        vectorgrp->labelfont(1);
        vectorgrp->labelsize(12);
        vectorgrp->labelcolor((Fl_Color)146);
        vectorgrp->deactivate();
        { veconbut = new Fl_Light_Button(20, 325, 75, 25, "Vectors");
          veconbut->tooltip("display vectors?");
          veconbut->value(1);
          veconbut->callback((Fl_Callback*)cb_veconbut);
        } // Fl_Light_Button* veconbut
        { veclength = new Fl_Roller(100, 325, 150, 25, "Arrow Size");
          veclength->tooltip("scale all vectors");
          veclength->type(1);
          veclength->labelsize(12);
          veclength->labelcolor(FL_BACKGROUND2_COLOR);
          veclength->maximum(100);
          veclength->step(0.01);
          veclength->value(1);
          veclength->callback((Fl_Callback*)cb_veclength);
          veclength->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Roller* veclength
        { veccolor = new Fl_Button(245, 360, 75, 25, "colour");
          veccolor->tooltip("fixed colour");
          veccolor->callback((Fl_Callback*)cb_veccolor);
        } // Fl_Button* veccolor
        { veclengthdeterm = new Fl_Menu_Button(20, 360, 90, 25, "Length");
          veclengthdeterm->tooltip("determinant of vector length");
          veclengthdeterm->menu(menu_veclengthdeterm);
        } // Fl_Menu_Button* veclengthdeterm
        { veccoldeterm = new Fl_Menu_Button(130, 360, 90, 25, "Colour");
          veccoldeterm->tooltip("determinant of vector colour");
          veccoldeterm->menu(menu_veccoldeterm);
        } // Fl_Menu_Button* veccoldeterm
        { vecstride = new Fl_Value_Input(25, 441, 35, 24, "stride");
          vecstride->labelcolor(FL_BACKGROUND2_COLOR);
          vecstride->minimum(1);
          vecstride->maximum(100000);
          vecstride->step(1);
          vecstride->value(1);
          vecstride->callback((Fl_Callback*)cb_vecstride);
          vecstride->align(Fl_Align(FL_ALIGN_BOTTOM));
          vecstride->when(FL_WHEN_ENTER_KEY);
        } // Fl_Value_Input* vecstride
        { vecstoch = new Fl_Check_Button(120, 435, 75, 25, "Stochastic");
          vecstoch->down_box(FL_DOWN_BOX);
          vecstoch->labelcolor(FL_BACKGROUND2_COLOR);
          vecstoch->callback((Fl_Callback*)cb_vecstoch);
        } // Fl_Check_Button* vecstoch
        { vecheads = new Fl_Check_Button(120, 465, 90, 15, "Heads");
          vecheads->down_box(FL_DOWN_BOX);
          vecheads->value(1);
          vecheads->labelcolor(FL_BACKGROUND2_COLOR);
          vecheads->callback((Fl_Callback*)cb_vecheads);
        } // Fl_Check_Button* vecheads
        { vecstart = new MyValueInput(75, 442, 35, 24, "start");
          vecstart->box(FL_DOWN_BOX);
          vecstart->color(FL_BACKGROUND2_COLOR);
          vecstart->selection_color(FL_SELECTION_COLOR);
          vecstart->labeltype(FL_NORMAL_LABEL);
          vecstart->labelfont(0);
          vecstart->labelsize(14);
          vecstart->labelcolor(FL_BACKGROUND2_COLOR);
          vecstart->maximum(10000);
          vecstart->step(1);
          vecstart->callback((Fl_Callback*)cb_vecstart);
          vecstart->align(Fl_Align(FL_ALIGN_BOTTOM));
          vecstart->when(FL_WHEN_CHANGED);
        } // MyValueInput* vecstart
        { veccolgroup = new Fl_Group(20, 390, 305, 100);
          veccolgroup->labelfont(1);
          { veccolmin = new Fl_Value_Input(245, 438, 80, 22, "min:");
            veccolmin->labelsize(12);
            veccolmin->labelcolor(FL_BACKGROUND2_COLOR);
            veccolmin->textsize(12);
            veccolmin->callback((Fl_Callback*)cb_veccolmin);
            veccolmin->when(FL_WHEN_ENTER_KEY);
          } // Fl_Value_Input* veccolmin
          { veccolmax = new Fl_Value_Input(245, 463, 80, 22, "max:");
            veccolmax->labelsize(12);
            veccolmax->labelcolor(FL_BACKGROUND2_COLOR);
            veccolmax->textsize(12);
            veccolmax->callback((Fl_Callback*)cb_veccolmax);
            veccolmax->when(FL_WHEN_ENTER_KEY);
          } // Fl_Value_Input* veccolmax
          { Fl_Choice* o = veccstype = new Fl_Choice(215, 395, 110, 30, "colour scale");
            veccstype->down_box(FL_BORDER_BOX);
            veccstype->labelsize(10);
            veccstype->labelcolor(FL_BACKGROUND2_COLOR);
            veccstype->align(Fl_Align(FL_ALIGN_BOTTOM));
            { Fl_Menu_Item* o = &menu_veccstype[0];
            o->image(image_rainbow);
            }
            { Fl_Menu_Item* o = &menu_veccstype[1];
            o->image(image_blrainbow);
            }
            { Fl_Menu_Item* o = &menu_veccstype[2];
            o->image(image_hot);
            }
            { Fl_Menu_Item* o = &menu_veccstype[3];
            o->image(image_coldhot);
            }
            { Fl_Menu_Item* o = &menu_veccstype[4];
            o->image(image_blwhite);
            }
            { Fl_Menu_Item* o = &menu_veccstype[5];
            o->image(image_cg);
            }
            { Fl_Menu_Item* o = &menu_veccstype[6];
            o->image(image_matlab);
            }
            { Fl_Menu_Item* o = &menu_veccstype[7];
            o->image(image_blred);
            }
            { Fl_Menu_Item* o = &menu_veccstype[8];
            o->image(image_blgreen);
            }
            { Fl_Menu_Item* o = &menu_veccstype[9];
            o->image(image_blblue);
            }
            { Fl_Menu_Item* o = &menu_veccstype[10];
            o->image(image_acid_trip);
            }
            { Fl_Menu_Item* o = &menu_veccstype[11];
            o->image(image_Pink2Green);
            }
            { Fl_Menu_Item* o = &menu_veccstype[12];
            o->image(image_viridis);
            }
            { Fl_Menu_Item* o = &menu_veccstype[13];
            o->image(image_viridis_light);
            }
            veccstype->menu(menu_veccstype);
            o->value(1);
          } // Fl_Choice* veccstype
          { Fl_Button* o = new Fl_Button(125, 395, 75, 30, "optimal");
            o->tooltip("calibrate for current time");
            o->box(FL_ROUND_UP_BOX);
            o->labelsize(12);
            o->callback((Fl_Callback*)cb_optimal);
          } // Fl_Button* o
          { vecautocal = new Fl_Light_Button(20, 400, 80, 25, "auto cs");
            vecautocal->tooltip("calibrate every new time");
            vecautocal->callback((Fl_Callback*)cb_vecautocal);
          } // Fl_Light_Button* vecautocal
          veccolgroup->end();
        } // Fl_Group* veccolgroup
        vectorgrp->end();
      } // Fl_Group* vectorgrp
      { auxgridgrp = new Fl_Group(15, 305, 320, 180, "Aux Grid");
        auxgridgrp->box(FL_UP_BOX);
        auxgridgrp->color(FL_DARK_GREEN);
        auxgridgrp->labelfont(1);
        auxgridgrp->labelsize(12);
        auxgridgrp->labelcolor(FL_DARK_GREEN);
        auxgridgrp->align(Fl_Align(FL_ALIGN_LEFT));
        auxgridgrp->hide();
        auxgridgrp->deactivate();
        { auxgriddispbut = new Fl_Light_Button(25, 310, 35, 20, "On");
          auxgriddispbut->value(1);
          auxgriddispbut->labelsize(10);
          auxgriddispbut->callback((Fl_Callback*)cb_auxgriddispbut);
        } // Fl_Light_Button* auxgriddispbut
        { Fl_Button* o = new Fl_Button(100, 310, 45, 20, "optimal");
          o->tooltip("calibrate for current time");
          o->box(FL_ROUND_UP_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_optimal1);
        } // Fl_Button* o
        { Fl_Choice* o = auxcstype = new Fl_Choice(195, 345, 90, 20, "colour scale");
          auxcstype->down_box(FL_BORDER_BOX);
          auxcstype->labelsize(10);
          auxcstype->align(Fl_Align(FL_ALIGN_BOTTOM));
          { Fl_Menu_Item* o = &menu_auxcstype[0];
          o->image(image_rainbow);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[1];
          o->image(image_blrainbow);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[2];
          o->image(image_hot);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[3];
          o->image(image_coldhot);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[4];
          o->image(image_blwhite);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[5];
          o->image(image_cg);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[6];
          o->image(image_matlab);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[7];
          o->image(image_blred);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[8];
          o->image(image_blgreen);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[9];
          o->image(image_blblue);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[10];
          o->image(image_acid_trip);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[11];
          o->image(image_Pink2Green);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[12];
          o->image(image_viridis);
          }
          { Fl_Menu_Item* o = &menu_auxcstype[13];
          o->image(image_viridis_light);
          }
          auxcstype->menu(menu_auxcstype);
          o->value(1);
        } // Fl_Choice* auxcstype
        { auxmincolval = new Fl_Value_Input(20, 345, 65, 20, "min");
          auxmincolval->labelsize(10);
          auxmincolval->textsize(10);
          auxmincolval->callback((Fl_Callback*)cb_auxmincolval);
          auxmincolval->align(Fl_Align(FL_ALIGN_BOTTOM));
          auxmincolval->when(FL_WHEN_RELEASE);
        } // Fl_Value_Input* auxmincolval
        { auxmaxcolval = new Fl_Value_Input(90, 345, 65, 20, "max");
          auxmaxcolval->labelsize(10);
          auxmaxcolval->textsize(10);
          auxmaxcolval->callback((Fl_Callback*)cb_auxmaxcolval);
          auxmaxcolval->align(Fl_Align(FL_ALIGN_BOTTOM));
          auxmaxcolval->when(FL_WHEN_RELEASE);
        } // Fl_Value_Input* auxmaxcolval
        { auxnumcolev = new Fl_Value_Input(160, 345, 30, 20, "levels");
          auxnumcolev->tooltip("colourmap size");
          auxnumcolev->labelsize(10);
          auxnumcolev->minimum(4);
          auxnumcolev->maximum(252);
          auxnumcolev->step(1);
          auxnumcolev->value(64);
          auxnumcolev->textsize(12);
          auxnumcolev->callback((Fl_Callback*)cb_auxnumcolev);
          auxnumcolev->align(Fl_Align(FL_ALIGN_BOTTOM));
          auxnumcolev->when(FL_WHEN_RELEASE);
        } // Fl_Value_Input* auxnumcolev
        { auxautocalibratebut = new Fl_Light_Button(290, 345, 40, 20, "auto");
          auxautocalibratebut->tooltip("autoscale every timestep");
          auxautocalibratebut->labelsize(10);
          auxautocalibratebut->callback((Fl_Callback*)cb_auxautocalibratebut);
          auxautocalibratebut->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Light_Button* auxautocalibratebut
        { Fl_Group* o = new Fl_Group(65, 375, 255, 30, "Vertex");
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          { auxptcolor = new Fl_Button(65, 380, 55, 20, "color");
            auxptcolor->callback((Fl_Callback*)cb_auxptcolor);
          } // Fl_Button* auxptcolor
          { auxptdat = new Fl_Light_Button(125, 380, 50, 20, "data");
            auxptdat->callback((Fl_Callback*)cb_auxptdat);
          } // Fl_Light_Button* auxptdat
          { auxptsize = new Fl_Value_Input(205, 380, 55, 20, "size:");
            auxptsize->labelsize(12);
            auxptsize->maximum(1e+06);
            auxptsize->step(5);
            auxptsize->value(50);
            auxptsize->callback((Fl_Callback*)cb_auxptsize);
          } // Fl_Value_Input* auxptsize
          { Fl_Choice* o = auxptstyle = new Fl_Choice(260, 380, 50, 20);
            auxptstyle->down_box(FL_BORDER_BOX);
            auxptstyle->labelsize(10);
            auxptstyle->align(Fl_Align(FL_ALIGN_RIGHT));
            auxptstyle->menu(menu_auxptstyle);
            o->value(2);
          } // Fl_Choice* auxptstyle
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(65, 405, 255, 25, "Lines");
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          { auxlinecolor = new Fl_Button(65, 405, 55, 20, "color");
            auxlinecolor->callback((Fl_Callback*)cb_auxlinecolor);
          } // Fl_Button* auxlinecolor
          { auxlinedat = new Fl_Light_Button(125, 405, 50, 20, "data");
            auxlinedat->callback((Fl_Callback*)cb_auxlinedat);
          } // Fl_Light_Button* auxlinedat
          { auxlinewidth = new Fl_Value_Input(205, 405, 55, 20, "size:");
            auxlinewidth->labelsize(12);
            auxlinewidth->maximum(10000);
            auxlinewidth->step(5);
            auxlinewidth->value(100);
            auxlinewidth->callback((Fl_Callback*)cb_auxlinewidth);
          } // Fl_Value_Input* auxlinewidth
          { Fl_Choice* o = auxlinestyle = new Fl_Choice(260, 405, 50, 20);
            auxlinestyle->down_box(FL_BORDER_BOX);
            auxlinestyle->labelsize(12);
            auxlinestyle->align(Fl_Align(FL_ALIGN_RIGHT));
            auxlinestyle->menu(menu_auxlinestyle);
            o->value(2);
          } // Fl_Choice* auxlinestyle
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(65, 430, 265, 20, "Surface");
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          { auxsurfcolor = new Fl_Button(65, 430, 55, 20, "color");
            auxsurfcolor->callback((Fl_Callback*)cb_auxsurfcolor);
          } // Fl_Button* auxsurfcolor
          { auxsurfdat = new Fl_Light_Button(125, 430, 50, 20, "data");
            auxsurfdat->callback((Fl_Callback*)cb_auxsurfdat);
          } // Fl_Light_Button* auxsurfdat
          { auxsurfline = new Fl_Value_Input(205, 430, 55, 20, "size:");
            auxsurfline->labelsize(12);
            auxsurfline->maximum(100000);
            auxsurfline->step(5);
            auxsurfline->value(10);
            auxsurfline->callback((Fl_Callback*)cb_auxsurfline);
          } // Fl_Value_Input* auxsurfline
          { Fl_Choice* o = auxsurfstyle = new Fl_Choice(260, 430, 50, 20);
            auxsurfstyle->down_box(FL_BORDER_BOX);
            auxsurfstyle->align(Fl_Align(FL_ALIGN_RIGHT));
            auxsurfstyle->menu(menu_auxsurfstyle);
            o->value(2);
          } // Fl_Choice* auxsurfstyle
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(65, 454, 245, 22, "VoxEle");
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_LEFT));
          { auxvolcolor = new Fl_Button(65, 455, 55, 20, "color");
            auxvolcolor->callback((Fl_Callback*)cb_auxvolcolor);
          } // Fl_Button* auxvolcolor
          { auxvoldat = new Fl_Light_Button(125, 455, 50, 20, "data");
            auxvoldat->callback((Fl_Callback*)cb_auxvoldat);
          } // Fl_Light_Button* auxvoldat
          { auxvolline = new Fl_Value_Input(205, 455, 55, 20, "size:");
            auxvolline->labelsize(12);
            auxvolline->maximum(10000);
            auxvolline->step(5);
            auxvolline->value(10);
            auxvolline->callback((Fl_Callback*)cb_auxvolline);
          } // Fl_Value_Input* auxvolline
          { Fl_Choice* o = auxvolstyle = new Fl_Choice(260, 455, 50, 20);
            auxvolstyle->down_box(FL_BORDER_BOX);
            auxvolstyle->align(Fl_Align(FL_ALIGN_RIGHT));
            auxvolstyle->menu(menu_auxvolstyle);
            o->value(1);
          } // Fl_Choice* auxvolstyle
          o->end();
        } // Fl_Group* o
        { plotAuxTS = new Fl_Button(305, 310, 25, 20, "Plot");
          plotAuxTS->tooltip("show time series for highlighted point");
          plotAuxTS->labelsize(10);
          plotAuxTS->callback((Fl_Callback*)cb_plotAuxTS);
          plotAuxTS->deactivate();
        } // Fl_Button* plotAuxTS
        { hiAuxVert = new Fl_Light_Button(270, 310, 30, 20, "Hi");
          hiAuxVert->tooltip("turn on highlighting");
          hiAuxVert->labelsize(10);
          hiAuxVert->callback((Fl_Callback*)cb_hiAuxVert);
        } // Fl_Light_Button* hiAuxVert
        { auxhivert = new MyValueInput(145, 310, 45, 19, "Hilight");
          auxhivert->tooltip("vertex to highlight and display time series if present");
          auxhivert->box(FL_DOWN_BOX);
          auxhivert->color(FL_BACKGROUND2_COLOR);
          auxhivert->selection_color(FL_SELECTION_COLOR);
          auxhivert->labeltype(FL_NORMAL_LABEL);
          auxhivert->labelfont(0);
          auxhivert->labelsize(10);
          auxhivert->labelcolor(FL_FOREGROUND_COLOR);
          auxhivert->step(1);
          auxhivert->textsize(10);
          auxhivert->callback((Fl_Callback*)cb_auxhivert);
          auxhivert->align(Fl_Align(FL_ALIGN_BOTTOM));
          auxhivert->when(FL_WHEN_CHANGED);
          auxhivert->deactivate();
        } // MyValueInput* auxhivert
        { auxvertval = new Fl_Value_Output(195, 311, 70, 18, "hi value:");
          auxvertval->tooltip("value of highlighted vertex");
          auxvertval->color((Fl_Color)17);
          auxvertval->selection_color(FL_FOREGROUND_COLOR);
          auxvertval->labelsize(10);
          auxvertval->textsize(10);
          auxvertval->align(Fl_Align(FL_ALIGN_BOTTOM));
        } // Fl_Value_Output* auxvertval
        { Fl_Light_Button* o = new Fl_Light_Button(65, 310, 35, 20, "Clip");
          o->box(FL_THIN_UP_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_Clip);
        } // Fl_Light_Button* o
        auxgridgrp->end();
      } // Fl_Group* auxgridgrp
      tabwidget->end();
    } // Fl_Tabs* tabwidget
    { colorscalegrp = new Fl_Group(10, 490, 330, 60);
      colorscalegrp->box(FL_ENGRAVED_BOX);
      { Fl_Button* o = new Fl_Button(15, 495, 45, 20, "optimal");
        o->tooltip("calibrate for current time");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_optimal2);
      } // Fl_Button* o
      { Fl_Choice* o = cstype = new Fl_Choice(230, 500, 105, 25, "colour scale");
        cstype->down_box(FL_BORDER_BOX);
        cstype->labelsize(10);
        cstype->align(Fl_Align(FL_ALIGN_BOTTOM));
        { Fl_Menu_Item* o = &menu_cstype[0];
        o->image(image_rainbow);
        }
        { Fl_Menu_Item* o = &menu_cstype[1];
        o->image(image_blrainbow);
        }
        { Fl_Menu_Item* o = &menu_cstype[2];
        o->image(image_hot);
        }
        { Fl_Menu_Item* o = &menu_cstype[3];
        o->image(image_coldhot);
        }
        { Fl_Menu_Item* o = &menu_cstype[4];
        o->image(image_blwhite);
        }
        { Fl_Menu_Item* o = &menu_cstype[5];
        o->image(image_cg);
        }
        { Fl_Menu_Item* o = &menu_cstype[6];
        o->image(image_matlab);
        }
        { Fl_Menu_Item* o = &menu_cstype[7];
        o->image(image_blred);
        }
        { Fl_Menu_Item* o = &menu_cstype[8];
        o->image(image_blgreen);
        }
        { Fl_Menu_Item* o = &menu_cstype[9];
        o->image(image_blblue);
        }
        { Fl_Menu_Item* o = &menu_cstype[10];
        o->image(image_acid_trip);
        }
        { Fl_Menu_Item* o = &menu_cstype[11];
        o->image(image_Pink2Green);
        }
        { Fl_Menu_Item* o = &menu_cstype[12];
        o->image(image_viridis);
        }
        { Fl_Menu_Item* o = &menu_cstype[13];
        o->image(image_viridis_light);
        }
        cstype->menu(menu_cstype);
        o->value(1);
      } // Fl_Choice* cstype
      { mincolval = new Fl_Value_Input(65, 500, 65, 25, "min");
        mincolval->labelsize(10);
        mincolval->textsize(12);
        mincolval->callback((Fl_Callback*)cb_mincolval);
        mincolval->align(Fl_Align(FL_ALIGN_BOTTOM));
        mincolval->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* mincolval
      { maxcolval = new Fl_Value_Input(130, 500, 65, 25, "max");
        maxcolval->labelsize(10);
        maxcolval->textsize(12);
        maxcolval->callback((Fl_Callback*)cb_maxcolval);
        maxcolval->align(Fl_Align(FL_ALIGN_BOTTOM));
        maxcolval->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* maxcolval
      { numcolev = new Fl_Value_Input(195, 500, 30, 25, "levels");
        numcolev->tooltip("colourmap size");
        numcolev->labelsize(10);
        numcolev->minimum(4);
        numcolev->maximum(252);
        numcolev->step(1);
        numcolev->value(64);
        numcolev->textsize(12);
        numcolev->callback((Fl_Callback*)cb_numcolev);
        numcolev->align(Fl_Align(FL_ALIGN_BOTTOM));
        numcolev->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* numcolev
      { autocalibratebut = new Fl_Light_Button(15, 520, 45, 15, "auto");
        autocalibratebut->tooltip("autoscale every timestep");
        autocalibratebut->labelsize(10);
        autocalibratebut->callback((Fl_Callback*)cb_autocalibratebut);
        autocalibratebut->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Light_Button* autocalibratebut
      { Fl_Button* o = new Fl_Button(315, 525, 20, 20);
        o->image(image_sync);
        o->callback((Fl_Callback*)cb_32);
      } // Fl_Button* o
      colorscalegrp->end();
    } // Fl_Group* colorscalegrp
    { animate_group = new Fl_Group(10, 555, 330, 85);
      animate_group->box(FL_ENGRAVED_BOX);
      { tmslider = new Myslider(15, 570, 220, 25, "time");
        tmslider->tooltip("time displayed");
        tmslider->box(FL_UP_BOX);
        tmslider->color(FL_BACKGROUND_COLOR);
        tmslider->selection_color(FL_BACKGROUND_COLOR);
        tmslider->labeltype(FL_NORMAL_LABEL);
        tmslider->labelfont(0);
        tmslider->labelsize(14);
        tmslider->labelcolor(FL_FOREGROUND_COLOR);
        tmslider->callback((Fl_Callback*)cb_tmslider);
        tmslider->align(Fl_Align(FL_ALIGN_TOP));
        tmslider->when(FL_WHEN_RELEASE);
      } // Myslider* tmslider
      { Fl_Button* o = new Fl_Button(245, 560, 25, 35, "@>>");
        o->tooltip("start animation");
        o->labelcolor((Fl_Color)71);
        o->callback((Fl_Callback*)cb_33);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 560, 25, 35, "@||");
        o->tooltip("stop animation");
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_34);
      } // Fl_Button* o
      { frameskip = new Fl_Counter(75, 605, 130, 20, "#frames");
        frameskip->tooltip("#frames to  increment");
        frameskip->step(1);
        frameskip->value(1);
        frameskip->callback((Fl_Callback*)cb_frameskip);
        frameskip->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Counter* frameskip
      { animdelay = new Fl_Value_Input(260, 606, 70, 20, "delay:");
        animdelay->tooltip("delay between frames (ms )");
        animdelay->maximum(2000);
        animdelay->step(5);
        animdelay->value(10);
        animdelay->callback((Fl_Callback*)cb_animdelay);
      } // Fl_Value_Input* animdelay
      { tsync_but = new Fl_Button(305, 560, 25, 35);
        tsync_but->image(image_sync);
        tsync_but->callback((Fl_Callback*)cb_tsync_but);
        Fl_Group::current()->resizable(tsync_but);
      } // Fl_Button* tsync_but
      animate_group->end();
    } // Fl_Group* animate_group
    window->end();
  } // Fl_Double_Window* window
  #ifdef USE_HDF5
  hdfreadbut->activate();
  #else
  hdfreadbut->deactivate();
  #endif
  memset( objprops, 0, sizeof(ObjProps*)*maxobject );
}

void Controls::outputwin( TBmeshWin *w ) {
  mwtb = w;
}

colourChoice * Controls::pickcolor(Object_t obj, const char* wintitle, colourChoice *cc) {
  if( !reglist->nchecked() ) return cc;
  
  GLfloat *col;
  
  for( int mi=0; mi<reglist->nitems(); mi++ ) 
   if( reglist->checked(mi+1) ){
       col = mwtb->get_color(VolEle, mi);
   }
  
  if (!cc ) {
       cc = new colourChoice( col, reglist, obj, mwtb );
       cc->window->label(wintitle);
  } else
      cc->window->show();
  
  return cc;
}

void Controls::update_surfGUI( int s ) {
  if( !mwtb->model->numSurf() ) return;
  surfvisbut->value( mwtb->model->surface(s)->visible() );
  surfoutlinebut->value( mwtb->model->surface(s)->outline() );
  surffillbut->value( mwtb->model->surface(s)->filled() );
}

void Controls::update_regionGUI( int r ) {
  visbut->value( mwtb->visibility(r) );
  vertbut->value( mwtb->showobj(Vertex, r) );
  cabbut->value( mwtb->showobj(Cable, r) );
  cnnxbut->value( mwtb->showobj(Cnnx, r) );
}

void Controls::highlight_region() {
  int regnum;
  for( regnum=0; regnum<reglist->nitems(); regnum++ )
    if( reglist->checked(regnum) )
      break;
  regnum--;
  
  int objnum = mwtb->reg_first( regnum, VolEle );
  mwtb->highlight( VolEle, objnum );
  tethi->value( objnum );
  objnum = mwtb->reg_first(regnum, Cnnx );
  mwtb->highlight( Cnnx, objnum );
  cnnxhi->value( objnum );
  objnum = mwtb->reg_first( regnum, Cable );
  mwtb->highlight( Cable, objnum );
  cabhi->value( objnum );
  objnum =0;
  for( int i=0; i<regnum; i++ ) objnum += mwtb->model->surface(i)->num();
  mwtb->highlight( SurfEle, objnum );
  elehi->value( objnum );
  objnum = mwtb->reg_first( regnum, Vertex );
  mwtb->highlight( Vertex, objnum );
  verthi->value( objnum );
}

void Controls::set_rot( char n, int neg, int view ) {
  V3f xaxis(1,0,0);
  V3f yaxis(0,1,0);
  V3f zaxis(0,0,1);
  
  if( n == 'X' ) {
    mwtb->trackball.SetRotation(-M_PI_2*(1-2*neg),yaxis);
    if( !neg )mwtb->trackball.Rotation(-M_PI_2,zaxis);
  } else if( n == 'Y' ) { 
    mwtb->trackball.SetRotation(M_PI_2*(1-2*neg),xaxis);
    if( !neg )mwtb->trackball.Rotation(M_PI_2,zaxis);
  } else {
    mwtb->trackball.SetRotation(M_PI*neg,yaxis);
    if( neg )mwtb->trackball.Rotation(-M_PI_2,zaxis);
  }
  mwtb->trackball.Rotation(-view*M_PI_2,zaxis);
  
  mwtb->redraw();
}

void Controls::set_tet_region( Model *model) {
  for( int i=0; i<model->_numReg; i++ ) {
    char text[256];
    sprintf( text, "%d", (model->region(i))->label() );
    reglist->add( text, 0 );
    reglist->checked(i+1,1);
  }
}

bool * Controls::regselected() {
  bool *sel = new bool[reglist->nitems()];
  for( int i=1; i<=reglist->nitems(); i++ )
    sel[i-1] = reglist->checked(i);
  return sel;
}

void Controls::save_state() {
  char *fn = fl_file_chooser("meshalyzer state file","*.mshz",NULL);
  if( fn==NULL) return;
  string xfn( fn );
  if( xfn.rfind(".mshz") == string::npos ) xfn += ".mshz";
  ofstream mshzf( xfn.c_str() );
  
  mshzf << "TRACKBALL ======" << endl;
  mwtb->trackball.save(mshzf);
  mshzf << "CLIPPING ======" << endl;
  mwtb->cplane->save(mshzf);
  mshzf << "DATA_OPACITY ======" << endl;
  mwtb->dataopac->save(mshzf);
  
  SAVE_WIDGET(mshzf,read_recalibrate);
  SAVE_WIDGET(mshzf,revdraworder);
  SAVE_WIDGET(mshzf,norot);
  SAVE_WIDGET(mshzf,transBgd);
  SAVE_WIDGET(mshzf,brcutNone);
  SAVE_WIDGET(mshzf,brcutPM1);
  SAVE_WIDGET(mshzf,brcut01);
  SAVE_WIDGET(mshzf,brcutPMpi);
  SAVE_WIDGET(mshzf,brcut02pi);
  SAVE_WIDGET(mshzf,vertdisp);
  SAVE_WIDGET(mshzf,cabledisp);
  SAVE_WIDGET(mshzf,cnnxdisp);
  SAVE_WIDGET(mshzf,surfedgedisp);
  SAVE_WIDGET(mshzf,surfdisp);
  SAVE_WIDGET(mshzf,voldisp);
  SAVE_WIDGET(mshzf,draw_axes);
  SAVE_WIDGET(mshzf,dispAsSurf);
  SAVE_WIDGET(mshzf,dispAsVol);
  //region group
  SAVE_WIDGET(mshzf,vertbut);
  SAVE_WIDGET(mshzf,cabbut);
  SAVE_WIDGET(mshzf,cnnxbut);
  //hilighttab
  if( mwtb->timeplotter->graph->n() >= 2 ) {
    mshzf << "HELD_CURVES = ";
    for(int i=2; i<mwtb->timeplotter->graph->n(); i++ ) 
      mshzf << mwtb->timeplotter->graph->id(i) << " ";
    mshzf << endl;
  }
  SAVE_WIDGET(mshzf,hilighton);
  SAVE_WIDGET(mshzf,hitettype);
  SAVE_WIDGET(mshzf,tethi);
  SAVE_WIDGET(mshzf,elehi);
  SAVE_WIDGET(mshzf,verthi);
  SAVE_WIDGET(mshzf,cnnxhi);
  SAVE_WIDGET(mshzf,verthi);
  SAVE_WIDGET(mshzf,cabhi);
  SAVE_WIDGET(mshzf,attachtype);
  //vector tab
  SAVE_WIDGET(mshzf,veconbut);
  SAVE_WIDGET(mshzf,veccstype);
  SAVE_WIDGET(mshzf,veclength);
  SAVE_WIDGET(mshzf,vecautocal);
  SAVE_WIDGET(mshzf,vecstride);
  SAVE_WIDGET(mshzf,vecstoch);
  SAVE_WIDGET(mshzf,vecheads);
  SAVE_WIDGET(mshzf,veclenmag);
  SAVE_WIDGET(mshzf,veclenscalar);
  SAVE_WIDGET(mshzf,veclenfix);
  SAVE_WIDGET(mshzf,veccolmag);
  SAVE_WIDGET(mshzf,veccolscalar);
  SAVE_WIDGET(mshzf,veccolfix);
  SAVE_WIDGET(mshzf,veccolmin);
  SAVE_WIDGET(mshzf,veccolmax);
  if(mwtb->vecdata){
     mshzf << "VEC_FIXED_COLOR = ";
     save_colour( mshzf, mwtb->vecdata->colour() );
     mshzf << endl;
  }
  //light tab
  SAVE_WIDGET(mshzf,lightx);
  SAVE_WIDGET(mshzf,lighty);
  SAVE_WIDGET(mshzf,lightz);
  SAVE_WIDGET(mshzf,ambientslide);
  SAVE_WIDGET(mshzf,specularslide);
  SAVE_WIDGET(mshzf,diffuseslide);
  SAVE_WIDGET(mshzf,backintensityslide);
  SAVE_WIDGET(mshzf,showLightDir);
  SAVE_WIDGET(mshzf,facetshadBut);
  SAVE_WIDGET(mshzf,illBut);
  //surface tab
  SAVE_WIDGET(mshzf,surfvisbut);
  SAVE_WIDGET(mshzf,surfoutlinebut);
  SAVE_WIDGET(mshzf,surffillbut);
  // Aux Grid tab
  SAVE_WIDGET(mshzf,auxgriddispbut);
  SAVE_WIDGET(mshzf,auxcstype);
  SAVE_WIDGET(mshzf,auxmincolval);
  SAVE_WIDGET(mshzf,auxmaxcolval);
  SAVE_WIDGET(mshzf,auxnumcolev);
  SAVE_WIDGET(mshzf,auxautocalibratebut);
  SAVE_WIDGET(mshzf,auxptdat);
  SAVE_WIDGET(mshzf,auxptsize);
  SAVE_WIDGET(mshzf,auxptstyle);
  SAVE_WIDGET(mshzf,auxlinedat);
  SAVE_WIDGET(mshzf,auxlinewidth);
  SAVE_WIDGET(mshzf,auxlinestyle);
  SAVE_WIDGET(mshzf,auxsurfdat);
  SAVE_WIDGET(mshzf,auxsurfline);
  SAVE_WIDGET(mshzf,auxsurfstyle);
  SAVE_WIDGET(mshzf,auxvoldat);
  SAVE_WIDGET(mshzf,auxvolline);
  SAVE_WIDGET(mshzf,auxvolstyle);
  if(mwtb->auxGrid){
    mshzf << "AUX_GRID_COLOURS = 4" << endl;
    save_colour(mshzf, mwtb->auxGrid->color(Vertex) );
    mshzf << " ";
    save_colour(mshzf, mwtb->auxGrid->color(Cnnx) );
    mshzf << " ";
    save_colour(mshzf, mwtb->auxGrid->color(SurfEle) );
    mshzf << " ";
    save_colour(mshzf, mwtb->auxGrid->color(VolEle) );
    mshzf << endl;
  }
  // colour scale
  SAVE_WIDGET(mshzf,autocalibratebut);
  SAVE_WIDGET(mshzf,mincolval);
  SAVE_WIDGET(mshzf,maxcolval);
  SAVE_WIDGET(mshzf,numcolev);
  SAVE_WIDGET(mshzf,cstype);
  // animation
  SAVE_WIDGET(mshzf,tmslider);
  SAVE_WIDGET(mshzf,frameskip);
  SAVE_WIDGET(mshzf,animdelay);
  
  
  mshzf << "SURFACE_COLOURS = " << mwtb->model->numSurf() << endl;
  for( int i=0; i<mwtb->model->numSurf(); i++ ) {
    save_colour( mshzf, mwtb->model->surface(i)->fillcolor() );
    mshzf << " ";
    save_colour( mshzf, mwtb->model->surface(i)->outlinecolor() );
    mshzf << " " << mwtb->model->surface(i)->visible();
    mshzf << " " << mwtb->model->surface(i)->filled();
    mshzf << " " << mwtb->model->surface(i)->outline();
    mshzf << endl;
  }
  
  mshzf << "REGION_SIZE = " << mwtb->model->_numReg << endl;
  for( int i=0; i<mwtb->model->_numReg; i++ ) {
    RRegion *r =  mwtb->model->region(i);
    mshzf << r->size(Vertex) << " ";
    mshzf << r->size(Cable) << " ";
    mshzf << r->size(Cnnx) << endl;
  }
  
  mshzf << "stride =";
  mshzf << " " << mwtb->stride(Vertex);
  mshzf << " " << mwtb->stride(Cable);
  mshzf << " " << mwtb->stride(Cnnx) << endl;
  
  mshzf << "REGION_3D = " << mwtb->model->_numReg << endl;
  for( int i=0; i<mwtb->model->_numReg; i++ ) {
    RRegion *r =  mwtb->model->region(i);
    mshzf << r->threeD(Vertex) << " ";
    mshzf << r->threeD(Cable) << " ";
    mshzf << r->threeD(Cnnx) << endl;
  }
  
  mshzf << "REGION_COLOURS = " << mwtb->model->_numReg << endl;
  for( int i=0; i<mwtb->model->_numReg; i++ ) {
    save_colour( mshzf, mwtb->model->region(i)->get_color(Vertex) );
    mshzf << " " << mwtb->model->region(i)->show(Vertex) << " ";
    save_colour( mshzf, mwtb->model->region(i)->get_color(Cable) );
    mshzf << " " << mwtb->model->region(i)->show(Cable) << " ";
    save_colour( mshzf, mwtb->model->region(i)->get_color(Cnnx) );
    mshzf << " " << mwtb->model->region(i)->show(Cnnx) << " " 
          << mwtb->model->region(i)->visible() << endl; 
  }
  mshzf << "BGD_COLOUR = " << (mwtb->bgd())[1] << endl;
  
  mshzf << "ISOLINE_COLOUR = ";
  save_colour( mshzf, mwtb->isosurfwin ->islColor() );
  mshzf << endl;
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isolineVal0 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isolineVal1 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoNumLines );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isolineThick );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->islDatify );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isolineOn );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoOn0 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoval0 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->opacity0 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoOn1 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoval1 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->opacity1 );
  SAVE_WIDGET( mshzf, mwtb->isosurfwin->isoLineRestrict );
  
  mshzf << "ISOSURF_COLOUR 0 = ";
  save_colour( mshzf, mwtb->isosurfwin->issColor(0) );
  mshzf << endl;
  mshzf << "ISOSURF_COLOUR 1 = ";
  save_colour( mshzf, mwtb->isosurfwin->issColor(1) );
  mshzf << endl;
  
  SAVE_WIDGET( mshzf, mwtb->deadData->minValid );
  SAVE_WIDGET( mshzf, mwtb->deadData->minValidVal );
  SAVE_WIDGET( mshzf, mwtb->deadData->maxValid );
  SAVE_WIDGET( mshzf, mwtb->deadData->maxValidVal );
  SAVE_WIDGET( mshzf, mwtb->deadData->deadopac );
  SAVE_WIDGET( mshzf, mwtb->deadData->showDeadData );
  mshzf << "DEAD_COLOUR = ";
  save_colour( mshzf, mwtb->cs->deadColour() );
  mshzf << endl;
}

void Controls::save_colour( ofstream&ofs, const GLfloat *col ) {
  for( int c=0; c<3; c++ ) ofs << col[c] << " ";
  ofs << col[3];
}

colourChoice * Controls::pick_surf_color(Object_t ot, const char *winlab, colourChoice *cc) {
  int msz = surflist->nitems();
  
  if( !msz || !surflist->nchecked()) return cc;
  
  GLfloat *col;
  
  for( int mi=0; mi<surflist->nitems(); mi++ ) 
   if( surflist->checked(mi+1) ){
       col = mwtb->get_color(ot, mi);
   }
   
  if( !cc ) {
    cc = new colourChoice( col, surflist, ot, mwtb );
    cc->window->label(winlab);
  }
  cc->window->show();
  return cc;
}

void Controls::restore_state(const char* fname) {
  ifstream mshzf;
  if( fname==NULL ) {
    char *fn=fl_file_chooser("Meshalyzer state file", "*.mshz", NULL );
    if( fn==NULL) return;
    mshzf.open(fn);
  } else
    mshzf.open(fname);
  
  int BUFLEN=1024;
  char buf[BUFLEN];
  float r, g, b, a;
  
  while( mshzf.getline( buf, BUFLEN ) ) {
    
    float val;
    char  var[1024];
    if( sscanf( buf, "%s = %f", var, &val ) <1 )
      continue;
    if( !strcmp( var, "HELD_CURVES" ) ) {
      istringstream iss( buf );
      string curve;
      iss >> curve; // read HELD_CURVES =
      iss >> curve;
      while( iss >> curve ) {
        mwtb->highlight(Vertex,atoi(curve.c_str()));
        mwtb->timeplot();
        mwtb->timeplotter->graph->copy_curve(0);
      }
      continue;
    }
    if( !strcmp( var, "TRACKBALL" ) ) {
  	mwtb->trackball.read(mshzf); 
  	continue;
    } 
    if( !strcmp( var, "DATA_OPACITY" ))  {
  	mwtb->dataopac->read(mshzf); 
  	continue;
    } 
    if( !strcmp( var, "CLIPPING" ))  {
  	mwtb->cplane->read(mshzf); 
  	continue;
    } 
    if( !strcmp( var, "SURFACE_COLOURS" ) ) {
      for( int i=0; i<val; i++ ) {
        if( i >= mwtb->model->numSurf() ){
          mshzf.getline(buf, BUFLEN);
          continue;
        }
        mshzf >> r >> g >> b >> a;
        mwtb->model->surface(i)->fillcolor(r,g,b,a);
        mshzf >> r >> g >> b >> a;
        mwtb->model->surface(i)->outlinecolor(r,g,b,a);
        mshzf >> r >> g >> b;
        mwtb->model->surface(i)->visible(int(r));
        mwtb->model->surface(i)->filled(int(g));
        mwtb->model->surface(i)->outline(int(b));
        mshzf.getline(buf, BUFLEN);
  	}
  	continue;
    } 
    if( !strcmp( var, "REGION_COLOURS" ) ) {
      bool  v;
      for( int i=0; i<val; i++ ) {
        if( i >= mwtb->model->_numReg ) {
           mshzf.getline( buf, BUFLEN );
           continue;
        }     
        mshzf >> r >> g >> b >> a >> v;
        mwtb->model->region(i)->set_color(Vertex, r, g, b, a );
        mwtb->model->region(i)->show( Vertex, v );
        mshzf >> r >> g >> b >> a >> v;
        mwtb->model->region(i)->set_color(Cable, r, g, b, a );   
        mwtb->model->region(i)->show( Cable, v );
        mshzf >> r >> g >> b >> a >> v;
        mwtb->model->region(i)->set_color(Cnnx, r, g, b, a ); 
        mwtb->model->region(i)->show( Cnnx, v );
        mshzf >> v;
        mwtb->model->region(i)->visible(v);
        mshzf.getline( buf, BUFLEN );
      }
  	continue;
    }
    if( !strcmp( var, "REGION_3D" ) ) {
      bool  v;
      for( int i=0; i<val; i++ ) {
        if( i >= mwtb->model->_numReg ) {
           mshzf.getline( buf, BUFLEN );
           continue;
        }     
        mshzf >> v;
        mwtb->model->region(i)->threeD( Vertex, v );
        mshzf >> v;
        mwtb->model->region(i)->threeD( Cable, v );
        mshzf >> v;
        mwtb->model->region(i)->threeD( Cnnx, v );
        mshzf.getline( buf, BUFLEN );
      }
      continue;
    } 
    if( !strcmp( var, "REGION_SIZE" ) ) {
      for( int i=0; i<val; i++ ) {
        if( i >= mwtb->model->_numReg ) {
           mshzf.getline( buf, BUFLEN );
        } else {
          float s;
          mshzf >> s;
          mwtb->model->region(i)->size( Vertex, s );
          mshzf >> s;
          mwtb->model->region(i)->size( Cable, s );
          mshzf >> s;
          mwtb->model->region(i)->size( Cnnx, s );
          mshzf.getline( buf,BUFLEN );
        }
      }
     continue;
    } 
    if( !strcmp( var, "stride" ) ) {
      int vs, cbs, cxs;
      sscanf( buf, "%*s = %d %d %d", &vs, &cbs, &cxs );
      mwtb->stride( Vertex, vs );
      mwtb->stride( Cable, cbs );
      mwtb->stride( Cnnx, cxs );
      continue;
    } 
    TEST_MENUVAR( read_recalibrate, var, val, mainbar )  
    TEST_MENUVAR( revdraworder, var, val, mainbar )  
    TEST_MENUVAR( norot, var, val, mainbar )  
    TEST_MENUVAR( transBgd, var, val, mainbar )  
    TEST_MENUVAR( vertdisp, var, val, datadest )
    TEST_MENUVAR( cabledisp, var, val, datadest )
    TEST_MENUVAR( cnnxdisp, var, val, datadest )
    TEST_MENUVAR( surfedgedisp, var, val, datadest )
    TEST_MENUVAR( surfdisp, var, val, datadest )
    TEST_MENUVAR( voldisp, var, val, datadest )
    TEST_RADIO( brcutNone, var, int(val), mainbar )
    TEST_RADIO( brcutPM1, var, int(val), mainbar )
    TEST_RADIO( brcut01, var, int(val), mainbar )
    TEST_RADIO( brcutPMpi, var, int(val), mainbar )
    TEST_RADIO( brcut02pi, var, int(val), mainbar )
    TEST_VAR( draw_axes, var, int(val) )  
    TEST_RADIO( dispAsSurf, var, int(val), dispAsSurf ) 
    TEST_RADIO( dispAsVol, var, int(val), dispAsSurf )
    TEST_VAR( vertbut, var, int(val) )  
    TEST_VAR( cabbut, var, int(val) )  
    TEST_VAR( cnnxbut, var, int(val) )    
    TEST_VAR( hilighton, var, int(val) ) 
    TEST_CHOICE( hitettype, var, int(val) ) 
    TEST_VAR( tethi, var, int(val) ) 
    TEST_VAR( elehi, var, int(val) ) 
    TEST_VAR( verthi, var, int(val) ) 
    TEST_VAR( cnnxhi, var, int(val) ) 
    TEST_VAR( cabhi, var, int(val) ) 
    TEST_CHOICE( attachtype, var, int(val) ) 
    if( mwtb->vecdata != NULL ) {
      if( !strcmp( var, "VEC_FIXED_COLOR" ) ) {
        sscanf( buf, "%*s = %f %f %f %f", &r, &g, &b, &a );;
        mwtb->vecdata->colour(r,g,b,a);;
        continue;
      } 
      TEST_CHOICE( veccstype, var, int(val) )
      TEST_VAR( veconbut, var, int(val) ) 
      TEST_VAR( veclength, var, val ) 
      TEST_VAR( vecautocal, var, int(val) ) 
      TEST_VAR( vecstride, var, int(val) ) 
      TEST_VAR( vecstoch, var, int(val) )
      TEST_VAR( vecheads, var, int(val) ) 
      TEST_VAR( veccolmin, var, val )
      TEST_VAR( veccolmax, var, val )
      TEST_RADIO( veclenmag,    var, int(val), veclengthdeterm ) 
      TEST_RADIO( veclenscalar, var, int(val), veclengthdeterm ) 
      TEST_RADIO( veclenfix,    var, int(val), veclengthdeterm ) 
      TEST_RADIO( veccolmag,    var, int(val), veccoldeterm ) 
      TEST_RADIO( veccolscalar, var, int(val), veccoldeterm ) 
      TEST_RADIO( veccolfix,    var, int(val), veccoldeterm ) 
   } else {
      IGNORE_VAR( VEC_FIXED_DATA, var )
      IGNORE_VAR( veccstype, var )
      IGNORE_VAR( veconbut, var ) 
      IGNORE_VAR( veclength, var ) 
      IGNORE_VAR( vecautocal, var ) 
      IGNORE_VAR( vecstride, var ) 
      IGNORE_VAR( vecstoch, var ) 
      IGNORE_VAR( vecheads, var ) 
      IGNORE_VAR( veccolmin, var ) 
      IGNORE_VAR( veccolmax, var ) 
      IGNORE_VAR( veclenmag, var ) 
      IGNORE_VAR( veclenscalar, var )
      IGNORE_VAR( veclenfix, var )
      IGNORE_VAR( veccolmag, var ) 
      IGNORE_VAR( veccolscalar, var )
      IGNORE_VAR( veccolfix, var )
    }
    TEST_VAR( lightx, var, val ) 
    TEST_VAR( lighty, var, val ) 
    TEST_VAR( lightz, var, val ) 
    TEST_VAR( ambientslide, var, val ) 
    TEST_VAR( specularslide, var, val ) 
    TEST_VAR( diffuseslide, var, val ) 
    TEST_VAR( backintensityslide, var, val ) 
    TEST_VAR( showLightDir, var, int(val) ) 
    TEST_VAR( facetshadBut, var, int(val) ) 
    TEST_VAR( illBut, var, int(val) )  
    TEST_VAR( surfvisbut, var, int(val) ) 
    TEST_VAR( surfoutlinebut, var, int(val) ) 
    TEST_VAR( surffillbut, var, int(val) ) 
    TEST_VAR( autocalibratebut, var, int(val) ) 
    TEST_VAR( mincolval, var, val ) 
    TEST_VAR( maxcolval, var, val ) 
    TEST_VAR( numcolev, var, int(val) ) 
    TEST_CHOICE( cstype, var, int(val) ) 
    TEST_VAR( tmslider, var, int(val) ) 
    TEST_VAR( frameskip, var, int(val) ) 
    TEST_VAR( animdelay, var, int(val) ) 
    if( mwtb->auxGrid ) {
  	TEST_VAR( auxgriddispbut, var, int(val) );
  	TEST_CHOICE( auxcstype, var, int(val) );
  	TEST_VAR( auxmincolval, var, val );
  	TEST_VAR( auxmaxcolval, var, val );
  	TEST_VAR( auxnumcolev, var, int(val) );
  	TEST_VAR( auxautocalibratebut, var, int(val) );
  	TEST_VAR( auxptdat, var, int(val) );
  	TEST_VAR( auxptsize, var, val );
  	TEST_CHOICE( auxptstyle, var, int(val) );
  	TEST_VAR( auxlinedat, var, int(val) );
  	TEST_VAR( auxlinewidth, var, val );
  	TEST_CHOICE( auxlinestyle, var, int(val) );
  	TEST_VAR( auxsurfdat, var, int(val) );
  	TEST_VAR( auxsurfline, var, val );
  	TEST_CHOICE( auxsurfstyle, var, int(val) ); 
  	TEST_VAR( auxvoldat, var, int(val) );
  	TEST_VAR( auxvolline, var, val );
  	TEST_CHOICE( auxvolstyle, var, int(val) ); 
    } else {
  	IGNORE_VAR( auxgriddispbut, var );
  	IGNORE_VAR( auxcstype, var );
  	IGNORE_VAR( auxmincolval, var );
  	IGNORE_VAR( auxmaxcolval, var );
  	IGNORE_VAR( auxnumcolev, var );
  	IGNORE_VAR( auxautocalibratebut, var );
  	IGNORE_VAR( auxptdat, var );
  	IGNORE_VAR( auxptsize, var );
  	IGNORE_VAR( auxptstyle, var );
  	IGNORE_VAR( auxlinedat, var );
  	IGNORE_VAR( auxlinewidth, var );
  	IGNORE_VAR( auxlinestyle, var );
  	IGNORE_VAR( auxsurfdat, var );
  	IGNORE_VAR( auxsurfline, var );
  	IGNORE_VAR( auxsurfstyle, var );
  	IGNORE_VAR( auxvoldat, var );
  	IGNORE_VAR( auxvolline, var );
  	IGNORE_VAR( auxvolstyle, var );
    }
    if( !strcmp( var, "AUX_GRID_COLOURS" ) ) {
      if( mwtb->auxGrid ) {
        float c[4];
        mshzf >> c[0] >> c[1] >> c[2] >> c[3];
        mwtb->auxGrid->color( Vertex, c );
        mshzf >> c[0] >> c[1] >> c[2] >> c[3];
        mwtb->auxGrid->color( Cnnx, c );
        mshzf >> c[0] >> c[1] >> c[2] >> c[3];
        mwtb->auxGrid->color( SurfEle, c );
        mshzf >> c[0] >> c[1] >> c[2] >> c[3];
        mwtb->auxGrid->color( VolEle, c );
        mshzf.getline( buf,BUFLEN );
      }
      continue;
    }
    TEST_VAR( mwtb->isosurfwin->isolineVal0, var, val )
    TEST_VAR( mwtb->isosurfwin->isolineVal1, var, val )
    TEST_VAR( mwtb->isosurfwin->isoNumLines, var, int(val) )
    TEST_VAR( mwtb->isosurfwin->isolineThick, var, int(val) )
    TEST_VAR( mwtb->isosurfwin->islDatify, var, int(val) )
    TEST_VAR( mwtb->isosurfwin->isolineOn, var, int(val) )
    TEST_VAR( mwtb->isosurfwin->isoval0, var, val )
    TEST_VAR( mwtb->isosurfwin->opacity0, var, val )
    TEST_VAR( mwtb->isosurfwin->isoOn0, var, val )
    TEST_VAR( mwtb->isosurfwin->isoval1, var, val )
    TEST_VAR( mwtb->isosurfwin->opacity1, var, val )
    TEST_VAR( mwtb->isosurfwin->isoOn1, var, val )
    TEST_VAR( mwtb->isosurfwin->isoLineRestrict, var, val )
  
    if( !strcmp( var, "ISOLINE_COLOUR" ) ){
      sscanf( buf, "%*s = %f %f %f %f", &r, &g, &b, &a );
      mwtb->isosurfwin->islColor(r,g,b,a);
      continue;
    }
    if( !strcmp( var, "ISOSURF_COLOUR" ) ){
      int s;
      sscanf( buf, "%*s %d = %f %f %f %f", &s, &r, &g, &b, &a );
      mwtb->isosurfwin->issColor(s,r,g,b,a);
      continue;
    }
    
    TEST_VAR( mwtb->deadData->minValid, var, val )
    TEST_VAR( mwtb->deadData->minValidVal, var, val ) 
    TEST_VAR( mwtb->deadData->maxValid, var, val )
    TEST_VAR( mwtb->deadData->maxValidVal, var, val )
    TEST_VAR( mwtb->deadData->deadopac, var, val )
    TEST_VAR( mwtb->deadData->showDeadData, var, val )
    if( !strcmp( var, "DEAD_COLOUR" ) ){
      sscanf( buf, "%*s = %f %f %f %f", &r, &g, &b, &a );
      mwtb->deadData->dead_color->rgb(r,g,b);
      mwtb->deadData->dead_color->do_callback();
      mwtb->deadData->deadApp->do_callback();
      continue;
    }
  
   TEST_VAR( mwtb->deadData->minValid, var, val )
   
    if( !strcmp( "BGD_COLOUR", var )) { mwtb->bgd(val); continue; }
  
    cerr << "Unknown variable specified: " << var << endl;
  }
  mwtb->lights(illBut->value());
}

void Controls::surfselected(vector<int>& lst) {
  lst.clear();
  for( int i=1; i<=surflist->nitems(); i++ )
    if( surflist->checked(i) )
      lst.push_back(i-1);
}

void Controls::refresh_surflist(int state) {
  surflist->clear(); 
  for( int s=0; s<mwtb->model->numSurf(); s++ ) {
      surflist->add(mwtb->model->surface(s)->label().c_str(),state);
    }
    elehi->maximum(mwtb->model->number(SurfEle)-1);
    mwtb->redraw();
    surflist->redraw();
}

void Controls::dispVertVal(double d) {
  vertvalout->value(d);
}

void Controls::write_surfaces(int start ) {
  char *fn;
  string surffn=mwtb->model->file();
  surffn += "surf";
  if( fn=fl_file_chooser( "Save surface file as:", "*.{tri,surf}*", surffn.c_str() )){
    fl_cursor(FL_CURSOR_WAIT );
    ofstream outf(fn);
    for( int i=start; i<mwtb->model->numSurf(); i++ ) 
      mwtb->model->surface(i)->to_file(outf);
    fl_cursor(FL_CURSOR_DEFAULT);
    mwtb->redraw();
  }
}

void Controls::update_vecdata(VecData *vd) {
  if( vd->length_det()==Vector ) {
    veclenmag->setonly();
    veclenmag->do_callback(veclengthdeterm);
  } else if( vd->length_det()==Scalar ) {
    veclenscalar->setonly();
    veclenscalar->do_callback(veclengthdeterm);
  } else {
    veclenfix->setonly();
    veclenfix->do_callback(veclengthdeterm);
  } 
  if( vd->colour_det()==Vector ) {
    veccolmag->setonly();
    veccolmag->do_callback(veccoldeterm);
  } else if( vd->colour_det()==Scalar ) {
    veccolscalar->setonly();
    veccolscalar->do_callback(veccoldeterm);
  } else {
    veccolfix->setonly();
    veccolfix->do_callback(veccoldeterm);
  } 
  
  if( vd->have_scalar() ) {
    veccolscalar->activate();
    veclenscalar->activate();
  } else { 
     veccolscalar->deactivate();
     veclenscalar->deactivate();
  }
  
  if( vd->size()/int(vecstride->value())>MAX_INIT_VECS ) {
    int stride = vd->size()/(MAX_INIT_VECS)+1;
    vecstride->value(stride);
    vd->stride(stride);
    vecstart->maximum(stride-1);
    int start = vecstart->value();
    if( start >= stride ) 
      vecstart->value( start%stride );
  }
}

#include <FL/Fl_JPEG_Image.H>
static const unsigned char idata_meshlogo[] =
{255,216,255,224,0,16,74,70,73,70,0,1,1,1,0,72,0,72,0,0,255,219,0,67,0,5,3,
4,4,4,3,5,4,4,4,5,5,5,6,7,12,8,7,7,7,7,15,11,11,9,12,17,15,18,18,17,15,17,17,
19,22,28,23,19,20,26,21,17,17,24,33,24,26,29,29,31,31,31,19,23,34,36,34,30,36,
28,30,31,30,255,219,0,67,1,5,5,5,7,6,7,14,8,8,14,30,20,17,20,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,255,192,0,17,8,0,139,2,
42,3,1,34,0,2,17,1,3,17,1,255,196,0,29,0,1,0,2,3,1,1,1,1,0,0,0,0,0,0,0,0,0,7,8,
5,6,9,4,1,3,2,255,196,0,94,16,0,1,3,3,2,3,5,1,10,8,7,9,12,11,0,0,1,2,3,4,0,5,
17,6,18,7,19,33,8,20,34,49,65,81,9,21,22,24,35,50,97,113,129,145,55,66,85,118,
148,161,180,212,23,37,51,165,193,210,240,36,52,82,87,98,103,149,209,228,38,39,
53,71,86,114,115,133,177,196,211,225,54,56,83,84,130,132,146,163,178,194,241,
255,196,0,26,1,1,0,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,2,1,255,196,0,50,17,0,
2,2,1,2,3,6,5,3,4,3,0,0,0,0,0,0,1,2,3,17,4,18,33,49,65,5,81,97,113,145,209,19,
34,161,177,193,35,129,240,20,50,225,241,21,82,210,255,218,0,12,3,1,0,2,17,3,17,
0,63,0,185,116,165,40,5,50,61,162,191,149,41,32,100,158,149,26,113,67,139,218,
99,71,192,144,218,102,34,93,205,0,237,97,180,41,97,56,243,42,32,142,131,235,29,
112,51,80,221,124,41,89,147,255,0,62,68,244,105,173,212,75,109,107,63,143,62,
226,68,184,77,139,6,50,228,75,125,166,90,66,73,82,150,172,1,81,126,166,227,198,
132,179,41,246,146,244,185,178,26,66,148,91,140,208,87,144,245,36,248,71,210,69,
87,29,101,196,139,254,173,84,137,119,57,170,76,36,6,214,152,237,56,66,8,222,
158,99,43,81,3,7,151,159,10,71,168,234,107,67,145,170,216,98,20,72,234,152,37,
174,36,71,35,182,150,90,218,128,133,160,161,97,68,140,156,131,232,144,7,159,158,
107,46,90,219,236,127,34,194,245,127,191,69,245,58,58,123,18,154,215,234,189,
207,209,123,191,161,103,111,29,160,222,105,153,11,139,101,102,31,37,198,219,41,
150,248,82,207,48,37,73,80,194,176,82,2,198,79,166,15,178,181,73,92,127,213,198,
90,153,101,251,65,27,219,72,91,91,150,223,143,118,78,121,121,194,66,114,122,
126,48,168,10,199,35,81,106,25,14,55,167,173,109,169,73,0,173,109,161,3,30,204,
173,103,57,250,51,94,219,150,152,226,68,104,110,203,126,59,234,105,164,21,175,
108,196,21,37,35,215,1,93,126,204,213,89,206,74,88,178,220,62,237,216,250,44,26,
21,104,168,140,115,10,147,94,89,251,228,156,32,246,131,213,202,185,34,27,166,
215,181,79,45,164,186,225,45,183,225,25,223,184,183,209,39,211,61,126,138,220,
45,92,127,146,87,29,169,58,120,220,203,177,213,39,54,231,82,112,218,85,180,147,
185,95,119,64,79,78,149,88,45,90,111,136,147,45,177,174,48,11,175,70,146,202,93,
107,19,64,37,36,116,200,39,161,175,226,240,198,173,211,241,123,221,254,204,128,
194,201,104,188,75,106,200,39,170,84,166,206,70,79,248,70,188,198,199,25,98,22,
241,238,221,159,163,62,217,161,162,113,204,170,73,121,99,234,176,92,237,45,199,
93,11,126,83,45,162,76,136,79,172,103,149,37,33,36,15,104,193,234,62,145,82,
116,41,49,229,199,68,152,207,54,235,75,7,106,208,65,7,237,174,115,199,191,65,91,
200,98,232,94,142,119,52,167,152,144,131,149,161,176,2,91,67,160,111,66,113,215,
160,62,158,117,35,112,255,0,137,23,221,48,197,189,86,85,200,148,195,238,58,95,
134,162,54,54,144,114,10,84,174,152,198,122,44,149,12,16,54,128,154,185,29,109,
213,60,205,101,122,63,103,252,226,102,223,216,117,77,126,139,196,188,120,175,
116,93,144,65,242,52,168,251,134,124,82,211,122,197,158,238,137,77,70,185,161,
124,183,99,40,145,133,0,15,66,70,14,115,211,175,92,31,60,84,129,185,61,122,249,
121,214,173,55,66,232,238,131,57,205,70,158,221,60,246,90,176,207,180,165,42,82,
19,229,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,
20,165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,
160,20,165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,
148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,62,215,242,181,0,140,250,87,
244,174,128,154,141,56,251,173,126,9,104,215,19,9,92,203,156,195,201,97,132,43,
229,8,41,81,36,99,168,242,243,244,0,159,74,134,251,149,48,115,100,218,106,37,
168,181,87,30,108,215,184,227,197,136,54,171,116,157,61,167,164,181,38,236,227,
42,91,155,92,45,134,218,73,241,109,87,150,72,4,15,66,126,128,113,86,53,13,234,
60,100,111,150,75,146,65,113,70,87,49,73,118,115,46,17,177,42,72,30,4,0,144,
118,156,99,7,30,117,252,234,123,155,72,100,207,51,12,212,185,178,89,50,218,218,
181,74,41,40,90,83,215,170,18,54,229,62,64,164,39,218,76,121,37,249,55,107,136,
5,74,113,231,148,122,255,0,111,236,60,171,26,49,149,243,118,88,255,0,157,203,
195,249,221,142,214,154,97,165,173,85,82,255,0,47,189,251,116,54,189,33,10,110,
184,212,204,193,90,202,32,70,72,91,225,30,16,211,65,64,109,64,30,89,207,79,60,
117,53,45,232,177,165,231,42,241,103,181,217,91,142,213,186,71,116,124,184,202,
84,93,37,39,39,62,121,250,126,138,209,59,62,71,84,93,71,121,142,172,229,49,81,
156,244,252,113,94,27,61,191,91,221,181,86,170,183,233,137,236,219,161,59,118,
95,123,144,165,97,64,245,232,61,124,171,55,89,31,141,108,235,221,181,69,44,119,
113,124,223,127,129,122,185,58,163,23,140,182,218,54,14,19,106,61,55,97,211,110,
194,153,114,102,44,199,110,47,164,50,1,83,138,1,120,71,133,32,147,91,143,15,224,
221,45,220,62,129,18,246,135,83,61,168,235,15,7,23,185,99,37,68,100,245,4,17,90,
159,2,52,149,186,29,173,251,252,128,37,79,114,83,173,37,231,0,86,196,54,172,116,
246,18,65,57,250,107,105,225,213,198,109,223,135,144,238,115,92,230,201,144,211,
171,89,35,0,156,171,3,30,192,61,62,170,163,175,112,223,103,195,255,0,178,203,
125,248,124,188,9,180,155,182,195,127,7,135,133,233,207,196,243,65,83,140,240,
101,167,27,81,109,104,177,2,149,36,144,160,67,89,7,239,173,126,229,127,180,92,
248,36,184,205,221,162,200,152,139,59,1,212,41,225,204,230,37,40,10,232,124,200,
59,190,154,216,155,78,222,13,109,0,244,177,224,103,216,26,197,86,27,116,80,246,
194,7,92,117,32,122,85,206,207,210,199,80,231,41,60,109,158,74,250,187,231,83,
132,98,179,152,150,87,95,61,100,143,103,176,187,123,178,51,114,18,222,102,38,74,
182,169,176,182,199,139,35,206,163,142,32,66,119,65,234,116,198,138,119,90,102,
167,115,13,61,133,140,12,2,149,3,236,62,71,250,107,120,226,241,255,0,115,186,75,
161,31,198,145,58,99,252,154,213,251,81,146,46,118,3,254,67,191,103,136,127,174,
157,154,222,250,224,249,75,118,87,151,35,214,182,91,99,57,46,113,199,212,249,96,
191,54,182,187,253,189,217,44,75,132,206,232,200,109,196,13,138,221,185,194,190,
128,184,158,160,140,146,64,73,242,192,38,218,240,55,138,144,181,12,79,120,111,
23,24,254,253,199,95,44,108,89,90,30,24,24,41,89,249,221,114,55,28,117,192,235,
235,64,173,51,222,134,242,29,105,197,33,105,57,74,135,161,246,255,0,71,218,126,
170,149,244,189,209,169,54,212,93,226,220,37,49,58,27,133,49,32,199,111,114,57,
139,57,41,59,70,118,172,132,140,40,129,146,162,14,112,6,164,227,61,52,254,37,
127,239,193,251,244,51,239,166,189,101,127,14,127,235,199,221,117,58,10,130,8,
56,175,181,160,240,87,92,35,88,105,129,222,82,182,174,144,182,183,49,149,244,
113,10,199,227,3,215,61,14,122,96,249,142,134,183,224,114,1,30,181,181,77,177,
186,10,113,234,113,154,138,37,167,177,215,62,104,249,74,82,165,33,20,168,231,
142,28,100,210,60,32,131,108,145,169,219,185,201,118,230,235,136,141,30,3,9,113,
197,6,192,43,89,43,82,82,18,55,32,124,236,146,177,128,64,81,17,103,199,87,133,
159,144,53,159,232,113,191,120,160,44,205,42,179,124,117,120,89,249,3,89,254,
135,27,247,138,158,120,117,171,236,218,247,69,91,53,118,159,91,202,183,92,90,43,
104,60,222,199,16,82,162,133,161,67,252,36,173,42,73,193,32,145,144,72,193,32,
108,20,165,40,5,41,80,255,0,25,123,69,112,243,133,186,133,173,61,121,55,59,157,
209,77,115,95,143,107,105,183,85,20,28,20,7,74,220,64,74,148,14,66,65,39,24,36,
0,164,149,1,48,82,171,55,199,87,133,159,144,53,159,232,113,191,120,167,199,87,
133,159,144,53,159,232,113,191,120,160,44,205,41,74,1,74,82,128,82,148,160,20,
165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,
20,165,40,5,41,74,1,74,142,123,66,241,82,47,8,52,19,122,158,69,157,235,187,175,
206,110,20,120,205,188,25,74,150,164,173,100,173,100,43,106,66,27,95,146,84,73,
218,48,1,36,87,159,143,55,249,174,254,127,255,0,103,160,46,101,42,153,252,121,
191,205,119,243,255,0,251,61,62,60,223,230,187,249,255,0,253,158,128,185,148,
170,219,192,174,213,81,120,151,196,152,58,46,70,137,122,204,236,246,158,49,228,
183,114,18,83,189,182,212,225,74,210,91,70,18,80,133,248,129,39,59,70,48,73,22,
74,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,63,25,210,153,135,
17,217,50,22,150,217,105,5,74,81,56,192,3,173,81,78,52,234,249,26,215,136,82,
28,68,178,220,40,164,132,184,218,188,40,0,0,165,103,232,242,31,78,125,181,103,
187,79,95,29,176,240,162,99,236,185,181,215,222,75,8,199,158,84,20,71,235,2,168,
196,210,166,108,82,37,243,15,202,186,25,3,252,36,145,184,231,234,194,15,219,88,
250,198,237,183,111,69,203,205,251,47,187,58,190,195,165,87,76,174,235,46,31,
178,247,127,99,23,170,46,34,108,213,114,128,67,13,128,219,72,7,162,16,156,132,
167,238,234,126,156,159,94,159,150,143,10,94,162,139,132,146,2,149,158,158,94,
19,88,225,151,73,64,234,181,30,159,93,102,172,8,152,136,115,19,22,58,203,237,
167,161,3,174,79,78,159,125,125,154,80,175,106,53,40,204,174,82,238,227,232,75,
60,43,12,13,107,116,13,141,165,113,19,212,140,110,33,96,244,246,215,162,219,46,
215,160,211,170,110,87,91,221,181,79,77,152,228,200,241,91,124,23,85,128,118,39,
111,158,73,250,48,62,154,143,181,60,89,113,52,156,57,238,201,145,18,98,81,140,
182,178,149,18,71,145,35,173,71,208,109,234,145,115,140,153,11,43,46,186,144,74,
143,82,9,172,170,244,49,212,238,155,151,7,132,215,126,223,18,206,167,85,56,77,
40,67,139,226,188,50,74,124,49,226,116,91,70,158,22,185,214,123,131,239,247,
135,94,109,76,12,133,5,171,39,32,251,58,214,106,23,17,47,79,50,228,91,118,144,
109,184,137,10,74,54,5,4,182,146,49,142,131,25,251,171,247,211,86,182,34,200,
110,24,140,128,86,209,41,240,245,0,127,111,58,201,217,46,54,215,227,202,183,192,
65,194,28,72,43,72,232,162,125,7,217,235,84,181,83,161,206,82,141,121,207,30,
111,30,101,200,233,231,76,99,9,217,220,185,26,186,245,141,233,157,43,240,113,
122,116,41,163,8,197,15,37,74,11,72,219,140,158,159,170,180,41,80,216,178,88,90,
97,103,251,165,244,5,20,168,225,67,34,166,39,45,192,201,91,251,188,25,37,105,
35,250,70,64,251,106,24,215,18,147,47,83,74,113,179,242,104,81,109,7,211,9,233,
90,29,157,56,89,60,65,97,115,126,100,58,218,227,76,84,179,151,203,200,152,181,
150,184,210,113,244,237,162,67,230,223,125,101,185,13,7,89,105,228,151,88,41,79,
69,132,249,140,40,1,215,207,219,81,215,29,117,77,159,84,61,100,126,209,37,79,
134,91,95,52,41,181,37,72,36,140,3,159,170,181,221,53,166,213,123,125,74,234,27,
10,244,29,73,175,230,247,101,126,45,249,203,123,48,156,82,219,194,91,74,18,58,
229,57,169,180,186,45,62,158,213,137,55,40,231,175,121,71,81,45,77,181,55,36,
148,101,143,161,231,182,69,91,140,185,33,72,37,182,135,83,233,159,101,100,116,
189,207,185,205,73,116,2,203,158,7,19,159,52,43,231,15,212,8,62,132,10,217,166,
217,149,105,209,93,213,196,109,127,151,204,116,122,133,31,67,247,10,143,153,86,
54,144,79,65,86,171,156,117,10,79,161,246,218,221,27,51,213,100,176,221,159,53,
96,209,156,71,217,38,78,97,92,182,161,78,45,93,22,156,146,149,126,191,254,161,
143,74,187,209,150,151,35,161,196,169,42,74,147,144,164,156,130,61,163,232,174,
100,65,148,227,214,184,197,61,21,17,220,5,250,141,222,36,143,176,165,71,239,171,
241,217,255,0,82,157,73,195,75,124,133,47,115,204,160,54,188,249,251,127,214,62,
202,245,163,177,215,110,201,114,151,221,123,175,177,141,219,154,101,58,163,124,
121,174,15,201,242,244,127,114,66,165,41,90,231,46,97,117,54,147,210,218,163,
187,252,38,211,86,107,223,118,221,221,253,240,130,212,142,86,236,110,219,189,39,
110,118,167,56,243,192,246,85,14,237,237,167,116,110,149,226,93,162,215,165,116,
164,43,35,210,45,162,116,215,97,168,161,167,247,172,180,218,18,192,240,55,176,
48,162,74,0,220,92,36,140,140,158,133,215,51,184,219,254,249,93,175,110,246,
159,248,43,223,29,72,205,139,153,252,183,47,150,182,225,243,113,225,206,118,111,
219,145,140,227,62,180,4,51,93,17,247,63,47,114,174,189,159,211,6,67,108,165,
171,53,222,76,40,229,176,66,148,133,4,72,37,121,39,42,222,250,199,76,12,4,244,
206,73,171,93,184,98,74,141,218,95,82,189,34,51,204,181,41,168,111,71,91,141,
148,165,228,8,173,32,169,4,252,228,239,66,211,145,211,41,80,243,6,165,255,0,115,
74,237,255,0,166,246,39,174,127,251,156,184,208,86,255,0,253,42,30,117,13,147,
255,0,64,149,40,15,253,152,39,230,208,23,50,148,175,194,124,184,176,32,191,58,
116,150,98,196,140,210,158,125,247,156,8,109,164,36,101,74,82,143,68,164,0,73,
39,160,2,128,209,184,255,0,196,168,28,43,225,164,237,77,36,111,154,188,197,181,
178,89,83,137,122,98,144,162,218,86,1,24,64,218,84,163,184,120,82,64,202,138,65,
229,222,166,147,121,186,93,158,212,55,196,188,169,119,167,93,184,42,67,140,242,
211,36,173,213,133,184,128,0,73,79,49,46,15,8,192,41,80,233,140,85,134,212,211,
110,189,170,187,75,71,179,91,23,202,210,150,141,201,66,209,37,72,219,110,67,192,
59,41,41,113,61,30,119,114,0,1,190,153,105,42,4,33,75,168,203,180,253,198,4,
206,53,94,237,182,116,205,102,207,96,229,88,173,241,164,186,165,247,102,161,182,
150,10,17,149,40,236,230,33,197,14,185,59,202,143,137,70,128,118,96,208,176,56,
137,198,171,38,156,188,66,155,42,206,121,178,110,2,49,82,118,180,219,106,80,222,
176,50,132,41,192,219,100,244,62,48,1,10,32,215,70,63,130,126,22,127,139,77,25,
254,130,141,253,74,171,94,230,198,153,230,95,53,110,177,121,169,168,238,241,153,
182,70,115,110,35,187,204,87,53,225,146,58,173,60,166,58,3,208,57,212,120,146,
69,216,160,20,165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,42,185,241,227,
181,69,171,134,122,238,78,142,137,163,230,222,167,193,217,223,92,118,98,98,180,
157,237,54,235,124,178,18,225,95,133,195,156,132,96,142,155,179,145,31,252,121,
191,205,119,243,255,0,251,61,1,115,41,88,93,9,125,248,81,162,44,58,155,186,247,
79,125,237,177,231,119,126,102,254,87,53,164,175,102,236,13,216,221,140,224,
103,30,66,179,84,2,148,165,0,165,41,64,41,74,80,28,244,225,63,104,238,51,223,56,
167,164,172,151,77,101,222,32,92,47,112,226,202,107,222,200,137,230,52,227,232,
74,211,148,180,8,202,73,25,4,31,101,116,46,185,55,192,175,195,126,131,252,228,
183,126,210,221,117,146,128,82,148,160,20,165,40,8,255,0,143,252,53,129,197,78,
26,78,211,50,78,201,168,204,171,91,197,229,54,150,102,37,10,13,169,100,3,148,
29,197,42,27,79,133,68,140,40,36,142,103,89,35,192,210,124,75,102,6,188,177,
119,248,86,187,146,162,222,173,193,213,110,41,66,203,111,37,10,105,196,101,105,
194,138,72,88,73,82,70,114,156,131,215,26,170,125,189,56,58,221,243,79,43,137,
250,122,27,40,186,90,154,254,57,67,76,44,187,54,63,133,41,116,237,200,220,200,
201,36,143,228,242,74,128,109,41,32,111,54,46,206,61,158,239,150,56,23,187,94,
141,239,16,46,17,155,149,21,223,124,231,167,152,211,137,10,66,176,167,65,25,73,
7,4,3,237,175,111,197,115,129,95,242,27,249,218,111,254,53,64,221,129,184,196,
221,170,114,184,89,168,230,50,204,41,142,169,251,44,137,15,175,41,144,162,144,
98,36,28,164,37,126,37,164,120,124,123,135,137,78,36,11,191,64,115,59,177,55,
254,179,154,71,255,0,157,253,137,250,233,141,107,240,244,70,139,133,168,85,168,
225,233,13,63,26,244,167,92,121,87,22,173,172,162,73,91,153,11,81,116,39,118,
229,110,86,78,114,119,28,249,214,193,64,41,94,43,221,218,213,99,181,189,116,189,
220,225,91,32,49,183,155,42,99,233,101,166,247,40,36,110,90,136,3,42,32,12,159,
50,5,64,218,143,182,23,7,237,83,145,30,10,181,5,249,165,52,22,100,64,183,132,
54,147,146,54,16,250,219,86,225,128,122,36,140,40,117,206,64,2,195,82,160,13,
27,218,231,132,122,138,248,221,174,67,151,157,63,205,194,91,149,117,140,218,35,
149,149,37,33,37,109,184,189,159,59,59,150,18,128,18,73,80,233,153,226,4,184,
179,224,177,58,12,150,101,68,146,210,94,97,246,92,11,109,212,40,101,42,74,135,
69,36,130,8,35,161,6,128,253,233,74,80,10,82,148,2,148,165,1,90,187,112,77,30,
242,217,45,193,71,9,144,94,35,62,121,74,147,253,21,84,245,130,185,81,45,209,115,
142,91,27,212,62,149,146,127,213,247,85,135,237,174,250,149,170,45,177,242,118,
134,189,191,64,63,211,85,235,83,36,61,168,208,202,190,104,75,96,123,62,96,172,
56,203,117,210,147,239,127,79,148,238,52,117,109,210,87,5,213,47,175,19,91,117,
151,26,67,110,3,181,68,228,84,197,195,233,76,93,237,241,166,16,2,227,130,31,72,
243,56,30,117,24,73,180,220,164,75,125,70,59,133,150,134,65,30,95,101,72,156,21,
131,34,222,227,130,90,118,137,105,39,97,244,197,85,237,73,70,90,119,36,248,163,
75,66,172,133,207,106,120,51,154,139,78,53,168,35,74,114,82,9,49,27,46,199,72,
56,220,176,9,235,250,170,27,136,195,241,245,68,54,86,141,238,119,134,201,1,62,
99,35,160,171,41,114,142,196,11,107,69,215,146,194,37,58,27,220,179,128,50,125,
190,157,51,231,211,0,212,63,170,159,182,124,50,76,155,52,134,93,33,1,148,186,
148,252,154,8,86,50,147,248,196,12,117,30,103,53,155,217,26,217,79,116,121,172,
112,240,61,107,254,27,196,250,155,75,140,203,184,75,84,105,183,54,237,108,45,
178,75,79,2,150,214,70,49,185,120,253,89,197,126,58,113,148,219,20,233,121,137,
15,40,37,89,144,194,55,180,9,232,73,94,112,19,253,21,242,29,134,228,245,180,76,
151,61,50,124,57,9,145,146,15,235,233,89,148,106,155,93,246,212,237,153,54,217,
81,157,117,149,176,190,75,59,209,146,49,243,135,144,242,243,168,173,158,35,178,
17,204,122,181,195,4,77,206,114,83,124,23,53,158,243,94,129,105,123,81,94,36,
59,57,124,228,165,213,37,164,37,89,109,180,131,140,15,79,182,191,185,22,9,186,
98,61,233,82,244,186,37,179,48,236,135,33,152,161,226,202,60,89,57,31,53,88,
192,234,50,8,39,53,250,233,103,231,199,143,113,182,160,38,45,196,33,206,73,218,
54,133,227,204,127,205,61,49,89,75,23,17,238,186,118,245,6,207,118,125,139,164,
23,10,99,115,54,252,163,110,129,181,68,43,160,90,115,158,164,103,21,106,86,106,
106,148,158,157,41,37,195,25,199,14,121,69,93,125,208,149,80,202,226,248,231,
220,143,180,252,203,174,157,140,227,130,218,91,140,234,202,182,186,8,82,70,124,
255,0,167,30,202,244,189,112,186,173,246,166,64,185,186,165,201,232,207,117,27,
115,159,65,235,233,235,91,239,26,38,197,145,111,73,138,218,82,183,240,50,148,
117,244,235,208,84,125,96,149,239,69,193,50,214,202,149,29,73,29,66,84,118,125,
41,200,233,159,162,164,162,239,234,42,119,236,195,125,9,244,202,213,21,29,205,
163,222,210,111,110,71,146,205,233,178,176,164,28,56,181,142,98,122,121,43,21,
24,62,158,92,133,167,166,2,136,21,188,107,157,83,29,231,28,143,107,81,81,116,
101,74,35,24,173,12,245,243,57,63,77,106,104,161,37,23,41,44,103,161,239,180,45,
132,156,97,23,156,117,54,157,30,178,228,91,140,92,244,83,33,192,63,202,65,7,254,
205,213,105,59,17,92,92,117,155,197,169,74,59,91,72,115,31,106,127,172,170,170,
154,29,95,198,219,15,146,218,112,99,219,224,85,88,238,195,206,17,173,175,141,31,
35,111,7,237,230,38,190,202,24,189,121,167,235,192,206,213,241,209,216,188,63,
37,186,165,41,91,71,18,97,117,221,247,224,190,136,191,106,110,235,222,253,232,
182,200,157,221,249,155,57,188,166,148,189,155,176,118,231,110,51,131,140,249,
26,160,61,129,108,94,251,246,134,137,112,239,92,159,121,45,178,167,108,229,238,
231,110,72,143,179,57,27,127,190,55,103,175,204,198,58,228,89,158,223,87,223,
122,59,60,203,183,247,94,119,191,119,40,176,119,243,54,242,118,168,200,223,140,
29,223,222,251,113,211,231,231,61,48,116,207,115,98,197,221,244,70,173,212,221,
235,119,127,185,51,7,187,242,241,203,238,237,111,223,187,61,119,119,156,99,3,27,
60,206,122,1,163,123,164,150,73,76,113,23,75,234,53,184,201,137,58,208,168,77,
32,19,204,11,97,229,45,100,140,99,105,18,81,140,18,114,21,144,48,51,172,251,
159,151,184,182,174,208,9,131,33,183,148,237,230,209,38,20,114,216,5,41,90,74,
36,18,188,145,132,236,97,99,166,78,74,122,99,36,76,190,233,37,146,43,252,58,
210,250,141,110,60,37,193,187,170,19,72,4,114,202,31,101,75,89,35,25,220,12,100,
99,4,12,21,100,28,140,86,14,203,23,223,131,189,161,180,85,195,186,247,174,109,
201,48,118,115,54,99,188,165,81,247,231,7,230,243,119,99,215,110,50,51,144,7,82,
234,166,246,234,226,188,246,123,183,7,116,114,230,185,120,186,114,205,204,193,
90,86,181,180,230,228,162,16,66,114,189,238,18,149,20,248,73,65,64,241,165,210,
4,255,0,198,142,33,90,184,95,195,203,134,174,186,53,222,121,27,91,139,13,47,
37,181,203,125,103,8,109,37,95,106,148,64,81,8,74,212,18,118,226,171,7,98,62,
25,74,214,58,170,227,198,237,110,211,51,148,228,231,156,183,162,68,82,146,244,
210,176,183,38,164,0,150,246,165,69,105,78,2,128,94,226,54,41,164,228,9,155,128,
186,14,223,192,78,5,220,46,183,134,94,122,232,32,174,243,126,45,180,209,121,37,
182,119,152,200,32,225,73,108,5,37,57,89,5,74,90,129,72,94,7,54,231,203,149,62,
115,243,167,73,122,84,185,46,169,231,223,121,194,183,29,90,142,84,165,40,245,82,
137,36,146,122,146,107,163,189,185,181,55,193,222,207,55,88,237,187,53,153,55,
185,44,91,24,114,50,182,227,114,185,174,5,156,131,177,77,52,234,8,25,206,240,8,
193,36,115,138,4,73,83,231,49,6,12,103,165,75,146,234,89,97,134,91,43,113,213,
168,225,41,74,71,85,40,146,0,3,169,38,128,232,239,97,157,51,240,119,179,205,170,
67,141,77,102,77,238,75,247,55,219,146,157,184,220,174,83,101,3,0,236,83,77,52,
176,78,115,188,144,112,64,19,157,99,52,157,146,46,154,210,214,157,57,5,199,156,
137,106,130,204,38,22,241,5,197,33,164,4,36,168,128,1,86,18,51,128,6,125,5,100,
232,5,43,82,226,183,16,244,191,12,180,177,212,122,174,83,204,68,83,188,134,16,
203,10,117,199,222,216,181,165,164,128,48,20,160,218,176,84,82,156,249,168,85,
20,213,156,124,227,87,24,53,124,61,59,164,36,77,178,247,185,59,96,91,44,78,169,
151,84,65,89,5,217,0,133,171,8,87,140,146,134,176,141,229,41,193,32,14,140,82,
169,6,149,236,71,121,157,167,161,76,212,58,229,155,53,209,230,183,200,128,213,
179,189,38,57,62,72,46,135,146,20,160,49,156,12,3,144,10,128,10,49,205,238,119,
21,123,45,241,45,237,57,108,212,155,225,47,108,214,89,39,153,10,227,29,75,0,56,
182,9,60,181,171,147,203,81,24,88,218,66,86,82,66,136,29,37,165,99,52,157,238,
46,165,210,214,157,71,5,183,155,137,117,130,204,214,16,240,1,196,161,212,5,164,
40,2,64,86,20,51,130,70,125,77,100,232,5,42,182,241,91,181,254,131,210,211,141,
187,74,65,123,88,203,105,221,143,186,203,253,222,34,0,43,74,130,94,41,81,113,64,
165,36,20,160,161,73,94,66,206,49,81,202,123,80,113,242,223,107,141,169,175,124,
43,132,157,53,242,47,187,48,89,231,48,211,140,45,73,193,68,133,56,164,39,120,
80,9,89,10,25,80,232,175,34,5,216,165,65,157,157,251,72,105,206,44,221,36,216,
100,219,126,14,95,211,151,34,194,118,88,125,51,26,9,202,139,110,108,70,86,156,
18,81,140,237,27,129,80,11,217,57,208,16,159,107,75,46,139,181,112,111,89,235,
41,154,27,79,220,175,75,130,152,201,156,236,22,123,202,86,241,68,100,58,29,40,
42,220,222,244,168,117,207,128,0,71,152,231,13,138,215,62,249,124,129,100,181,
177,222,39,220,36,183,22,43,91,210,158,99,174,40,37,9,202,136,3,42,32,100,144,
61,181,118,61,210,123,239,119,209,26,75,76,247,93,221,254,228,244,238,241,204,
199,47,187,181,179,102,220,117,221,222,115,156,140,108,242,57,233,0,118,46,210,
223,10,59,67,105,254,116,30,247,10,209,204,186,73,249,93,156,174,82,126,69,206,
132,21,97,245,49,225,25,206,122,130,157,212,7,73,44,86,184,22,59,28,11,37,173,
142,239,2,223,25,184,177,90,222,165,114,218,109,33,40,78,84,73,56,72,3,36,147,
237,175,109,106,83,248,155,195,104,19,159,131,59,136,58,78,44,184,206,169,151,
216,122,243,29,14,52,180,156,41,42,73,94,82,160,65,4,30,160,138,201,233,157,89,
165,181,71,120,248,51,169,108,215,190,237,183,188,123,223,57,169,28,173,217,219,
187,98,142,220,237,86,51,231,131,236,160,51,84,165,84,14,213,221,165,245,150,
141,215,119,94,31,104,232,48,173,111,64,228,243,110,206,129,33,213,243,26,101,
225,203,109,73,216,140,5,41,7,112,115,32,228,109,34,128,183,244,174,112,233,200,
253,171,117,220,229,206,180,78,226,50,147,53,163,61,15,174,224,245,190,35,136,
89,4,22,148,181,182,206,211,188,20,161,29,54,252,209,180,116,104,94,208,220,
102,225,102,161,114,211,170,94,185,221,219,67,169,92,203,86,164,14,247,148,5,
114,213,148,184,231,202,182,162,128,54,131,185,3,121,86,194,78,104,14,143,82,
181,254,29,106,251,54,189,209,86,205,93,167,214,242,173,215,22,138,218,15,55,
177,196,20,168,161,104,80,255,0,9,43,74,146,112,72,36,100,18,48,78,193,64,114,
111,129,95,134,253,7,249,201,110,253,165,186,232,247,105,45,6,231,17,248,55,125,
211,112,217,101,203,167,40,74,182,151,26,66,148,36,52,66,210,148,21,20,132,41,
96,41,173,249,24,14,43,57,25,7,156,60,10,252,55,232,63,206,75,119,237,45,215,
89,40,14,99,246,65,226,4,94,30,113,178,221,58,228,166,91,181,221,90,85,170,115,
238,144,4,116,58,164,20,187,185,74,74,82,148,184,134,202,148,172,128,141,253,9,
197,116,226,185,181,219,115,66,189,163,248,229,114,185,51,11,147,105,212,95,198,
81,28,73,113,73,83,170,199,120,73,82,134,55,243,119,44,165,36,132,165,214,252,
129,0,93,142,204,188,69,254,19,184,67,107,191,201,115,125,218,62,96,221,124,56,
204,166,194,119,47,162,18,159,26,84,135,48,145,181,60,205,185,202,77,1,179,241,
83,88,192,225,255,0,15,47,90,198,226,142,99,54,200,197,196,181,149,14,115,164,
132,180,214,82,149,20,239,113,72,78,236,16,157,217,61,1,174,115,246,101,209,211,
248,161,199,171,91,87,21,251,224,203,18,77,230,244,236,208,153,28,246,155,113,
42,88,112,56,160,92,230,184,164,54,175,156,126,84,168,130,1,169,255,0,221,28,
215,79,69,181,216,56,121,2,110,206,251,186,229,115,105,33,196,169,77,37,91,99,
164,144,66,20,133,44,58,162,147,146,20,203,103,195,129,156,215,185,221,161,89,
181,240,242,227,175,38,66,219,62,247,37,81,161,188,178,218,191,184,217,56,59,8,
27,209,185,224,224,80,39,197,201,108,227,160,36,11,75,74,215,245,254,180,210,
250,11,79,47,80,106,235,195,54,171,114,93,75,33,215,18,165,169,107,87,146,80,
132,2,165,171,161,56,72,36,4,168,158,128,144,208,26,211,75,235,221,60,141,65,
164,111,12,221,109,202,117,76,151,91,74,144,164,45,62,105,90,22,2,144,174,160,
225,64,18,20,146,58,16,72,28,244,237,77,194,201,92,26,226,140,121,218,113,111,
65,177,92,29,239,150,23,218,152,84,252,101,183,176,173,27,186,45,42,109,106,73,
74,186,157,165,30,37,40,43,23,47,178,183,24,34,241,103,65,3,35,156,157,71,102,
105,150,47,41,113,0,37,213,169,36,38,66,10,82,19,181,205,139,59,64,5,4,40,99,27,
84,173,183,141,28,61,181,113,67,135,151,13,35,116,119,187,115,246,185,22,98,89,
75,139,136,250,14,80,226,66,190,212,168,2,146,80,165,164,40,110,205,115,135,64,
106,61,93,192,110,50,34,108,203,83,209,238,150,167,85,26,229,107,125,213,54,153,
13,40,120,155,82,146,112,164,144,82,180,43,196,156,134,214,2,128,25,3,170,52,
172,102,149,191,217,181,78,158,133,168,116,245,193,155,141,174,115,92,216,242,
26,62,21,143,34,8,61,82,160,65,5,36,2,146,8,32,16,69,105,157,166,239,113,108,
29,159,245,188,233,141,188,227,78,218,30,132,144,208,5,91,228,142,238,130,114,
71,132,45,212,147,235,128,112,9,232,64,163,93,165,248,193,127,227,46,189,22,59,
55,57,237,57,22,113,98,201,111,136,133,169,83,86,84,80,137,10,65,72,82,221,115,
62,20,148,229,1,91,64,201,90,151,57,112,143,177,173,129,58,122,219,113,226,76,
251,155,151,165,58,151,228,91,96,201,66,35,54,142,132,71,113,97,37,75,87,66,20,
164,45,35,196,66,79,132,45,85,59,132,186,238,225,195,109,107,31,87,90,45,150,
201,247,24,173,56,136,194,122,93,83,109,21,164,161,75,1,183,17,149,108,42,79,
136,145,133,19,140,128,68,217,241,213,226,159,228,13,25,250,28,159,222,40,13,
179,180,23,100,72,182,189,61,39,81,240,177,87,57,114,24,117,199,228,89,95,112,
60,165,50,122,132,198,33,33,69,72,235,224,89,90,150,60,148,84,0,94,27,176,23,
21,111,48,117,171,60,45,184,201,122,93,150,228,211,238,219,91,41,220,97,200,66,
75,171,1,69,67,107,75,66,92,37,32,43,199,180,128,157,203,39,25,241,213,226,159,
228,13,25,250,28,159,222,42,25,224,87,225,191,65,254,114,91,191,105,110,128,233,
39,104,139,102,178,188,112,118,251,110,225,251,147,90,212,175,119,126,228,168,
115,68,87,70,36,54,167,54,186,84,144,159,147,11,207,136,100,100,117,206,42,154,
95,116,79,107,171,29,142,125,238,233,121,214,113,224,91,227,57,42,83,191,12,18,
174,91,77,164,169,106,194,100,18,112,144,78,0,39,217,93,11,173,51,142,191,129,
13,121,249,183,113,253,153,202,2,141,118,120,237,7,123,209,186,146,251,123,215,
90,163,83,106,56,201,178,58,221,190,219,42,226,243,233,126,97,121,157,131,198,
84,150,252,33,194,86,71,68,133,96,40,144,149,120,167,241,131,143,252,100,213,
236,64,211,119,43,203,50,122,22,173,218,104,185,21,166,82,162,219,101,110,41,42,
221,179,118,210,86,242,202,80,86,112,82,14,42,51,225,94,142,159,196,14,33,217,
116,117,185,124,183,174,114,67,106,119,9,60,150,128,42,117,220,41,73,10,216,218,
86,173,185,5,91,112,58,145,93,75,225,150,133,211,156,58,210,17,116,190,151,133,
221,225,49,226,113,197,144,167,100,186,64,220,235,170,192,220,181,96,117,232,0,
1,32,4,128,0,28,193,189,219,56,143,193,221,94,245,186,91,151,157,35,124,84,
100,238,84,57,165,165,58,194,200,80,218,235,42,194,208,84,145,156,40,141,200,32,
245,73,2,95,129,219,59,138,241,160,177,29,235,94,147,152,235,77,37,11,144,244,
39,131,143,16,48,86,160,135,146,144,163,230,118,165,35,39,160,3,165,94,93,71,
162,52,94,165,156,137,218,143,72,105,251,204,182,218,12,161,249,246,214,100,56,
148,2,72,72,82,210,72,78,84,163,143,44,147,237,172,204,8,145,96,65,98,12,24,204,
197,137,25,164,178,195,12,182,16,219,72,72,194,82,148,142,137,72,0,0,7,64,5,1,
84,59,109,197,41,212,118,185,91,122,41,162,63,86,63,253,106,183,235,50,166,238,
104,121,42,41,82,217,105,96,143,79,0,171,113,219,130,219,204,210,182,107,170,80,
73,106,103,37,103,175,64,82,162,63,89,170,153,170,16,95,179,219,229,227,42,27,
152,112,227,61,83,212,31,185,67,238,172,85,23,93,205,62,247,245,226,118,218,59,
62,38,142,13,116,88,244,224,110,156,50,186,51,117,180,152,50,214,216,121,42,
194,129,29,84,43,119,186,170,13,149,72,150,250,18,220,118,145,215,150,156,186,
176,48,58,123,114,165,36,125,181,94,108,115,21,109,187,49,45,43,82,67,75,220,
112,113,145,82,130,47,106,190,162,51,178,73,113,166,227,169,177,183,35,122,149,
146,18,113,237,33,63,104,172,125,127,103,201,91,185,63,149,231,38,197,58,201,58,
112,223,21,252,201,136,214,154,134,245,126,113,174,244,250,146,212,112,92,76,81,
146,216,249,195,7,31,141,183,63,216,214,243,195,109,9,18,115,17,158,158,202,92,
82,10,60,43,78,74,148,113,159,63,187,236,173,98,225,17,17,35,42,195,45,192,236,
153,46,52,174,106,82,65,37,106,194,137,246,117,3,31,249,84,159,97,189,201,176,
232,235,38,162,75,45,191,9,18,4,123,131,123,73,83,105,95,64,180,145,234,149,3,
208,244,235,232,106,135,105,89,108,52,241,175,72,146,203,242,233,249,51,236,113,
248,137,203,143,191,113,179,255,0,6,54,147,28,4,5,33,30,106,30,73,251,5,120,172,
186,82,215,12,37,12,67,75,171,29,1,40,31,219,210,165,24,114,35,92,109,173,74,
136,226,92,105,196,228,45,29,65,207,145,31,69,126,246,203,11,93,75,77,37,32,245,
81,2,184,133,102,187,115,169,183,39,226,250,158,99,125,81,91,228,66,218,227,67,
74,149,28,206,180,64,91,82,216,10,37,44,35,196,124,91,183,167,30,107,221,230,
159,198,29,62,118,218,208,109,151,29,61,37,147,223,45,54,179,49,42,203,174,24,
173,149,149,143,198,42,198,115,158,160,213,173,212,142,49,166,180,197,202,239,
221,130,196,56,174,61,141,216,223,181,57,198,125,153,170,119,169,100,46,230,226,
46,151,27,108,20,78,186,47,152,228,184,197,198,8,42,94,114,80,23,176,231,62,
120,7,219,93,111,99,199,80,234,217,123,242,107,237,199,153,226,26,232,78,79,229,
202,62,222,239,209,221,186,186,243,161,197,69,138,209,8,74,91,220,9,87,152,31,
78,14,43,17,5,50,156,152,212,54,94,109,92,244,21,182,202,78,64,193,62,31,187,
29,62,131,91,12,123,48,123,79,66,118,20,180,54,212,151,208,215,119,113,191,24,
112,172,5,36,171,62,68,131,215,207,24,175,61,205,133,166,225,114,140,187,122,
196,244,150,92,74,162,12,164,96,103,59,128,243,192,53,181,93,181,197,108,138,
229,252,252,154,235,82,161,21,142,94,252,127,24,35,45,85,26,76,107,227,162,67,
69,173,224,16,159,74,198,250,86,223,197,88,179,152,159,17,213,202,50,88,91,91,
146,178,0,37,42,234,51,143,60,117,173,65,56,206,61,135,173,111,105,167,241,42,
82,49,237,194,182,73,119,253,205,139,67,224,93,28,115,31,201,199,113,127,114,
13,89,30,195,173,19,171,239,207,145,209,48,18,159,254,226,106,186,233,128,150,
45,87,23,252,156,90,80,202,63,248,178,79,234,65,31,109,90,238,197,118,101,71,
181,92,238,234,70,57,217,71,214,55,12,127,248,31,190,160,114,253,116,187,218,
250,113,60,234,254,93,21,143,195,243,130,201,210,149,31,222,248,215,194,59,61,
173,235,140,190,35,105,151,89,103,110,228,195,184,55,41,211,149,4,141,173,50,84,
181,117,35,56,73,192,201,56,0,154,218,56,146,173,123,164,247,222,241,173,244,
150,153,238,187,123,133,181,233,221,227,153,158,103,120,119,102,205,184,233,183,
187,103,57,57,223,228,49,214,204,118,88,177,124,29,236,243,162,173,253,235,189,
115,109,169,157,191,151,179,29,229,74,145,179,25,63,55,155,183,62,187,115,129,
156,14,125,241,239,85,219,56,143,199,139,246,162,131,33,152,54,187,132,230,216,
98,83,220,197,54,25,109,8,97,50,20,2,57,129,42,75,97,194,144,130,160,14,48,162,
58,244,95,73,241,47,133,19,96,218,109,218,115,91,105,52,180,251,76,179,110,183,
179,61,150,92,1,64,37,166,82,193,33,72,87,84,164,55,180,16,122,96,30,148,6,141,
219,170,215,2,225,217,186,249,46,99,28,215,173,146,98,74,134,173,234,28,183,75,
232,100,171,0,224,252,155,206,39,7,35,197,159,48,8,231,69,138,233,62,199,124,
129,123,181,191,221,231,219,228,183,42,43,187,18,174,91,173,168,41,10,194,129,7,
10,0,224,130,61,181,214,78,44,90,231,223,56,89,171,108,150,182,59,196,251,133,
146,100,88,173,111,74,121,142,184,194,210,132,229,68,1,149,16,50,72,30,218,228,
117,1,103,245,245,250,87,106,62,210,118,125,41,101,117,227,163,109,174,168,50,
250,35,22,156,68,80,16,101,72,82,138,86,82,167,10,2,27,222,2,114,89,5,41,82,149,
155,215,98,181,192,177,216,224,89,45,108,119,120,22,248,205,197,138,214,245,43,
150,211,105,9,66,114,162,73,194,64,25,36,159,109,68,221,146,184,67,252,20,240,
243,248,209,141,154,162,241,177,235,190,217,28,212,55,180,175,148,202,113,132,
141,137,89,220,70,114,181,47,10,82,66,113,185,255,0,11,28,44,255,0,25,122,51,
253,59,27,250,244,5,90,247,73,245,55,50,249,164,180,115,46,205,71,119,140,245,
206,75,123,177,29,222,98,185,76,156,3,213,105,229,63,212,142,129,206,135,196,
160,33,158,200,122,103,225,71,104,109,43,29,198,166,170,52,9,38,230,251,145,147,
158,87,119,73,117,178,179,130,18,130,234,90,65,39,25,222,0,32,144,107,241,237,
91,172,98,235,126,60,106,59,189,182,123,211,109,108,186,136,80,86,183,131,141,
236,101,1,10,45,20,169,73,229,41,192,227,137,218,112,66,247,96,21,26,147,61,207,
187,142,139,211,218,167,85,106,61,81,170,109,150,57,109,65,102,20,52,79,184,51,
29,183,208,234,212,183,72,14,16,84,164,150,26,242,56,1,103,32,228,96,11,241,74,
198,105,205,67,96,212,176,87,59,78,95,45,151,152,141,186,89,91,240,37,162,67,
105,88,0,148,149,32,144,21,133,36,227,207,4,123,107,25,197,139,164,251,31,11,53,
109,238,214,255,0,119,159,111,178,76,149,21,221,137,87,45,214,216,90,144,172,40,
16,112,160,14,8,35,219,64,115,159,181,103,17,231,241,19,139,215,119,125,240,
231,216,237,82,92,131,104,105,169,9,118,58,90,65,218,167,155,41,0,43,154,164,
115,55,117,56,41,78,226,16,154,148,251,3,35,135,150,23,175,154,215,89,106,45,39,
110,186,33,212,67,180,166,229,114,109,153,49,198,194,95,113,40,112,128,18,176,
182,208,22,50,124,46,39,160,39,117,83,171,177,194,158,200,122,7,81,112,211,77,
234,43,222,161,212,202,159,117,182,177,57,209,13,214,26,105,28,228,7,2,18,149,
52,179,225,74,130,73,42,234,65,56,25,192,2,95,215,253,164,248,63,164,25,88,94,
170,102,249,44,52,151,81,22,201,137,106,112,41,123,112,28,73,228,165,67,5,69,42,
113,39,3,56,234,156,210,27,220,141,113,218,87,142,79,61,108,183,98,108,237,169,
102,57,125,107,143,108,134,222,18,10,214,115,181,9,206,229,16,6,229,172,237,78,
229,132,155,127,166,123,33,240,110,209,222,61,240,133,121,212,28,221,187,61,240,
184,169,28,156,103,59,123,184,107,57,200,206,237,223,52,99,29,115,50,232,221,43,
167,52,109,141,187,38,150,178,194,180,64,111,7,149,25,176,157,234,9,74,119,172,
249,173,101,41,72,43,81,42,56,25,38,128,253,244,157,146,46,154,210,214,157,57,5,
199,156,137,106,130,204,38,22,241,5,197,33,164,4,36,168,128,1,86,18,51,128,6,
125,5,68,221,182,117,123,154,75,179,253,221,17,150,243,114,239,142,162,208,202,
219,109,11,74,67,161,74,116,47,119,146,84,203,111,39,32,18,10,147,140,124,225,
54,84,77,218,191,134,179,248,161,194,25,86,75,57,221,120,131,37,187,133,189,
165,60,150,208,251,168,10,73,109,68,130,60,77,184,224,79,84,141,251,50,160,156,
208,21,107,220,248,119,67,196,226,93,210,118,163,186,66,137,127,17,154,141,98,
106,90,144,148,186,167,86,82,239,44,168,127,45,252,154,18,18,160,162,151,92,0,
40,103,22,199,181,45,211,81,217,120,5,171,46,122,77,249,177,238,204,70,108,161,
232,104,42,117,166,139,205,135,150,146,1,41,218,209,112,149,140,20,0,84,8,35,35,
152,87,187,77,214,199,116,122,215,123,182,77,182,79,99,111,54,44,198,20,203,173,
238,72,80,220,133,0,70,82,65,25,30,68,26,204,232,222,32,107,141,27,203,78,150,
213,151,155,67,45,201,18,187,180,105,139,76,117,186,54,248,150,214,118,47,33,41,
4,41,36,16,0,57,29,40,13,183,178,206,142,191,234,190,54,105,103,173,16,30,114,
37,170,239,26,108,249,101,149,150,35,33,165,23,176,226,210,146,16,165,134,148,
148,110,192,82,176,50,58,145,212,74,129,187,33,113,197,206,43,105,233,54,125,66,
25,107,84,217,218,65,144,180,41,9,76,246,142,64,125,45,131,148,168,16,3,128,13,
160,169,4,99,120,66,103,154,3,156,253,190,175,190,251,246,134,151,111,238,188,
159,121,45,177,96,239,230,110,231,110,73,145,191,24,27,127,190,54,227,175,204,
206,122,224,71,60,21,210,90,243,91,234,153,58,115,135,242,30,143,46,84,21,183,
113,90,39,119,102,251,146,150,218,29,230,144,65,91,89,90,55,32,5,18,60,146,113,
88,13,119,125,248,81,173,239,218,155,186,247,79,125,238,82,39,119,126,102,254,
87,53,213,47,102,236,13,216,221,140,224,103,30,66,186,21,216,143,66,179,163,
248,27,109,185,61,11,147,118,212,95,198,82,220,81,109,74,83,74,207,119,72,82,70,
118,114,182,172,37,68,148,169,215,60,137,32,1,166,217,59,19,104,22,109,108,183,
123,213,122,154,108,241,187,154,252,50,196,102,151,226,56,218,218,155,112,167,9,
192,57,89,201,4,244,206,5,32,210,183,251,206,150,212,48,181,14,158,184,61,110,
186,65,119,155,30,67,71,196,131,228,65,7,162,146,65,32,164,130,20,9,4,16,72,174,
181,107,187,239,193,125,17,126,212,221,215,189,251,209,109,145,59,187,243,54,
115,121,77,41,123,55,96,237,206,220,103,7,25,242,53,200,42,3,174,252,54,189,202,
212,188,58,211,90,142,115,108,183,46,235,104,139,53,244,50,8,109,43,117,148,173,
65,32,146,66,114,163,140,146,113,234,107,197,31,134,250,37,142,36,201,226,50,
44,12,157,85,37,160,210,238,14,58,226,212,0,109,45,229,8,82,138,16,173,136,9,
220,148,131,130,161,159,18,179,251,240,158,215,62,199,194,205,37,100,186,49,221,
231,219,236,144,226,202,107,122,85,203,117,182,16,149,167,41,36,28,40,17,144,72,
246,84,89,198,190,212,90,15,135,147,165,216,237,205,189,169,245,12,87,75,47,196,
138,190,91,17,214,146,141,201,117,242,8,10,194,149,209,9,89,10,65,74,182,26,2,
121,170,155,238,144,233,155,83,154,35,78,107,30,86,203,180,123,144,182,115,16,
148,142,107,14,52,235,184,89,198,227,181,77,120,70,112,57,142,116,202,178,34,
197,246,155,237,7,174,231,53,7,70,192,101,137,113,154,91,207,49,167,236,106,148,
227,136,202,70,229,165,222,113,9,73,32,2,157,163,43,235,158,152,211,56,213,171,
248,251,127,210,209,161,241,82,38,160,102,202,137,200,117,133,79,176,38,19,125,
224,33,192,144,22,25,70,85,176,185,225,207,150,78,58,116,2,121,247,52,174,147,
222,177,235,123,35,143,238,129,18,76,57,76,53,177,62,7,94,75,169,113,89,198,78,
82,195,67,4,224,109,233,140,156,219,250,166,126,230,103,252,96,255,0,213,191,
247,170,185,148,7,38,248,21,248,111,208,127,156,150,239,218,91,174,178,87,38,
248,21,248,111,208,127,156,150,239,218,91,174,178,80,16,55,110,77,6,230,178,224,
156,155,156,22,89,85,199,77,186,110,105,81,105,5,197,71,74,72,144,128,181,17,
177,59,8,116,129,157,197,148,140,19,140,65,190,231,94,188,110,213,173,110,218,2,
115,207,114,239,141,9,86,244,151,86,91,76,134,82,162,226,66,0,41,10,91,89,81,89,
41,232,194,83,212,148,226,245,215,46,248,185,100,191,240,75,180,5,201,58,121,
199,172,142,192,156,169,182,55,216,43,41,17,92,36,180,18,167,7,202,36,32,150,
151,157,201,37,46,36,149,12,228,7,22,175,247,14,52,246,136,145,220,110,12,188,
213,218,238,221,166,200,227,165,212,48,220,114,232,105,131,181,89,82,18,172,135,
20,0,249,203,89,218,9,197,116,199,73,217,34,233,173,45,105,211,144,92,121,200,
150,168,44,194,97,111,16,92,82,26,64,66,74,136,0,21,97,35,56,0,103,208,85,39,
247,58,244,27,119,93,107,118,215,243,153,123,151,99,104,69,183,168,180,176,218,
164,60,149,7,20,22,8,73,82,26,202,74,8,87,71,210,174,132,39,55,174,128,172,222,
232,231,224,66,205,249,200,199,236,210,107,95,236,15,173,244,94,154,224,245,218,
14,163,213,250,126,205,45,205,64,243,200,98,125,201,152,238,41,6,60,112,20,18,
181,2,83,148,168,103,203,32,251,42,102,237,57,194,185,92,93,225,211,90,114,13,
225,155,92,184,147,132,246,22,243,37,198,221,90,25,117,9,109,68,16,80,146,92,25,
88,10,32,15,154,106,170,124,74,184,167,249,127,70,126,153,39,247,122,2,229,255,
0,11,28,44,255,0,25,122,51,253,59,27,250,245,89,187,107,88,248,89,173,108,106,
215,26,59,88,232,199,181,92,44,119,230,163,223,163,5,220,34,165,36,116,64,87,
202,60,140,39,111,80,165,32,41,62,50,27,72,211,126,37,92,83,252,191,163,63,76,
147,251,189,62,37,92,83,252,191,163,63,76,147,251,189,1,147,236,23,198,39,44,
122,133,60,48,212,51,30,93,174,234,239,241,50,221,125,1,168,82,60,74,83,67,118,
14,215,142,0,0,255,0,41,128,18,75,138,80,185,124,73,178,74,212,188,58,212,186,
114,11,140,183,46,235,104,149,9,133,188,72,109,43,117,149,33,37,68,2,66,114,161,
156,2,113,232,106,166,240,135,178,14,180,211,220,69,178,106,61,71,170,52,251,49,
45,19,152,158,132,64,231,72,113,245,180,242,22,27,33,104,108,33,42,9,87,143,42,
32,227,194,115,210,233,80,28,168,224,189,230,213,161,248,189,111,86,186,211,
208,166,90,91,146,168,55,168,55,91,122,93,228,32,157,139,89,109,198,214,164,173,
165,0,188,37,33,103,97,70,64,81,174,142,192,225,151,8,167,193,98,116,30,31,104,
105,81,36,180,151,152,125,155,52,85,182,234,20,50,149,37,65,24,82,72,32,130,58,
16,106,13,237,101,217,149,205,91,57,221,109,195,120,76,166,252,251,160,220,237,
97,196,50,220,210,163,213,246,212,162,18,135,122,229,96,144,22,50,174,139,207,
50,182,233,46,38,241,171,130,114,35,217,4,139,205,150,55,201,201,77,154,245,9,
92,165,180,28,89,59,27,121,59,155,66,212,92,10,45,20,21,28,245,200,4,1,208,191,
224,159,133,159,226,211,70,127,160,163,127,82,171,206,149,227,143,8,161,118,128,
133,165,52,183,8,52,252,102,149,119,247,170,30,164,182,181,21,14,149,184,121,60,
214,210,219,127,201,41,106,35,112,119,37,181,110,198,78,202,131,117,255,0,104,
222,48,113,45,149,233,148,74,102,20,75,171,73,130,187,93,146,17,10,150,84,191,
154,20,162,183,138,151,144,130,148,168,5,15,14,211,185,89,151,251,31,118,110,
190,218,181,60,62,33,113,10,7,189,221,199,107,214,171,83,232,66,220,113,197,35,
41,125,228,156,242,246,110,202,80,112,224,113,57,59,54,0,176,46,101,105,156,
117,252,8,107,207,205,187,143,236,206,86,103,91,106,155,22,139,211,18,245,54,
166,157,220,45,48,246,119,137,28,165,185,179,122,210,132,248,80,10,142,84,164,
142,128,249,251,42,13,226,199,104,238,12,95,56,89,171,108,150,189,101,222,39,
220,44,147,34,197,107,222,201,105,230,58,227,11,74,19,149,52,0,202,136,25,36,15,
109,1,0,123,158,150,184,23,14,61,63,46,99,28,215,173,150,73,18,161,171,122,135,
45,210,227,76,149,96,28,31,147,121,196,224,228,120,179,230,1,29,11,174,109,118,
42,215,186,79,135,124,83,185,222,245,141,215,222,200,15,217,29,138,219,189,221,
215,183,58,167,216,80,78,27,74,143,205,66,142,113,142,159,85,91,255,0,141,31,2,
191,229,207,243,76,223,252,26,2,102,165,120,172,87,72,23,203,28,11,221,173,254,
241,2,225,25,185,81,93,216,164,243,26,113,33,72,86,20,1,25,73,7,4,3,237,175,109,
1,29,241,255,0,76,124,41,225,172,216,56,80,117,149,9,13,145,143,156,144,71,
220,1,39,236,170,28,168,175,63,6,109,181,89,66,218,195,220,191,198,42,70,66,128,
250,183,43,63,243,69,116,201,230,144,235,42,105,196,133,33,73,41,80,62,68,26,
164,221,164,52,50,244,54,178,69,226,0,80,137,49,205,232,43,193,1,68,100,143,79,
97,207,213,159,90,200,214,66,80,183,122,228,254,141,114,245,229,251,120,157,63,
97,234,35,58,222,157,243,92,87,151,95,79,231,34,187,58,218,131,133,62,103,175,
173,74,26,13,180,61,164,154,101,235,96,154,151,156,73,13,244,10,81,220,60,137,
233,145,231,140,142,128,214,159,169,45,173,165,150,238,80,146,121,14,30,169,3,
37,167,7,154,122,122,15,79,109,72,28,56,186,201,107,69,188,248,132,202,185,110,
110,33,103,8,220,149,5,103,62,153,199,95,47,163,173,82,237,27,115,66,148,87,85,
224,104,203,228,147,207,115,50,108,196,118,37,170,42,230,184,211,145,238,143,33,
190,122,151,227,143,131,130,140,147,212,165,41,35,35,7,57,61,70,43,53,167,100,
179,42,11,154,33,164,203,113,153,210,219,117,133,201,109,73,89,104,43,152,78,79,
159,136,99,211,162,188,189,107,208,213,169,215,47,82,35,95,161,174,225,5,200,
101,244,136,137,254,246,46,171,229,20,66,201,62,67,35,0,156,3,245,31,67,75,97,
235,124,93,71,26,237,111,114,77,164,174,87,37,180,128,181,199,65,241,238,201,
201,37,3,61,49,131,142,130,185,121,106,114,177,207,62,153,233,254,121,17,206,
123,177,222,137,3,130,37,216,119,41,154,110,82,214,182,225,47,107,123,188,202,
124,199,253,181,51,33,40,5,35,111,78,155,83,142,164,143,232,246,213,119,208,90,
133,233,58,142,227,170,35,197,72,97,192,22,18,114,6,7,76,156,117,244,253,117,
141,186,241,159,80,73,77,194,10,27,75,73,144,159,147,113,140,169,68,36,117,74,
73,62,28,250,159,83,236,169,227,163,156,241,44,37,44,44,249,245,49,236,110,217,
189,175,134,76,86,176,135,122,78,177,191,205,77,202,92,133,201,149,34,51,248,81,
216,227,65,197,36,160,39,212,116,240,245,27,125,49,81,38,162,122,100,89,101,149,
110,228,178,254,214,82,188,239,9,73,32,103,56,169,71,76,220,25,77,193,231,148,
246,244,188,181,145,184,156,5,168,229,67,174,118,171,215,7,233,198,105,172,76,
39,154,91,125,192,73,239,59,144,181,36,164,22,199,170,178,122,250,249,14,181,
102,173,68,169,187,100,227,147,74,21,69,69,78,47,24,53,109,8,194,239,106,114,27,
80,162,45,247,247,56,212,165,59,180,178,144,82,20,172,122,159,34,8,173,154,224,
134,218,154,176,192,92,139,178,228,184,192,67,225,40,239,44,244,78,114,0,29,2,
70,79,162,137,255,0,9,53,132,177,217,102,105,217,182,231,220,154,164,71,84,132,
150,212,217,195,168,66,240,149,5,228,17,208,109,35,167,183,165,109,28,158,81,
116,207,124,180,168,8,120,218,156,109,97,46,60,162,234,210,165,43,118,70,226,
188,2,145,211,197,159,170,182,174,220,90,218,121,79,151,243,211,62,164,179,182,
74,88,68,67,197,102,167,199,180,216,213,33,106,115,13,237,81,89,201,29,72,219,
159,92,99,255,0,63,102,145,25,178,86,0,25,234,0,250,107,115,227,58,228,69,189,
69,211,133,210,243,81,90,42,11,87,206,82,148,178,122,253,57,223,88,221,49,108,
107,144,229,202,104,61,217,160,82,216,39,249,85,16,48,159,171,161,201,233,129,
244,145,142,163,71,61,186,88,201,245,229,235,192,251,82,118,88,255,0,99,43,6,
212,162,155,117,181,144,85,42,82,146,165,251,6,254,136,31,113,39,62,195,87,231,
130,250,97,173,47,160,45,240,154,109,73,83,141,37,197,110,198,122,142,128,253,
56,234,126,146,106,179,246,93,209,127,12,117,132,187,237,205,165,170,52,53,133,
18,6,18,84,173,196,164,125,192,99,208,103,217,87,57,172,114,211,143,44,84,250,
42,156,236,118,75,146,224,188,223,63,78,94,165,30,221,213,40,193,105,227,215,
139,252,123,250,31,106,179,124,74,184,89,249,127,89,254,153,27,247,122,179,52,
173,99,153,43,55,196,171,133,159,151,245,159,233,145,191,119,172,214,135,236,
151,195,45,39,171,237,90,154,53,195,83,79,147,107,146,137,81,217,153,49,174,81,
117,7,40,82,131,109,33,71,106,128,80,27,128,37,32,28,140,131,63,210,128,84,25,
195,46,203,124,50,208,122,190,46,168,136,187,205,226,108,63,20,86,238,175,180,
227,76,187,145,181,208,148,54,140,173,56,59,73,200,4,238,3,112,73,19,157,40,5,
86,111,137,87,11,63,47,235,63,211,35,126,239,86,102,148,5,102,248,149,112,179,
242,254,179,253,50,55,238,244,248,149,112,179,242,254,179,253,50,55,238,245,102,
105,64,104,188,21,225,125,131,132,218,90,78,156,211,147,46,114,162,73,156,185,
171,92,247,16,183,2,212,134,208,64,40,66,6,220,54,159,76,228,158,181,182,223,
109,112,47,150,57,246,75,163,29,226,5,194,51,145,101,53,189,73,230,52,226,74,86,
156,164,130,50,146,70,65,7,217,94,218,80,28,130,215,58,102,235,163,117,125,215,
75,94,218,229,79,182,73,92,119,112,149,4,175,7,163,136,220,1,40,82,112,164,146,
6,82,160,125,107,167,189,157,245,77,171,87,112,99,75,220,109,147,161,74,91,22,
216,241,38,166,43,73,101,49,229,54,210,18,235,92,164,132,134,240,175,36,132,132,
237,41,41,27,74,73,198,113,243,129,218,71,139,240,88,93,216,189,109,189,67,105,
104,135,116,138,148,243,18,8,86,214,221,73,31,40,208,89,221,183,32,131,157,170,
78,229,102,13,143,216,251,90,105,86,100,220,180,23,24,30,135,122,83,65,148,242,
226,189,111,75,168,43,73,82,86,243,79,45,65,61,55,99,106,129,41,79,151,152,2,
217,106,61,67,96,211,80,81,59,81,223,45,150,104,142,58,25,67,243,229,162,59,106,
89,4,132,133,44,128,85,132,168,227,207,0,251,42,157,113,183,181,157,246,249,
124,131,167,120,40,153,177,243,36,182,169,206,64,67,210,39,184,84,80,219,108,50,
180,175,8,86,66,129,41,14,40,148,141,168,193,11,204,222,251,23,221,111,151,71,
174,151,190,49,205,185,207,127,111,54,84,203,58,158,117,205,169,9,27,150,169,36,
156,36,0,50,124,128,21,51,112,119,179,231,14,56,95,116,247,226,201,14,109,194,
240,157,233,106,225,115,120,58,235,8,90,66,74,91,9,74,80,158,128,248,130,119,
225,107,27,182,156,80,27,100,253,71,121,176,112,121,253,93,168,237,76,139,213,
183,79,170,229,113,183,178,238,214,251,195,113,249,142,178,149,130,188,39,120,
82,65,202,186,117,241,122,243,186,239,218,55,140,151,13,94,53,50,53,172,216,47,
55,189,44,195,138,148,166,19,104,81,94,19,221,200,40,115,1,100,5,56,22,190,137,
202,137,72,35,165,122,178,201,23,82,233,107,182,156,156,227,205,196,186,193,122,
19,235,100,128,226,80,234,10,20,82,72,32,43,10,56,200,35,62,134,185,181,168,
120,89,173,56,41,175,97,221,245,142,133,103,84,216,109,110,177,42,67,173,161,
231,45,114,80,165,4,132,45,224,145,177,91,206,221,174,12,21,4,229,11,66,128,88,
29,11,210,46,197,226,15,9,180,252,237,83,104,182,79,106,247,104,135,54,100,39,
99,7,99,41,107,109,14,224,54,230,236,164,47,4,103,36,96,117,200,205,87,174,217,
60,11,225,197,167,134,55,174,33,88,44,222,241,93,173,252,143,145,183,144,212,
71,249,143,48,207,137,156,20,167,106,73,35,151,179,42,36,171,113,172,47,199,
155,252,215,127,63,255,0,179,214,155,174,213,199,254,210,215,203,100,97,163,166,
217,180,208,196,184,8,117,151,35,64,75,75,80,9,146,227,206,0,36,44,54,226,122,
160,18,82,20,91,108,110,94,64,246,123,155,214,185,239,113,79,81,222,219,99,116,
8,150,67,21,247,119,167,192,235,207,180,166,211,140,228,229,44,58,114,6,6,222,
184,200,205,165,237,79,125,248,59,217,231,90,220,59,175,122,230,219,85,7,103,51,
102,59,202,147,31,126,112,126,111,55,118,61,118,227,35,57,25,62,7,112,206,205,
194,141,4,198,150,179,190,244,165,23,76,153,178,221,232,169,50,20,148,165,78,4,
228,132,39,8,72,9,30,65,35,37,74,202,140,15,238,147,223,123,190,136,210,90,103,
186,238,239,247,39,167,119,142,102,57,125,221,173,155,54,227,174,238,243,156,
228,99,103,145,207,64,41,61,138,215,62,249,124,129,100,181,177,222,39,220,36,
183,22,43,91,210,158,99,174,40,37,9,202,136,3,42,32,100,144,61,181,215,219,21,
174,5,142,199,2,201,107,99,187,192,183,198,110,44,86,183,169,92,182,155,72,74,
19,149,18,78,18,0,201,36,251,107,155,125,139,180,183,194,142,208,218,127,157,7,
189,194,180,115,46,146,126,87,103,43,148,159,145,115,161,5,88,125,76,120,70,115,
158,160,167,117,116,198,128,172,222,232,94,181,247,143,133,48,180,115,81,247,
189,169,228,252,163,138,70,82,219,17,150,219,170,193,220,8,89,112,179,142,138,
27,121,158,71,6,170,111,101,237,25,240,235,142,90,110,206,244,110,124,6,36,137,
211,194,226,119,134,185,12,124,161,67,169,61,2,28,82,82,214,85,211,46,142,135,
32,25,55,221,28,252,55,217,191,54,216,253,166,77,102,123,21,201,209,188,55,225,
166,173,227,70,172,184,114,214,137,62,242,69,101,9,60,213,225,13,188,166,154,78,
224,28,91,170,83,125,8,27,3,37,69,65,37,100,1,63,241,47,180,159,14,56,127,196,
51,162,111,162,242,185,173,114,123,228,152,209,2,227,196,230,128,161,188,149,5,
171,8,82,86,118,37,125,20,0,202,178,145,65,248,62,214,151,212,156,100,179,14,39,
221,222,77,150,124,229,185,116,152,252,149,5,58,181,5,41,60,215,122,168,37,110,
237,11,89,32,128,165,29,201,249,194,89,236,209,164,53,119,26,123,64,30,41,95,80,
242,109,118,251,184,185,206,152,28,82,81,222,16,67,140,69,103,126,242,164,164,
134,129,70,124,13,0,55,36,148,103,53,218,11,178,142,176,70,189,147,118,225,149,
173,155,173,150,232,235,146,76,52,189,30,42,173,203,42,201,104,37,106,66,75,93,
124,27,122,128,54,145,225,10,88,23,122,201,105,181,88,237,108,218,236,150,200,
86,200,12,110,229,69,134,194,89,105,189,202,42,59,80,144,0,202,137,39,3,204,
147,85,79,221,25,214,54,7,52,109,151,68,71,158,204,155,210,110,226,108,134,25,
121,11,84,84,54,194,128,15,36,43,114,20,190,240,133,35,41,194,130,84,115,208,
102,32,209,60,49,237,86,222,152,136,141,50,206,179,179,218,70,254,239,15,223,
241,111,229,120,213,187,251,157,111,33,72,202,183,30,169,25,206,238,160,228,251,
110,189,143,248,159,15,68,68,187,71,16,174,55,247,228,161,46,89,99,60,218,123,
187,10,104,168,173,111,184,180,32,173,43,27,10,16,20,58,130,22,70,104,13,255,0,
220,204,255,0,140,31,250,183,254,245,87,50,171,55,97,158,23,107,190,26,252,49,
248,107,98,247,171,223,30,227,221,63,186,217,123,153,203,239,27,255,0,146,90,
177,141,233,243,198,115,211,214,172,205,1,201,190,5,126,27,244,31,231,37,187,
246,150,235,172,148,172,102,172,189,197,211,90,90,237,168,231,54,243,145,45,80,
94,154,250,25,0,184,164,52,130,181,4,130,64,42,194,78,50,64,207,168,160,50,117,
69,61,209,251,221,130,110,189,211,118,88,45,178,187,213,182,11,170,185,62,216,
65,80,67,170,73,101,149,168,29,219,147,181,197,236,80,0,7,146,161,157,230,166,
203,87,107,206,13,204,177,203,184,72,155,121,183,73,99,127,46,223,38,220,165,72,
145,181,33,67,97,108,173,161,184,157,163,122,211,212,28,224,96,213,109,224,29,
142,243,218,15,180,155,250,187,87,199,102,76,40,174,162,231,119,8,143,136,234,
13,132,162,60,80,10,84,146,147,181,9,216,179,149,182,219,167,113,80,36,129,114,
251,54,232,55,56,113,193,187,22,155,152,203,45,221,57,70,85,200,182,210,18,163,
33,210,86,164,172,164,168,45,72,5,45,111,201,200,109,56,192,192,18,53,41,64,41,
74,80,10,82,148,2,148,165,0,165,41,64,41,74,80,26,207,20,116,85,171,136,154,18,
227,163,175,114,38,199,129,112,229,115,92,134,180,165,212,242,221,67,163,105,82,
84,62,114,6,114,15,76,253,117,6,124,74,184,89,249,127,89,254,153,27,247,122,
179,52,160,43,55,196,171,133,159,151,245,159,233,145,191,119,167,196,171,133,
159,151,245,159,233,145,191,119,171,51,74,3,25,164,236,145,116,214,150,180,233,
200,46,60,228,75,84,22,97,48,183,136,46,41,13,32,33,37,68,0,10,176,145,156,0,51,
232,43,39,74,80,31,79,149,104,220,101,208,81,245,230,142,114,210,181,165,183,
219,87,54,59,133,0,169,43,0,142,132,145,140,231,237,192,173,230,190,40,110,73,7,
214,163,182,181,100,28,37,201,146,211,116,233,177,89,14,104,230,254,166,177,220,
180,149,214,85,154,236,211,233,109,94,28,164,96,157,167,194,160,15,145,78,14,71,
217,234,13,109,28,47,185,61,14,242,155,105,128,220,216,15,178,183,10,152,206,
215,198,60,94,1,228,175,191,234,171,81,199,14,20,66,215,150,103,21,29,104,143,
116,64,5,167,74,51,184,140,121,245,29,113,211,62,189,51,229,145,78,175,54,125,
69,195,221,70,83,46,58,154,83,75,41,10,241,36,47,219,215,166,21,235,254,177,92,
222,183,75,41,65,211,103,247,62,93,19,241,240,125,235,240,118,84,234,97,173,175,
226,85,253,203,154,234,189,209,41,65,110,228,28,122,222,171,156,166,101,204,45,
193,136,23,24,6,214,201,202,65,57,72,86,228,5,18,78,236,146,71,183,35,35,172,33,
153,107,58,85,182,163,182,212,4,182,137,18,91,78,78,72,31,38,159,84,227,166,84,
14,79,95,42,211,45,90,194,85,218,210,37,75,92,166,164,67,80,145,25,183,137,80,
230,35,170,86,146,127,177,6,183,171,76,39,174,122,102,231,42,123,169,110,85,209,
14,45,213,167,241,75,137,57,62,159,55,35,215,210,184,235,235,157,22,110,179,
134,62,253,254,43,31,114,24,87,153,109,71,146,205,42,247,162,161,171,184,169,
139,141,177,72,60,198,31,138,146,164,2,62,114,84,48,122,103,56,207,178,176,22,
248,145,82,144,162,27,67,205,168,135,7,152,0,142,137,7,217,142,161,94,163,175,
159,74,212,33,196,187,233,153,5,171,171,19,38,52,195,97,166,22,220,149,148,72,
200,192,89,87,92,99,161,219,143,60,117,53,179,223,227,63,100,105,9,13,151,154,
74,246,178,180,140,132,163,204,160,143,198,78,122,131,248,167,219,90,214,213,
56,237,139,179,118,238,227,229,112,85,230,91,113,142,102,34,231,252,93,33,201,
17,156,66,208,235,187,150,201,78,2,135,211,244,251,15,165,127,19,102,207,139,
107,76,187,115,9,149,53,106,5,46,148,149,134,144,15,150,223,85,2,71,90,254,84,
211,50,26,75,243,31,45,180,70,245,5,43,24,31,95,169,175,109,167,75,234,167,217,
68,251,104,11,138,66,207,37,106,217,204,66,253,62,131,140,117,171,155,234,132,
82,185,242,239,251,16,237,177,252,208,92,15,11,215,27,132,205,53,46,125,225,28,
167,249,101,1,68,109,201,7,161,199,161,3,31,117,126,247,139,211,17,244,212,24,
115,220,75,233,183,52,169,194,106,128,37,197,169,100,237,4,30,152,42,61,125,74,
60,189,107,15,170,37,185,17,104,137,115,79,115,76,95,19,172,169,91,130,124,89,
3,119,227,149,14,190,93,51,140,122,214,157,118,82,47,136,220,182,89,182,194,
75,165,198,163,50,130,22,191,103,132,156,36,15,76,159,47,164,245,247,94,142,55,
56,183,193,39,158,31,131,231,207,57,97,31,150,36,107,29,69,54,245,37,124,136,
187,206,93,112,103,98,14,8,31,73,246,99,174,79,178,182,205,23,165,231,106,251,
204,91,53,145,135,27,96,2,11,187,115,189,71,205,88,242,220,113,229,156,120,9,
207,74,254,180,54,143,186,106,249,140,90,172,144,221,102,42,92,194,207,85,229,
204,100,145,229,185,88,62,71,110,7,168,171,149,193,30,23,64,208,54,45,138,116,
74,184,188,74,158,123,30,89,3,32,125,195,203,208,1,237,39,90,16,149,175,225,
213,193,46,30,75,255,0,94,30,60,75,151,95,94,130,172,207,140,159,37,222,253,140,
199,10,52,52,45,15,166,209,109,136,176,165,225,33,197,129,208,224,116,250,252,
207,95,92,159,170,183,32,48,49,95,16,157,163,25,207,90,251,91,85,85,26,162,163,
20,113,247,93,59,236,118,88,242,217,242,148,165,72,68,41,74,80,10,82,148,2,148,
165,0,165,41,64,41,74,80,10,82,148,2,148,165,0,165,41,64,41,74,80,10,142,120,
225,193,189,35,197,248,54,200,250,157,203,156,103,109,142,184,184,210,32,62,150,
220,72,112,0,180,16,180,169,37,39,106,15,205,200,40,24,32,21,3,35,82,128,140,
184,37,193,13,15,194,62,252,246,155,106,108,185,243,176,151,103,220,28,67,146,
18,208,193,229,36,165,9,9,70,225,184,128,50,163,141,196,237,72,76,155,74,80,26,
103,22,120,99,163,120,161,99,110,215,171,173,125,231,145,189,80,229,52,178,220,
136,139,90,118,149,54,177,246,29,170,10,65,41,73,82,78,209,80,207,196,171,133,
159,151,245,159,233,145,191,119,171,51,74,3,25,165,108,22,109,45,167,161,105,
237,61,111,102,221,107,130,215,42,60,118,135,133,3,204,146,79,85,40,146,73,81,
36,168,146,73,36,147,89,58,82,128,82,148,160,20,165,40,5,120,175,182,184,23,
203,28,251,37,209,142,241,2,225,25,200,178,154,222,164,243,26,113,37,43,78,82,
65,25,73,35,32,131,236,175,109,40,10,205,241,42,225,103,229,253,103,250,100,
111,221,234,108,225,79,15,52,191,12,180,176,211,154,82,43,204,68,83,188,247,214,
243,234,117,199,222,216,132,41,213,18,112,20,160,218,114,18,18,156,249,36,86,
219,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,20,165,
40,5,41,74,1,74,82,128,251,74,82,128,254,30,4,182,160,159,51,244,213,108,227,
101,131,136,83,20,244,75,244,123,69,234,202,92,5,18,35,68,13,204,45,103,41,66,
242,118,28,123,82,126,236,154,178,196,2,48,70,69,126,111,48,211,200,40,113,1,73,
62,96,250,212,55,209,27,163,182,69,141,54,166,122,105,239,135,50,155,106,182,
224,175,71,34,12,77,47,120,101,248,136,42,97,109,50,131,131,143,154,172,43,59,
79,169,244,197,104,178,53,222,166,109,168,241,24,65,182,36,131,149,75,104,171,
168,242,9,25,218,125,122,228,249,121,85,248,110,205,107,109,123,209,5,128,175,
110,202,193,234,125,3,165,111,205,58,212,219,75,0,184,158,170,109,33,63,105,30,
71,237,21,137,46,193,170,181,250,107,119,95,153,245,244,251,154,85,246,164,103,
39,241,178,188,87,183,179,42,182,154,188,77,118,236,187,93,241,134,155,144,211,
105,117,114,88,115,228,201,32,17,145,147,212,103,30,189,114,49,138,202,241,14,
225,108,110,196,232,83,201,200,108,141,217,232,70,127,183,151,157,72,151,142,
206,22,7,92,83,182,171,140,136,110,21,110,27,74,147,131,237,232,113,159,178,181,
139,175,102,139,196,191,10,181,2,159,64,242,11,116,16,126,244,86,77,221,139,63,
234,21,138,46,41,116,88,127,102,205,168,235,233,182,189,174,228,252,242,190,232,
175,51,31,106,100,182,148,139,140,118,137,57,75,175,5,141,163,252,160,1,9,251,1,
169,1,55,205,93,14,205,111,135,105,212,22,103,220,120,97,75,101,43,113,180,164,
15,34,172,122,249,121,86,217,125,236,236,214,158,177,205,190,95,47,188,168,80,
153,47,58,66,242,112,7,80,60,30,100,224,15,174,176,26,10,5,246,237,110,139,106,
177,198,113,150,92,108,101,224,70,229,123,113,253,111,42,187,169,211,74,237,176,
85,229,248,174,30,103,215,102,154,170,100,227,103,15,63,177,17,222,173,154,154,
241,174,94,136,84,171,148,196,40,23,28,111,170,2,138,65,233,158,159,111,255,0,
202,153,248,119,217,211,83,94,155,110,117,225,248,241,33,175,10,9,82,212,22,231,
94,191,139,159,79,78,135,208,213,133,225,15,12,45,58,82,216,135,229,65,105,235,
147,132,169,110,188,2,213,156,231,233,0,253,85,37,4,164,121,10,214,175,67,61,
170,51,120,73,114,94,254,201,24,223,242,234,168,181,76,120,190,175,216,212,248,
113,161,172,154,50,211,220,173,177,219,75,159,142,232,64,73,87,209,245,116,246,
156,158,166,182,208,49,64,49,74,208,170,168,213,21,24,163,30,235,167,116,220,
236,121,108,82,148,169,8,207,148,165,40,5,41,74,1,74,82,128,82,148,160,20,165,
40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,20,
165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,82,148,160,
20,165,40,5,41,74,1,74,82,128,82,148,160,20,165,40,5,41,74,1,74,82,128,251,74,
82,128,82,148,160,20,192,206,113,74,80,10,82,148,6,157,197,157,46,230,179,210,
15,105,238,244,184,241,228,62,218,228,165,4,110,117,180,43,127,44,31,77,202,74,
122,250,12,215,222,29,104,200,122,106,218,218,68,118,210,254,196,167,3,201,32,
122,15,170,183,10,87,204,113,201,233,205,184,168,244,66,148,165,125,60,138,82,
148,2,148,165,1,242,148,165,0,165,41,64,41,74,80,10,82,148,2,148,165,0,165,41,
64,41,74,80,10,82,148,2,148,165,0,165,41,64,41,74,80,10,82,148,2,148,165,0,165,
41,64,41,74,80,10,82,148,2,148,165,0,165,41,64,41,74,80,10,82,148,2,148,165,0,
165,41,64,41,74,80,10,82,148,2,148,165,0,165,41,64,41,74,80,31,255,217};
static Fl_JPEG_Image image_meshlogo("meshlogo.jpg", idata_meshlogo);

ProgInfo::ProgInfo() {
  { proginfo = new Fl_Window(560, 570, "Progam Version");
    proginfo->color(FL_BACKGROUND2_COLOR);
    proginfo->user_data((void*)(this));
    { infotxt = new Fl_Text_Display(5, 140, 550, 430);
      infotxt->box(FL_NO_BOX);
      infotxt->image(image_meshlogo);
    } // Fl_Text_Display* infotxt
    proginfo->end();
  } // Fl_Window* proginfo
}

void ObjProps::cb_thrD_i(Fl_Check_Button*, void*) {
  bool *sel = mwtb->contwin->regselected();
for( int i=0; i<nreg; i++ )
  if( sel[i] )
    mwtb->threeD( obj, i, static_cast<bool>(thrD->value()) );
delete sel;
}
void ObjProps::cb_thrD(Fl_Check_Button* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_thrD_i(o,v);
}

void ObjProps::cb_stride_i(Fl_Value_Input*, void*) {
  mwtb->stride( obj, int(stride->value()) );
}
void ObjProps::cb_stride(Fl_Value_Input* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_stride_i(o,v);
}

void ObjProps::cb_sizeinp_i(Fl_Value_Input* o, void*) {
  bool *sel = mwtb->contwin->regselected();
for( int i=0; i<nreg; i++ )
  if( sel[i] )
     mwtb->size(obj, i, float(o->value()) );
delete sel;
}
void ObjProps::cb_sizeinp(Fl_Value_Input* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_sizeinp_i(o,v);
}

void ObjProps::cb_color_i(Fl_Color_Chooser* o, void*) {
  uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();
}
void ObjProps::cb_color(Fl_Color_Chooser* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_color_i(o,v);
}

void ObjProps::cb_Done_i(Fl_Button*, void*) {
  win->hide();
}
void ObjProps::cb_Done(Fl_Button* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_Done_i(o,v);
}

void ObjProps::cb_Apply_i(Fl_Return_Button*, void*) {
  bool *sel = mwtb->contwin->regselected();
c[0] = color->r();
c[1] = color->g();
c[2] = color->b();
c[3] = opacity->value();

for( int r=0; r<nreg; r++ )
  if( sel[r] ) 
    mwtb->set_color( obj, r, c[0], c[1], c[2], c[3] );

mwtb->redraw();
delete sel;
}
void ObjProps::cb_Apply(Fl_Return_Button* o, void* v) {
  ((ObjProps*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

ObjProps::ObjProps( TBmeshWin* wtb, Object_t o ):mwtb(wtb),obj(o) {
  { win = new Fl_Window(220, 245);
    win->box(FL_ENGRAVED_BOX);
    win->user_data((void*)(this));
    { thrD = new Fl_Check_Button(15, 18, 45, 27, "3D ");
      thrD->down_box(FL_DOWN_BOX);
      thrD->callback((Fl_Callback*)cb_thrD);
      thrD->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Check_Button* thrD
    { stride = new Fl_Value_Input(170, 18, 30, 28, "Stride");
      stride->value(1);
      stride->callback((Fl_Callback*)cb_stride);
      stride->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Input* stride
    { sizeinp = new Fl_Value_Input(70, 18, 70, 28, "Size");
      sizeinp->maximum(10000);
      sizeinp->step(0.1);
      sizeinp->value(1);
      sizeinp->callback((Fl_Callback*)cb_sizeinp);
      sizeinp->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Input* sizeinp
    { color = new Fl_Color_Chooser(10, 53, 200, 95, "Colour");
      color->box(FL_NO_BOX);
      color->color(FL_BACKGROUND_COLOR);
      color->selection_color(FL_BACKGROUND_COLOR);
      color->labeltype(FL_NORMAL_LABEL);
      color->labelfont(0);
      color->labelsize(14);
      color->labelcolor(FL_FOREGROUND_COLOR);
      color->callback((Fl_Callback*)cb_color);
      color->align(Fl_Align(FL_ALIGN_CENTER));
      color->when(FL_WHEN_RELEASE);
    } // Fl_Color_Chooser* color
    { opacity = new Fl_Value_Slider(10, 160, 200, 20, "Opacity");
      opacity->type(3);
      opacity->selection_color((Fl_Color)219);
      opacity->value(1);
      opacity->textsize(14);
    } // Fl_Value_Slider* opacity
    { Fl_Button* o = new Fl_Button(135, 205, 75, 30, "Done");
      o->color((Fl_Color)204);
      o->callback((Fl_Callback*)cb_Done);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(5, 205, 125, 30, "Apply");
      o->color((Fl_Color)133);
      o->callback((Fl_Callback*)cb_Apply);
    } // Fl_Return_Button* o
    win->end();
  } // Fl_Window* win
  string lab = objnames[obj];
  win->label(lab.c_str());
  nreg = mwtb->contwin->reglist->nitems();
  update();
}

void ObjProps::update() {
  bool *sel = mwtb->contwin->regselected();
  for( int i=0; i<nreg; i++ )
    if( sel[i] ) {
      thrD->value( mwtb->threeD( obj, i ) );
      stride->value( mwtb->stride( obj ) );
      sizeinp->value( mwtb->size( obj, i ) );
      GLfloat *c = mwtb->get_color( obj, i );
      color->rgb(c[0],c[1],c[2]);
      opacity->value(c[3]);
      color->do_callback();
      color->redraw();
    }
  delete sel;
}
