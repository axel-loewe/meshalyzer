// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "trimesh.h"
#define SAVE_WIDGET(f,a) f<<#a<<" = "<<double(a->value())<<endl;
#define TEST_VAR(A,B,C) if(!strcmp(#A,B)){A->value(C);A->do_callback();continue;}
#define TEST_CHOICE(A,B,C) if(!strcmp(#A,B)){A->value(C);A->mvalue()->do_callback(A);continue;}
#define TEST_MENUVAR(A,B,C) if(!strcmp(#A,B)){if(C)A->set();else A->clear();continue;}
#define IGNORE_VAR(A,B) if(!strcmp(#A,B)){continue;}
#include <set>
#include "colourchoice.h"

Meshwin::Meshwin() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = winny = new Fl_Double_Window(455, 455, "trimesh");
    w = o;
    o->user_data((void*)(this));
    { TBmeshWin* o = trackballwin = new TBmeshWin(0, 0, 455, 455);
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    o->end();
  }
  winny->resizable(trackballwin);
winny->size_range(50,50,1200,1200,5,5,1);
}

void Controls::cb_Add_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Surface", "*.tri",NULL);
int sn;
if( fn != NULL ) if( (sn=mwtb->add_surface( fn ))>=0 ){
  for( int s=currsurf->size()-1; s<=sn; s++ ) {
    sprintf( fn, "%d", s-1 );	
    currsurf->add(fn);
  }
  elehi->maximum(mwtb->model->number(SurfEle)-1);
  mwtb->redraw();
};
}
void Controls::cb_Add(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Add_i(o,v);
}

void Controls::cb_Read_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Data file","*{out,dat}*",NULL);
if(fn != NULL) mwtb->get_data(fn,tmslider);
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_Read(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read_i(o,v);
}

void Controls::cb_Read1_i(Fl_Menu_*, void*) {
  char *fn=fl_file_chooser("Data file","*igb*",NULL);
if(fn != NULL) mwtb->get_data(fn,tmslider);
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_Read1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read1_i(o,v);
}

void Controls::cb_Read2_i(Fl_Menu_*, void*) {
  if( !mwtb->getVecData(tmslider) ) {
  vectorgrp->activate();
  tabwidget->value(vectorgrp);
};
}
void Controls::cb_Read2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read2_i(o,v);
}

void Controls::cb_Save_i(Fl_Menu_*, void*) {
  char*fn;
fn=fl_file_chooser("Save Xfrm","*.xfrm",NULL);
if( fn != NULL )
 mwtb->trackball.save(fn);
}
void Controls::cb_Save(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void Controls::cb_Read3_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("Xfrm file","*.xfrm",NULL);
if( fn != NULL ){
  mwtb->trackball.read(fn);
  mwtb->redraw();
};
}
void Controls::cb_Read3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Read3_i(o,v);
}

void Controls::cb_Save1_i(Fl_Menu_*, void*) {
  save_state();
}
void Controls::cb_Save1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void Controls::cb_Restore_i(Fl_Menu_*, void*) {
  restore_state();
}
void Controls::cb_Restore(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Restore_i(o,v);
}

void Controls::cb_Quit_i(Fl_Menu_*, void*) {
  exit(0);
}
void Controls::cb_Quit(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void Controls::cb_Reset_i(Fl_Menu_*, void*) {
  mwtb->trackball.Reset();
float md = mwtb->get_maxdim();
mwtb->trackball.mouse.SetOglPosAndSize(-md, md, 2*md, 2*md );
mwtb->trackball.size = md;mwtb->redraw();
}
void Controls::cb_Reset(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void Controls::cb__i(Fl_Menu_*, void*) {
  set_rot('X',0,0);
}
void Controls::cb_(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb__i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_ppaxis[] =
{254,254,254,254,254,254,254,254,254,253,253,253,254,254,254,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,237,237,237,135,135,135,251,251,251,
254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,178,178,178,
7,7,7,221,221,221,255,255,255,253,253,253,254,254,254,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,93,93,93,0,0,0,137,137,137,255,255,255,250,250,250,255,255,255,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,219,219,219,18,18,18,0,0,0,48,48,48,249,249,249,255,255,255,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,127,127,127,0,0,0,3,3,3,0,0,0,179,179,179,255,255,255,
251,251,251,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,32,32,32,0,0,0,4,4,4,0,0,0,89,89,89,255,255,255,
252,252,252,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,211,211,211,255,
255,255,253,253,253,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,156,156,156,115,115,115,22,22,22,145,145,145,143,
143,143,214,214,214,255,255,255,253,253,253,255,255,255,254,254,254,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,200,200,200,41,
41,41,247,247,247,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,192,192,192,37,37,37,242,242,242,253,253,253,252,252,252,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,
254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,
246,246,246,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
195,195,195,38,38,38,246,246,246,255,255,255,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,
255,255,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,254,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,
246,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,254,254,254,254,254,254,255,255,255,252,252,252,251,251,251,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,195,195,
195,38,38,38,245,245,245,255,255,255,253,253,253,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,253,253,253,255,255,255,214,214,214,213,213,213,
255,255,255,254,254,254,254,254,254,251,251,251,253,253,253,254,254,254,254,254,
254,255,255,255,195,195,195,40,40,40,247,247,247,255,255,255,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,250,250,250,255,255,255,
144,144,144,0,0,0,90,90,90,181,181,181,248,248,248,255,255,255,254,254,254,254,
254,254,254,254,254,255,255,255,192,192,192,35,35,35,238,238,238,248,248,248,
245,245,245,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,242,242,
242,255,255,255,145,145,145,0,0,0,3,3,3,0,0,0,44,44,44,138,138,138,223,223,223,
254,254,254,253,253,253,255,255,255,224,224,224,37,37,37,31,31,31,39,39,39,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,37,37,40,40,40,22,22,22,
0,0,0,5,5,5,3,3,3,0,0,0,0,0,0,6,6,6,134,134,134,255,255,255,254,254,254,255,
255,255,221,221,221,191,191,191,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,191,191,191,208,208,208,114,114,114,0,0,0,2,
2,2,0,0,0,18,18,18,93,93,93,179,179,179,236,236,236,254,254,254,254,254,254,
254,254,254,254,254,254,255,255,255,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,251,251,251,255,255,255,152,152,152,0,0,
0,31,31,31,128,128,128,221,221,221,255,255,255,254,254,254,254,254,254,254,
254,254};
static Fl_RGB_Image image_ppaxis(idata_ppaxis, 22, 22, 3, 0);

void Controls::cb_item_i(Fl_Menu_*, void*) {
  set_rot('X',0,1);
}
void Controls::cb_item(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item_i(o,v);
}

static unsigned char idata_npaxis[] =
{254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,156,156,156,0,0,0,32,32,32,127,127,127,219,219,219,255,255,255,255,255,255,
255,255,255,254,254,254,254,254,254,255,255,255,224,224,224,192,192,192,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,192,
192,192,200,200,200,115,115,115,0,0,0,0,0,0,0,0,0,18,18,18,93,93,93,178,178,178,
237,237,237,254,254,254,254,254,254,221,221,221,37,37,37,35,35,35,40,40,40,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,37,37,37,41,41,41,22,22,22,
0,0,0,4,4,4,3,3,3,0,0,0,0,0,0,7,7,7,135,135,135,254,254,254,255,255,255,191,
191,191,31,31,31,238,238,238,247,247,247,245,245,245,246,246,246,246,246,246,
246,246,246,246,246,246,246,246,246,242,242,242,247,247,247,145,145,145,0,0,0,0,
0,0,0,0,0,48,48,48,137,137,137,221,221,221,251,251,251,253,253,253,254,254,
254,195,195,195,39,39,39,248,248,248,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,255,255,143,143,143,
4,4,4,89,89,89,179,179,179,249,249,249,255,255,255,255,255,255,254,254,254,
254,254,254,255,255,255,195,195,195,38,38,38,245,245,245,254,254,254,253,253,
253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,252,252,252,254,
254,254,214,214,214,211,211,211,255,255,255,255,255,255,255,255,255,250,250,250,
253,253,253,254,254,254,255,255,255,255,255,255,195,195,195,38,38,38,246,246,
246,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,254,254,254,255,255,255,255,255,255,252,252,252,251,251,251,
254,254,254,255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,195,195,
195,38,38,38,246,246,246,255,255,255,254,254,254,254,254,254,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,255,255,255,253,253,253,253,253,253,
254,254,254,255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,255,255,
255,255,255,255,195,195,195,38,38,38,246,246,246,255,255,255,254,254,254,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,195,195,195,38,38,38,246,246,246,255,
255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,195,195,38,
38,38,246,246,246,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,251,
251,251,191,191,191,37,37,37,242,242,242,250,250,250,253,253,253,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,208,208,208,40,40,40,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,152,152,152,114,114,114,22,22,22,
145,145,145,144,144,144,214,214,214,254,254,254,253,253,253,254,254,254,254,254,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,213,213,213,255,255,255,253,253,253,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,2,2,2,
5,5,5,3,3,3,90,90,90,255,255,255,252,252,252,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,128,128,128,
0,0,0,3,3,3,0,0,0,181,181,181,254,254,254,251,251,251,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,221,
221,221,18,18,18,0,0,0,44,44,44,248,248,248,254,254,254,254,254,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,93,93,93,0,0,0,138,138,138,255,255,255,251,251,251,254,254,
254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,179,179,179,6,6,6,223,223,223,254,254,254,
253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,236,236,236,134,134,134,
254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
254,254,254,255,255,255,253,253,253,254,254,254,254,254,254,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255};
static Fl_RGB_Image image_npaxis(idata_npaxis, 22, 22, 3, 0);

void Controls::cb_item1_i(Fl_Menu_*, void*) {
  set_rot('X',0,2);
}
void Controls::cb_item1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item1_i(o,v);
}

static unsigned char idata_nnaxis[] =
{254,254,254,254,254,254,254,254,254,255,255,255,221,221,221,128,128,128,31,
31,31,0,0,0,152,152,152,255,255,255,251,251,251,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,254,254,254,
254,254,254,254,254,254,254,254,254,236,236,236,179,179,179,93,93,93,18,18,18,0,
0,0,2,2,2,0,0,0,114,114,114,208,208,208,191,191,191,195,195,195,195,195,195,
195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,191,191,191,221,221,
221,255,255,255,254,254,254,255,255,255,134,134,134,6,6,6,0,0,0,0,0,0,3,3,3,5,5,
5,0,0,0,22,22,22,40,40,40,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,39,39,39,31,31,31,37,37,37,224,224,224,255,255,255,253,253,253,254,
254,254,223,223,223,138,138,138,44,44,44,0,0,0,3,3,3,0,0,0,145,145,145,255,255,
255,242,242,242,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,245,
245,245,248,248,248,238,238,238,35,35,35,192,192,192,255,255,255,254,254,254,
254,254,254,254,254,254,255,255,255,248,248,248,181,181,181,90,90,90,0,0,0,144,
144,144,255,255,255,250,250,250,254,254,254,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,247,247,247,40,40,40,195,195,195,255,255,
255,254,254,254,254,254,254,253,253,253,251,251,251,254,254,254,254,254,254,255,
255,255,213,213,213,214,214,214,255,255,255,253,253,253,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,253,253,253,255,255,255,245,245,245,38,38,
38,195,195,195,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,251,251,251,252,252,252,255,255,255,254,254,254,254,254,254,255,255,255,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,
255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,253,253,253,253,253,253,
255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,254,254,254,255,255,255,246,246,246,38,38,38,195,
195,195,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,246,
246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,252,252,252,253,253,253,242,242,242,37,37,37,192,192,192,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,247,247,247,
41,41,41,200,200,200,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,255,255,255,253,253,253,255,255,255,214,214,214,
143,143,143,145,145,145,22,22,22,115,115,115,156,156,156,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,253,253,253,
255,255,255,211,211,211,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,252,
252,252,255,255,255,89,89,89,0,0,0,4,4,4,0,0,0,32,32,32,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,251,
251,251,255,255,255,179,179,179,0,0,0,3,3,3,0,0,0,127,127,127,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,249,249,249,48,48,48,0,0,0,18,18,18,219,219,219,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,255,255,255,250,250,250,255,255,255,137,137,137,0,0,0,93,93,93,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,253,253,253,255,255,255,221,221,221,
7,7,7,178,178,178,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,251,251,251,135,135,135,237,237,237,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,
254,254,255,255,255,254,254,254,253,253,253,254,254,254,254,254,254,254,254,254};
static Fl_RGB_Image image_nnaxis(idata_nnaxis, 22, 22, 3, 0);

void Controls::cb_item2_i(Fl_Menu_*, void*) {
  set_rot('X',0,3);
}
void Controls::cb_item2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item2_i(o,v);
}

static unsigned char idata_pnaxis[] =
{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,253,253,253,255,
255,255,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,
254,254,254,254,254,134,134,134,236,236,236,254,254,254,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254,253,253,253,254,254,254,223,223,223,6,6,6,179,179,179,254,254,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,254,254,254,254,254,254,251,251,251,255,255,255,138,138,138,0,0,0,93,93,93,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,254,254,254,248,248,248,44,44,44,0,
0,0,18,18,18,221,221,221,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,251,251,251,254,254,254,181,181,
181,0,0,0,3,3,3,0,0,0,128,128,128,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,254,254,254,254,254,252,252,252,255,255,255,
90,90,90,3,3,3,5,5,5,2,2,2,31,31,31,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,254,254,254,254,254,254,253,253,253,255,255,255,213,213,
213,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,254,254,254,254,254,254,253,253,253,254,254,254,214,214,214,
144,144,144,145,145,145,22,22,22,114,114,114,152,152,152,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,
254,254,254,255,255,255,255,255,255,255,255,255,40,40,40,208,208,208,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,254,254,254,255,255,255,253,253,253,250,250,250,242,242,242,37,37,
37,191,191,191,251,251,251,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,
254,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,254,254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,
254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,254,254,254,254,254,255,255,255,246,246,246,38,38,38,195,
195,195,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,254,254,254,
255,255,255,254,254,254,253,253,253,253,253,253,255,255,255,254,254,254,255,255,
255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,255,255,255,246,
246,246,38,38,38,195,195,195,255,255,255,254,254,254,254,254,254,254,254,254,
255,255,255,254,254,254,251,251,251,252,252,252,255,255,255,255,255,255,254,254,
254,255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
254,254,255,255,255,246,246,246,38,38,38,195,195,195,255,255,255,255,255,255,
254,254,254,253,253,253,250,250,250,255,255,255,255,255,255,255,255,255,211,211,
211,214,214,214,254,254,254,252,252,252,254,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,253,253,253,254,254,254,245,245,245,38,38,38,195,195,195,
255,255,255,254,254,254,254,254,254,255,255,255,255,255,255,249,249,249,179,179,
179,89,89,89,4,4,4,143,143,143,255,255,255,253,253,253,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,248,248,39,39,
39,195,195,195,254,254,254,253,253,253,251,251,251,221,221,221,137,137,137,48,
48,48,0,0,0,0,0,0,0,0,0,145,145,145,247,247,247,242,242,242,246,246,246,246,
246,246,246,246,246,246,246,246,246,246,246,245,245,245,247,247,247,238,238,238,
31,31,31,191,191,191,255,255,255,254,254,254,135,135,135,7,7,7,0,0,0,0,0,0,3,3,
3,4,4,4,0,0,0,22,22,22,41,41,41,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,40,40,40,35,35,35,37,37,37,221,221,221,254,254,254,254,254,
254,237,237,237,178,178,178,93,93,93,18,18,18,0,0,0,0,0,0,0,0,0,115,115,115,200,
200,200,192,192,192,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,
195,195,195,195,195,195,192,192,192,224,224,224,255,255,255,254,254,254,254,254,
254,255,255,255,255,255,255,255,255,255,219,219,219,127,127,127,32,32,32,0,0,0,
156,156,156,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,
254,254};
static Fl_RGB_Image image_pnaxis(idata_pnaxis, 22, 22, 3, 0);

void Controls::cb_1_i(Fl_Menu_*, void*) {
  set_rot('Y',0,0);
}
void Controls::cb_1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void Controls::cb_item3_i(Fl_Menu_*, void*) {
  set_rot('Y',0,1);
}
void Controls::cb_item3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item3_i(o,v);
}

void Controls::cb_item4_i(Fl_Menu_*, void*) {
  set_rot('Y',0,2);
}
void Controls::cb_item4(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item4_i(o,v);
}

void Controls::cb_item5_i(Fl_Menu_*, void*) {
  set_rot('Y',0,3);
}
void Controls::cb_item5(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item5_i(o,v);
}

void Controls::cb_2_i(Fl_Menu_*, void*) {
  set_rot('Z',0,0);
}
void Controls::cb_2(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void Controls::cb_item6_i(Fl_Menu_*, void*) {
  set_rot('Z',0,1);
}
void Controls::cb_item6(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item6_i(o,v);
}

void Controls::cb_item7_i(Fl_Menu_*, void*) {
  set_rot('Z',0,2);
}
void Controls::cb_item7(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item7_i(o,v);
}

void Controls::cb_item8_i(Fl_Menu_*, void*) {
  set_rot('Z',0,3);
}
void Controls::cb_item8(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item8_i(o,v);
}

void Controls::cb_3_i(Fl_Menu_*, void*) {
  set_rot('X',1,0);
}
void Controls::cb_3(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void Controls::cb_item9_i(Fl_Menu_*, void*) {
  set_rot('X',1,1);
}
void Controls::cb_item9(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item9_i(o,v);
}

void Controls::cb_itema_i(Fl_Menu_*, void*) {
  set_rot('X',1,2);
}
void Controls::cb_itema(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itema_i(o,v);
}

void Controls::cb_itemb_i(Fl_Menu_*, void*) {
  set_rot('X',1,3);
}
void Controls::cb_itemb(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemb_i(o,v);
}

void Controls::cb_4_i(Fl_Menu_*, void*) {
  set_rot('Y',1,0);
}
void Controls::cb_4(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_4_i(o,v);
}

void Controls::cb_itemc_i(Fl_Menu_*, void*) {
  set_rot('Y',1,1);
}
void Controls::cb_itemc(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemc_i(o,v);
}

void Controls::cb_itemd_i(Fl_Menu_*, void*) {
  set_rot('Y',1,2);
}
void Controls::cb_itemd(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemd_i(o,v);
}

void Controls::cb_iteme_i(Fl_Menu_*, void*) {
  set_rot('Y',1,3);
}
void Controls::cb_iteme(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_iteme_i(o,v);
}

void Controls::cb_5_i(Fl_Menu_*, void*) {
  set_rot('Z',1,0);
}
void Controls::cb_5(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void Controls::cb_itemf_i(Fl_Menu_*, void*) {
  set_rot('Z',1,1);
}
void Controls::cb_itemf(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_itemf_i(o,v);
}

void Controls::cb_item10_i(Fl_Menu_*, void*) {
  set_rot('Z',1,2);
}
void Controls::cb_item10(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item10_i(o,v);
}

void Controls::cb_item11_i(Fl_Menu_*, void*) {
  set_rot('Z',1,3);
}
void Controls::cb_item11(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_item11_i(o,v);
}

void Controls::cb_vertices_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Vertex);
}
void Controls::cb_vertices(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_vertices_i(o,v);
}

void Controls::cb_cables_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Cable);
}
void Controls::cb_cables(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_cables_i(o,v);
}

void Controls::cb_triangles_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(SurfEle);
}
void Controls::cb_triangles(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_triangles_i(o,v);
}

void Controls::cb_surfaces_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Surface);
}
void Controls::cb_surfaces(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_surfaces_i(o,v);
}

void Controls::cb_voxele_i(Fl_Menu_*, void*) {
  mwtb->randomize_color(Tetrahedron);
}
void Controls::cb_voxele(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_voxele_i(o,v);
}

void Controls::cb_White_i(Fl_Menu_*, void*) {
  mwtb->bgd(1);
}
void Controls::cb_White(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_White_i(o,v);
}

void Controls::cb_Gray_i(Fl_Menu_*, void*) {
  mwtb->bgd(0.6);
}
void Controls::cb_Gray(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Gray_i(o,v);
}

void Controls::cb_Black_i(Fl_Menu_*, void*) {
  mwtb->bgd(0);
}
void Controls::cb_Black(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Black_i(o,v);
}

void Controls::cb_revdraworder_i(Fl_Menu_* o, void*) {
  mwtb->revdraworder( (bool)(o->mvalue()->value()) );
}
void Controls::cb_revdraworder(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_revdraworder_i(o,v);
}

void Controls::cb_Opacity_i(Fl_Menu_*, void*) {
  mwtb->dataopac->window->show();
}
void Controls::cb_Opacity(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Opacity_i(o,v);
}

void Controls::cb_Clipping_i(Fl_Menu_*, void*) {
  mwtb->cplane->window->show();
}
void Controls::cb_Clipping(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Clipping_i(o,v);
}

void Controls::cb_Image_i(Fl_Menu_*, void*) {
  char *fn = fl_file_chooser("PNG image", "*.png", "image.png" );
if( fn!=NULL)
mwtb->output_png(fn);
}
void Controls::cb_Image(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Image_i(o,v);
}

void Controls::cb_Sequence_i(Fl_Menu_*, void*) {
  Sequence *s=new Sequence( mwtb );
s->window->show();
}
void Controls::cb_Sequence(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Sequence_i(o,v);
}

void Controls::cb_PDF_i(Fl_Menu_*, void*) {
  char* fn = fl_file_chooser("PDF file name", "*.pdf", "image.pdf");
if( fn==NULL) return;
mwtb->output_pdf( fn,true );
}
void Controls::cb_PDF(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_PDF_i(o,v);
}

void Controls::cb_EPS_i(Fl_Menu_*, void*) {
  char* fn = fl_file_chooser("EPS file name", "*.eps", "image.eps");
if( fn==NULL) return;
mwtb->output_pdf( fn, false );
}
void Controls::cb_EPS(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_EPS_i(o,v);
}

void Controls::cb_Visible_i(Fl_Menu_*, void*) {
  mwtb->dump_vertices();
}
void Controls::cb_Visible(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Visible_i(o,v);
}

void Controls::cb_start_i(Fl_Menu_*, void*) {
  if( !mwtb->recording ) {
  char* fn=fl_file_chooser( "Pick base name", "*.png", "frame.png" );
  if( fn != NULL ) {
    outmenu->labelcolor(FL_GREEN);
    redrawbut->show();
    mwtb->recording=true;
    mwtb->record_events( fn );
  }
};
}
void Controls::cb_start(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_start_i(o,v);
}

void Controls::cb_stop_i(Fl_Menu_*, void*) {
  mwtb->recording = false;
outmenu->labelcolor(FL_BLACK);
redrawbut->hide();
mainbar->redraw();
}
void Controls::cb_stop(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_stop_i(o,v);
}

void Controls::cb_redrawbut_i(Fl_Menu_*, void*) {
  mwtb->redraw();
}
void Controls::cb_redrawbut(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_redrawbut_i(o,v);
}

Fl_Menu_Item Controls::menu_mainbar[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Add surface", 0,  (Fl_Callback*)Controls::cb_Add, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read data", 0,  (Fl_Callback*)Controls::cb_Read, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read IGB data", 0,  (Fl_Callback*)Controls::cb_Read1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read Vector Data", 0,  (Fl_Callback*)Controls::cb_Read2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Recalibrate on read", 0,  0, 0, 134, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save transform", 0,  (Fl_Callback*)Controls::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Read transform", 0,  (Fl_Callback*)Controls::cb_Read3, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save state", 0,  (Fl_Callback*)Controls::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Restore state", 0,  (Fl_Callback*)Controls::cb_Restore, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)Controls::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Image", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Reset transform", 0,  (Fl_Callback*)Controls::cb_Reset, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"+X", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"+Y", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"+Z", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-X", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itema, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemb, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-Y", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemc, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemd, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_iteme, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"-Z", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_itemf, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_item11, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Randomly colour", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"vertices", 0,  (Fl_Callback*)Controls::cb_vertices, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"cables", 0,  (Fl_Callback*)Controls::cb_cables, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"triangles", 0,  (Fl_Callback*)Controls::cb_triangles, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"surfaces", 0,  (Fl_Callback*)Controls::cb_surfaces, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"voxele", 0,  (Fl_Callback*)Controls::cb_voxele, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Background colour", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"White", 0,  (Fl_Callback*)Controls::cb_White, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Gray", 0,  (Fl_Callback*)Controls::cb_Gray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Black", 0,  (Fl_Callback*)Controls::cb_Black, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Reverse draw order", 0,  (Fl_Callback*)Controls::cb_revdraworder, 0, 2, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Data", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Opacity", 0,  (Fl_Callback*)Controls::cb_Opacity, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clipping", 0,  (Fl_Callback*)Controls::cb_Clipping, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Output", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"PNG", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Image", 0,  (Fl_Callback*)Controls::cb_Image, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Sequence", 0,  (Fl_Callback*)Controls::cb_Sequence, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"PDF", 0,  (Fl_Callback*)Controls::cb_PDF, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"EPS", 0,  (Fl_Callback*)Controls::cb_EPS, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Visible vertices", 0,  (Fl_Callback*)Controls::cb_Visible, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Record", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"start", 0,  (Fl_Callback*)Controls::cb_start, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"stop", 0,  (Fl_Callback*)Controls::cb_stop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Redraw", 0,  (Fl_Callback*)Controls::cb_redrawbut, 0, 16, FL_NORMAL_LABEL, 0, 14, 180},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* Controls::read_recalibrate = Controls::menu_mainbar + 5;
Fl_Menu_Item* Controls::imgmenu = Controls::menu_mainbar + 12;
Fl_Menu_Item* Controls::revdraworder = Controls::menu_mainbar + 64;
Fl_Menu_Item* Controls::outmenu = Controls::menu_mainbar + 70;
Fl_Menu_Item* Controls::recordmenu = Controls::menu_mainbar + 78;
Fl_Menu_Item* Controls::redrawbut = Controls::menu_mainbar + 83;

void Controls::cb_Vertices_i(Fl_Menu_*, void*) {
  mwtb->datify(Vertex);
}
void Controls::cb_Vertices(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Vertices_i(o,v);
}

void Controls::cb_Cables_i(Fl_Menu_*, void*) {
  mwtb->datify(Cable);
}
void Controls::cb_Cables(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Cables_i(o,v);
}

void Controls::cb_Connections_i(Fl_Menu_*, void*) {
  mwtb->datify(Cnnx);
}
void Controls::cb_Connections(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Connections_i(o,v);
}

void Controls::cb_Triangles_i(Fl_Menu_*, void*) {
  mwtb->datify(SurfEle);
}
void Controls::cb_Triangles(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Triangles_i(o,v);
}

void Controls::cb_Surfaces_i(Fl_Menu_*, void*) {
  mwtb->datify(Surface);
}
void Controls::cb_Surfaces(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Surfaces_i(o,v);
}

void Controls::cb_Tetrahedra_i(Fl_Menu_*, void*) {
  mwtb->datify(Tetrahedron);
}
void Controls::cb_Tetrahedra(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Tetrahedra_i(o,v);
}

void Controls::cb_Nothing_i(Fl_Menu_*, void*) {
  mwtb->datify(Nothing);
}
void Controls::cb_Nothing(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Nothing_i(o,v);
}

void Controls::cb_All_i(Fl_Menu_*, void*) {
  mwtb->datify(All);
}
void Controls::cb_All(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_All_i(o,v);
}

Fl_Menu_Item Controls::menu_datachc[] = {
 {"Vertices", 0,  (Fl_Callback*)Controls::cb_Vertices, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Cables", 0,  (Fl_Callback*)Controls::cb_Cables, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Connections", 0,  (Fl_Callback*)Controls::cb_Connections, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Triangles", 0,  (Fl_Callback*)Controls::cb_Triangles, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Surfaces", 0,  (Fl_Callback*)Controls::cb_Surfaces, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Tetrahedra", 0,  (Fl_Callback*)Controls::cb_Tetrahedra, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Nothing", 0,  (Fl_Callback*)Controls::cb_Nothing, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"All", 0,  (Fl_Callback*)Controls::cb_All, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_draw_axes_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void Controls::cb_draw_axes(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_draw_axes_i(o,v);
}

void Controls::cb_Voxele_i(Fl_Button*, void*) {
  pickcolor(Tetrahedron, "Voxele colour");
}
void Controls::cb_Voxele(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->user_data()))->cb_Voxele_i(o,v);
}

void Controls::cb_Surfaces1_i(Fl_Check_Button*, void*) {
  mwtb->dispmode(asSurface);
}
void Controls::cb_Surfaces1(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_Surfaces1_i(o,v);
}

void Controls::cb_Tetrahedral_i(Fl_Check_Button*, void*) {
  mwtb->dispmode(asTetMesh);
}
void Controls::cb_Tetrahedral(Fl_Check_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_Tetrahedral_i(o,v);
}

void Controls::cb_vertbut_i(Fl_Light_Button* o, void*) {
  bool *selreg = regselected();
mwtb->showobj(Vertex,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_vertbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_vertbut_i(o,v);
}

void Controls::cb_cabbut_i(Fl_Light_Button* o, void*) {
  bool *selreg = regselected();
mwtb->showobj(Cable,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_cabbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cabbut_i(o,v);
}

void Controls::cb_cnnxbut_i(Fl_Light_Button* o, void*) {
  bool* selreg=regselected();
mwtb->showobj(Cnnx,selreg,static_cast<bool>(o->value()));
delete[] selreg;
}
void Controls::cb_cnnxbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cnnxbut_i(o,v);
}

void Controls::cb_colour_i(Fl_Button*, void*) {
  pickcolor(Vertex,"Vertex colour");
}
void Controls::cb_colour(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_colour_i(o,v);
}

void Controls::cb_colour1_i(Fl_Button*, void*) {
  pickcolor(Cable,"Cable colour");
}
void Controls::cb_colour1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_colour1_i(o,v);
}

void Controls::cb_colour2_i(Fl_Button*, void*) {
  pickcolor(Cnnx,"Connection colour");
}
void Controls::cb_colour2(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_colour2_i(o,v);
}

void Controls::cb_vertstride_i(MyValueInput* o, void*) {
  mwtb->stride(Vertex,int(o->value()));
}
void Controls::cb_vertstride(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_vertstride_i(o,v);
}

void Controls::cb_cabstridein_i(MyValueInput* o, void*) {
  mwtb->stride(Cable,int(o->value()));
}
void Controls::cb_cabstridein(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cabstridein_i(o,v);
}

void Controls::cb_cnnxstridein_i(MyValueInput* o, void*) {
  mwtb->stride(Cnnx,int(o->value()));
}
void Controls::cb_cnnxstridein(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_cnnxstridein_i(o,v);
}

void Controls::cb_visbut_i(Fl_Light_Button* o, void*) {
  bool *selreg=regselected();
mwtb->visibility(selreg, o->value());
delete[] selreg;
}
void Controls::cb_visbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_visbut_i(o,v);
}

void Controls::cb_select_i(Fl_Button*, void*) {
  for( int i=1; i<=reglist->size();i++)
  reglist->select(i);
}
void Controls::cb_select(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_select_i(o,v);
}

void Controls::cb_deselect_i(Fl_Button*, void*) {
  reglist->deselect();
}
void Controls::cb_deselect(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_deselect_i(o,v);
}

void Controls::cb_reglist_i(Fl_Browser*, void*) {
  int l=reglist->value();
if( l && reglist->selected(l) ) 
  update_regionGUI(l-1);
}
void Controls::cb_reglist(Fl_Browser* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_reglist_i(o,v);
}

void Controls::cb_tethi_i(MyValueInput* o, void*) {
  mwtb->highlight(Tetrahedron,int((o->value())));
}
void Controls::cb_tethi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_tethi_i(o,v);
}

void Controls::cb_elehi_i(MyValueInput* o, void*) {
  mwtb->highlight(SurfEle,static_cast<int>(o->value()));
}
void Controls::cb_elehi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_elehi_i(o,v);
}

void Controls::cb_cabhi_i(MyValueInput* o, void*) {
  mwtb->highlight(Cable,static_cast<int>(o->value()));
}
void Controls::cb_cabhi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_cabhi_i(o,v);
}

void Controls::cb_verthi_i(MyValueInput* o, void*) {
  mwtb->highlight(Vertex,int(o->value()));
vertvalout->value(mwtb->vertex_val(int(o->value())));
}
void Controls::cb_verthi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_verthi_i(o,v);
}

void Controls::cb_cnnxhi_i(MyValueInput* o, void*) {
  mwtb->highlight(Cnnx,static_cast<int>(o->value()));
}
void Controls::cb_cnnxhi(MyValueInput* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_cnnxhi_i(o,v);
}

void Controls::cb_hilighton_i(Fl_Light_Button* o, void*) {
  mwtb->set_hilight( static_cast<bool>(o->value()) );
}
void Controls::cb_hilighton(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_hilighton_i(o,v);
}

void Controls::cb_triangles1_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(SurfEle);
}
void Controls::cb_triangles1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_triangles1_i(o,v);
}

void Controls::cb_Vols_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(Tetrahedron);
}
void Controls::cb_Vols(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vols_i(o,v);
}

void Controls::cb_filled_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(Tetrahedron, 1 );
}
void Controls::cb_filled(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_filled_i(o,v);
}

void Controls::cb_nothing_i(Fl_Menu_*, void*) {
  mwtb->assc_obj(Nothing);
}
void Controls::cb_nothing(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_nothing_i(o,v);
}

Fl_Menu_Item Controls::menu_attachtype[] = {
 {"triangles", 0,  (Fl_Callback*)Controls::cb_triangles1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Vols", 0,  (Fl_Callback*)Controls::cb_Vols, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"filled Vols", 0,  (Fl_Callback*)Controls::cb_filled, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"nothing", 0,  (Fl_Callback*)Controls::cb_nothing, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_current_i(Fl_Button*, void*) {
  highlight_region();
}
void Controls::cb_current(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_current_i(o,v);
}

void Controls::cb_6_i(Fl_Button*, void*) {
  mwtb->hiliteinfo();
}
void Controls::cb_6(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_6_i(o,v);
}

void Controls::cb_Vol_i(Fl_Menu_*, void*) {
  mwtb->solid_hitet(false);
mwtb->redraw();
}
void Controls::cb_Vol(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vol_i(o,v);
}

void Controls::cb_Solid_i(Fl_Menu_*, void*) {
  mwtb->solid_hitet(true);
mwtb->redraw();
}
void Controls::cb_Solid(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Solid_i(o,v);
}

Fl_Menu_Item Controls::menu_hitettype[] = {
 {"Vol Ele", 0,  (Fl_Callback*)Controls::cb_Vol, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Solid Vol Ele", 0,  (Fl_Callback*)Controls::cb_Solid, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_pickvert_i(Fl_Button* o, void*) {
  o->color(128);
mwtb->select_vertex();
}
void Controls::cb_pickvert(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_pickvert_i(o,v);
}

void Controls::cb_plot_i(Fl_Button*, void*) {
  mwtb->timeplot();
}
void Controls::cb_plot(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_plot_i(o,v);
}

void Controls::cb_veconbut_i(Fl_Light_Button* o, void*) {
  mwtb->vecdata->display(o->value());
mwtb->redraw();
}
void Controls::cb_veconbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veconbut_i(o,v);
}

void Controls::cb_veclength_i(Fl_Roller* o, void*) {
  mwtb->vecdata->length(o->value());
mwtb->redraw();
}
void Controls::cb_veclength(Fl_Roller* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veclength_i(o,v);
}

void Controls::cb_veccolor_i(Fl_Button*, void*) {
  mwtb->vecdata->colourize();
mwtb->redraw();
}
void Controls::cb_veccolor(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_veccolor_i(o,v);
}

void Controls::cb_vecautocal_i(Fl_Light_Button* o, void*) {
  mwtb->vecdata->auto_cs(o->value());
}
void Controls::cb_vecautocal(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_vecautocal_i(o,v);
}

void Controls::cb_7_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_RAINBOW);
mwtb->redraw();
}
void Controls::cb_7(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_7_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_rainbow[] = {
"70 15 70 1",
"  c #0207ff",
". c #0f00ff",
"X c #001bff",
"o c #0032ff",
"O c #2500ff",
"+ c #3b00ff",
"@ c #0046ff",
"# c #005cff",
"$ c #0072ff",
"% c #5000ff",
"& c #6600ff",
"* c #7b00ff",
"= c #03ff02",
"- c #00ff12",
"; c #16ff00",
": c #00ff2b",
"> c #00ff3f",
", c #2dff00",
"< c #00ff55",
"1 c #00ff6b",
"2 c #00ff7f",
"3 c #42ff00",
"4 c #58ff00",
"5 c #6dff00",
"6 c #7eff00",
"7 c #0083ff",
"8 c #0097ff",
"9 c #00adff",
"0 c #00ff91",
"q c #00ffa5",
"w c #00ffbb",
"e c #00c2ff",
"r c #00d8ff",
"t c #00ffd0",
"y c #00eeff",
"u c #00ffe6",
"i c #00fcf9",
"p c #ff0603",
"a c #ff0012",
"s c #ff1800",
"d c #ff0027",
"f c #ff003d",
"g c #ff2f00",
"h c #ff0053",
"j c #ff0067",
"k c #ff0079",
"l c #ff4400",
"z c #ff5a00",
"x c #ff7000",
"c c #8c00ff",
"v c #9f00ff",
"b c #b600ff",
"n c #ff008d",
"m c #ff00a3",
"M c #ff00b6",
"N c #cd00ff",
"B c #d400ff",
"V c #ff00d1",
"C c #92ff00",
"Z c #a8ff00",
"A c #bdff00",
"S c #ff8200",
"D c #ff9400",
"F c #ffaa00",
"G c #d3ff00",
"H c #ffc000",
"J c #ffd500",
"K c #e8ff00",
"L c #ffeb00",
"P c #fafb00",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV",
"BNbvc*&%+O. Xo@#$789eryiutwq021<>:-=;,3456CZAGKPLJHFDSxzlgspadfhjknmMV"
};
static Fl_Pixmap image_rainbow(idata_rainbow);

void Controls::cb_8_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_BL_RAINBOW);
mwtb->redraw();
}
void Controls::cb_8(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_8_i(o,v);
}

static const char *idata_blrainbow[] = {
"70 15 70 1",
"  c Gray0",
". c #00000d",
"X c #000025",
"o c #000039",
"O c #000054",
"+ c #000069",
"@ c #00007e",
"# c #000092",
"$ c #0000a7",
"% c #0000bc",
"& c #0000d1",
"* c #0000e7",
"= c #0005fd",
"- c #0016ff",
"; c #002cff",
": c #0041ff",
"> c #0056ff",
", c #006bff",
"< c #007eff",
"1 c #00ff07",
"2 c #0bff00",
"3 c #00ff24",
"4 c #00ff39",
"5 c #21ff00",
"6 c #36ff00",
"7 c #00ff4e",
"8 c #00ff63",
"9 c #00ff78",
"0 c #4bff00",
"q c #60ff00",
"w c #75ff00",
"e c #0097ff",
"r c #00b0ff",
"t c #00ff8c",
"y c #00ffa1",
"u c #00ffb7",
"i c #00c4ff",
"p c #00d9ff",
"a c #00ffd2",
"s c #00efff",
"d c #00ffe6",
"f c #00fcf8",
"g c #ff0905",
"h c #ff1900",
"j c #ff1516",
"k c #ff2f00",
"l c #ff2b2b",
"z c #ff4400",
"x c #ff5900",
"c c #ff6e00",
"v c #ff4040",
"b c #ff5555",
"n c #ff6a6a",
"m c #ff7e7e",
"M c #89ff00",
"N c #9fff00",
"B c #baff00",
"V c #ff8300",
"C c #ff9600",
"Z c #ffaf00",
"A c #ceff00",
"S c #ffc800",
"D c #ffdc00",
"F c #e3ff00",
"G c #f6fd00",
"H c #fff200",
"J c #ff9393",
"K c #ffaeae",
"L c #ffc2c2",
"P c #ffdada",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP",
" .XoO+@#$%&*=-;:>,<eripsfdauyt9874312560qwMNBAFGHDSZCVcxzkhgjlvbnmJKLP"
};
static Fl_Pixmap image_blrainbow(idata_blrainbow);

void Controls::cb_9_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_HOT);
mwtb->redraw();
}
void Controls::cb_9(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_9_i(o,v);
}

static const char *idata_hot[] = {
"70 15 76 1",
"  c #1c0301",
". c #1d0302",
"X c #1d0402",
"o c #250000",
"O c #300000",
"+ c #3a0000",
"@ c #430000",
"# c #4e0000",
"$ c #590000",
"% c #5b3616",
"& c #640000",
"* c #6f0000",
"= c #790000",
"- c #70441e",
"; c #72451f",
": c #73461f",
"> c #734720",
", c #830000",
"< c #8e0000",
"1 c #990000",
"2 c #a40000",
"3 c #af0000",
"4 c #ba0000",
"5 c #c20000",
"6 c #cd0000",
"7 c #d80000",
"8 c #e20000",
"9 c #ed0000",
"0 c #f80000",
"q c #fe0500",
"w c #ff0f00",
"e c #ff1a00",
"r c #ff2400",
"t c #ff3000",
"y c #ff3900",
"u c #ff4200",
"i c #ff4d00",
"p c #ff5800",
"a c #ff6300",
"s c #ff6e00",
"d c #ff7800",
"f c #ff8300",
"g c #ff8d00",
"h c #ff9800",
"j c #ffa300",
"k c #ffae00",
"l c #ffb800",
"z c #ffc100",
"x c #ffcc00",
"c c #ffd700",
"v c #ffe200",
"b c #ffed00",
"n c #fff700",
"m c #fffe04",
"M c #ffff0e",
"N c #ffff19",
"B c #ffff24",
"V c #ffff2e",
"C c #ffff3a",
"Z c #ffff42",
"A c #ffff4d",
"S c #ffff57",
"D c #ffff62",
"F c #ffff6d",
"G c #ffff78",
"H c #ffff82",
"J c #ffff8d",
"K c #ffff97",
"L c #ffffa2",
"P c #ffffad",
"I c #ffffb7",
"U c #ffffc0",
"Y c #ffffcb",
"T c #ffffd6",
"R c LightYellow",
"E c #ffffed",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
">XoO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
"%.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":XoO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE",
":.oO+@#$&*=,<1234567890qwertyuipasdfghjklzxcvbnmMNBVCZASDFGHJKLPIUYTRE"
};
static Fl_Pixmap image_hot(idata_hot);

void Controls::cb_a_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_COLD_HOT);
mwtb->redraw();
}
void Controls::cb_a(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_a_i(o,v);
}

static const char *idata_coldhot[] = {
"70 15 70 1",
"  c #0f0fff",
". c #1414ff",
"X c #1c1cff",
"o c #2323ff",
"O c #2929ff",
"+ c #3030ff",
"@ c #3737ff",
"# c #3e3eff",
"$ c #4545ff",
"% c #4d4dff",
"& c #5454ff",
"* c #5b5bff",
"= c #6262ff",
"- c #6969ff",
"; c #7070ff",
": c #7878ff",
"> c #7f7fff",
", c #ff0404",
"< c #ff0c0c",
"1 c #ff1313",
"2 c #ff1a1a",
"3 c #ff2222",
"4 c #ff2828",
"5 c #ff2e2e",
"6 c #ff3535",
"7 c #ff3d3d",
"8 c #ff4444",
"9 c #ff4b4b",
"0 c #ff5252",
"q c #ff5959",
"w c #ff6060",
"e c #ff6868",
"r c #ff6f6f",
"t c #ff7676",
"y c #ff7c7c",
"u c #8484ff",
"i c #8b8bff",
"p c #9292ff",
"a c #9999ff",
"s c #a0a0ff",
"d c #a7a7ff",
"f c #aeaeff",
"g c #b6b6ff",
"h c #bdbdff",
"j c #ff8282",
"k c #ff8989",
"l c #ff9090",
"z c #ff9797",
"x c #ff9e9e",
"c c #ffa6a6",
"v c #ffadad",
"b c #ffb4b4",
"n c #ffbbbb",
"m c #c4c4ff",
"M c #cbcbff",
"N c #d1d1ff",
"B c #d8d8ff",
"V c #dfdfff",
"C c #ffc2c2",
"Z c #ffcaca",
"A c #ffd0d0",
"S c #ffd6d6",
"D c #ffdddd",
"F c #e6e6ff",
"G c #ededff",
"H c #ffe5e5",
"J c #ffecec",
"K c #f5f5ff",
"L c #fff3f3",
"P c #fcf8fb",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,",
" .XoO+@#$%&*=-;:>uipasdfghmMNBVFGKPLJHDSAZCnbvcxzlkjytrewq0987654321<,"
};
static Fl_Pixmap image_coldhot(idata_coldhot);

void Controls::cb_b_i(Fl_Menu_*, void*) {
  mwtb->vecdata->cs->scale(CS_GREY);
mwtb->redraw();
}
void Controls::cb_b(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_b_i(o,v);
}

static const char *idata_blwhite[] = {
"70 15 88 1",
"  c #06080a",
". c #06080b",
"X c #06090b",
"o c #07090b",
"O c #10100f",
"+ c #1a130b",
"@ c #1c140b",
"# c #1e150c",
"$ c #1f150c",
"% c #1f160d",
"& c #131313",
"* c #161616",
"= c #191919",
"- c #1d1d1d",
"; c Gray13",
": c Gray14",
"> c #282828",
", c Gray17",
"< c #2f2f2f",
"1 c Gray20",
"2 c Gray21",
"3 c #3a3a3a",
"4 c #3e3e3e",
"5 c #414141",
"6 c #444444",
"7 c #484848",
"8 c #4b4b4b",
"9 c Gray31",
"0 c #535353",
"q c #565656",
"w c #5a5a5a",
"e c #5d5d5d",
"r c Gray38",
"t c #656565",
"y c #686868",
"u c Gray42",
"i c #6f6f6f",
"p c #727272",
"a c #767676",
"s c Gray48",
"d c Gray49",
"f c #9c5f23",
"g c #a2601e",
"h c #b16a23",
"j c #b26923",
"k c #b26a23",
"l c #b16b24",
"z c #b36c21",
"x c #b36c23",
"c c #b36c24",
"v c #b56c21",
"b c #b56f26",
"n c #b66e24",
"m c #818181",
"M c #838383",
"N c Gray53",
"B c #8b8b8b",
"V c #8e8e8e",
"C c #929292",
"Z c #959595",
"A c #989898",
"S c Gray61",
"D c #a0a0a0",
"F c Gray64",
"G c #a7a7a7",
"H c #aaaaaa",
"J c #aeaeae",
"K c #b2b2b2",
"L c Gray71",
"P c #b9b9b9",
"I c Gray74",
"U c #c0c0c0",
"Y c #c3c3c3",
"T c Gray78",
"R c #cacaca",
"E c #cecece",
"W c #d2d2d2",
"Q c #d5d5d5",
"! c Gray85",
"~ c gainsboro",
"^ c Gray88",
"/ c #e4e4e4",
"( c #e7e7e7",
") c #eaeaea",
"_ c #eeeeee",
"` c #f1f1f1",
"\' c Gray96",
"] c #f9f9f9",
"z$.O&*=-;:>,11134568890qwertyyipasdmmNBVCZASDDFHJKLPIUTTREWQ!~^/))_`\']",
"v$.O&*=-;:>,,1134568890qwertyiipasdmmBBVCZASDDHHJKLPIUUTREWQ!~^//)_`\']",
"v$.O&*=-;:>>11334558890qwertyyipasdmmNBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']",
"n$.O&*=-;:>>,1134566890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"c$.O&*=-;:>,11134568890qwertyyipasdmNNBVCZASDFHHJKLPIUTTREWQ!~^//)_`\']",
"k$.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"k$.O&*=-;:>,11334558890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^//)_`\']",
"z$.O&*=-;:>,,1134568890qwertyiipasdmmNBVCZASDFHHJKLPIUURREWQ!~^//)_`\']",
"g@.O&*=-;:>,11134568890qwertyyipasdmmNBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']",
"f+.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDFFHJKLPIUUTREWQ!~^/))_`\']",
"n$.O&*=-;:>>11334558890qwertyiipasdmmBBVCZASDFFHJKLPIUTTREWQ!~^//)_`\']",
"l$.O&*=-;:>>,1134566890qwertyyipasdmmNBVCZASDDHHJKLPIUUTREWQ!~^//)_`\']",
"k$.O&*=-;:>,11134568890qwertyiipasdmmNBVCZASDDHHJKLPIUUTREWQ!~^/))_`\']",
"k$.O&*=-;:>,,1134568890qwertyyipasdmmNBVCZASDDFHJKLPIUURREWQ!~^//)_`\']",
"c$.O**=-;:>,,1334568890qwertyyipasdmmBBVCZASDFHHJKLPIUUTREWQ!~^//)_`\']"
};
static Fl_Pixmap image_blwhite(idata_blwhite);

Fl_Menu_Item Controls::menu_veccstype[] = {
 {0, 0,  (Fl_Callback*)Controls::cb_7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_9, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_a, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_b, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_Vector_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(Vector);
mwtb->redraw();
}
void Controls::cb_Vector(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vector_i(o,v);
}

void Controls::cb_Scalar_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(Scalar);
mwtb->redraw();
}
void Controls::cb_Scalar(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Scalar_i(o,v);
}

void Controls::cb_Fixed_i(Fl_Menu_*, void*) {
  mwtb->vecdata->length_det(FixedVCdata);
mwtb->redraw();
}
void Controls::cb_Fixed(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Fixed_i(o,v);
}

Fl_Menu_Item Controls::menu_veclengthdeterm[] = {
 {"Vector mag", 0,  (Fl_Callback*)Controls::cb_Vector, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalar", 0,  (Fl_Callback*)Controls::cb_Scalar, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fixed", 0,  (Fl_Callback*)Controls::cb_Fixed, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_Vector1_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(Vector);
mwtb->redraw();
}
void Controls::cb_Vector1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Vector1_i(o,v);
}

void Controls::cb_Scalar1_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(Scalar);
mwtb->redraw();
}
void Controls::cb_Scalar1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Scalar1_i(o,v);
}

void Controls::cb_Fixed1_i(Fl_Menu_*, void*) {
  mwtb->vecdata->colour_det(FixedVCdata);
mwtb->redraw();
}
void Controls::cb_Fixed1(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Fixed1_i(o,v);
}

Fl_Menu_Item Controls::menu_veccoldeterm[] = {
 {"Vector mag", 0,  (Fl_Callback*)Controls::cb_Vector1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scalar", 0,  (Fl_Callback*)Controls::cb_Scalar1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fixed", 0,  (Fl_Callback*)Controls::cb_Fixed1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_optimal_i(Fl_Button*, void*) {
  mwtb->vecdata->optimize_cs();
mwtb->redraw();
}
void Controls::cb_optimal(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_optimal_i(o,v);
}

void Controls::cb_lightx_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lightx(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lightx_i(o,v);
}

void Controls::cb_lighty_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lighty(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lighty_i(o,v);
}

void Controls::cb_lightz_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_lightz(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_lightz_i(o,v);
}

void Controls::cb_reset_i(Fl_Button*, void*) {
  lightx->value(0);
lighty->value(0.);
lightz->value(1);
mwtb->redraw();
}
void Controls::cb_reset(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

void Controls::cb_showLightDir_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void Controls::cb_showLightDir(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_showLightDir_i(o,v);
}

void Controls::cb_zero_i(Fl_Button*, void*) {
  lightx->value(0);
mwtb->redraw();
}
void Controls::cb_zero(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero_i(o,v);
}

void Controls::cb_zero1_i(Fl_Button*, void*) {
  lighty->value(0);
mwtb->redraw();
}
void Controls::cb_zero1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero1_i(o,v);
}

void Controls::cb_zero2_i(Fl_Button*, void*) {
  lightz->value(0);
mwtb->redraw();
}
void Controls::cb_zero2(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_zero2_i(o,v);
}

void Controls::cb_illBut_i(Fl_Light_Button* o, void*) {
  mwtb->lights((bool)o->value());
}
void Controls::cb_illBut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_illBut_i(o,v);
}

void Controls::cb_ambientslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_ambientslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_ambientslide_i(o,v);
}

void Controls::cb_facetshadBut_i(Fl_Light_Button* o, void*) {
  mwtb->facetshade( (bool)(o->value()) );
}
void Controls::cb_facetshadBut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_facetshadBut_i(o,v);
}

void Controls::cb_fixed_i(Fl_Light_Button* o, void*) {
  mwtb->headlamp(o->value());
}
void Controls::cb_fixed(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_fixed_i(o,v);
}

void Controls::cb_specularslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_specularslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_specularslide_i(o,v);
}

void Controls::cb_diffuseslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_diffuseslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_diffuseslide_i(o,v);
}

void Controls::cb_backintensityslide_i(Fl_Value_Slider*, void*) {
  mwtb->redraw();
}
void Controls::cb_backintensityslide(Fl_Value_Slider* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_backintensityslide_i(o,v);
}

void Controls::cb_surfvisbut_i(Fl_Light_Button* o, void*) {
  mwtb->surfVis( currsurf->value()-1,static_cast<bool>(o->value()));
}
void Controls::cb_surfvisbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surfvisbut_i(o,v);
}

void Controls::cb_currsurf_i(Fl_Choice* o, void*) {
  update_surfGUI( o->value()-1 );
}
void Controls::cb_currsurf(Fl_Choice* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_currsurf_i(o,v);
}

Fl_Menu_Item Controls::menu_currsurf[] = {
 {"All", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_surfoutlinebut_i(Fl_Light_Button* o, void*) {
  mwtb->surfOutline(currsurf->value()-1,static_cast<bool>(o->value()));
}
void Controls::cb_surfoutlinebut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surfoutlinebut_i(o,v);
}

void Controls::cb_surffillbut_i(Fl_Light_Button* o, void*) {
  mwtb->surfFilled(currsurf->value()-1,static_cast<bool>(o->value()));
}
void Controls::cb_surffillbut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_surffillbut_i(o,v);
}

void Controls::cb_Outline_i(Fl_Button*, void*) {
  pick_surf_color( SurfEle, "Outline Colour" );
}
void Controls::cb_Outline(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Outline_i(o,v);
}

void Controls::cb_Fill_i(Fl_Button*, void*) {
  pick_surf_color( Surface, "Surface colour" );
}
void Controls::cb_Fill(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->parent()->user_data()))->cb_Fill_i(o,v);
}

void Controls::cb_optimal1_i(Fl_Button*, void*) {
  mwtb->optimize_cs();
mincolval->value(mwtb->cs->min());
maxcolval->value(mwtb->cs->max());
}
void Controls::cb_optimal1(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_optimal1_i(o,v);
}

void Controls::cb_c_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_RAINBOW);
mwtb->redraw();
}
void Controls::cb_c(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_c_i(o,v);
}

void Controls::cb_d_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_BL_RAINBOW);
mwtb->redraw();
}
void Controls::cb_d(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_d_i(o,v);
}

void Controls::cb_e_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_HOT);
mwtb->redraw();
}
void Controls::cb_e(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_e_i(o,v);
}

void Controls::cb_f_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_COLD_HOT);
mwtb->redraw();
}
void Controls::cb_f(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_f_i(o,v);
}

void Controls::cb_10_i(Fl_Menu_*, void*) {
  mwtb->cs->scale(CS_GREY);
mwtb->redraw();
}
void Controls::cb_10(Fl_Menu_* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_10_i(o,v);
}

Fl_Menu_Item Controls::menu_cstype[] = {
 {0, 0,  (Fl_Callback*)Controls::cb_c, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_d, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_e, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_f, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  (Fl_Callback*)Controls::cb_10, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void Controls::cb_mincolval_i(Fl_Value_Input* o, void*) {
  mwtb->cs->calibrate(o->value(),mwtb->cs->max());
mwtb->redraw();
}
void Controls::cb_mincolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_mincolval_i(o,v);
}

void Controls::cb_maxcolval_i(Fl_Value_Input* o, void*) {
  mwtb->cs->calibrate(mwtb->cs->min(),o->value());
mwtb->redraw();
}
void Controls::cb_maxcolval(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_maxcolval_i(o,v);
}

void Controls::cb_numcolev_i(Fl_Value_Input* o, void*) {
  mwtb->cs->size((int)(o->value()));
mwtb->redraw();
}
void Controls::cb_numcolev(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_numcolev_i(o,v);
}

void Controls::cb_autocalibratebut_i(Fl_Light_Button* o, void*) {
  mwtb->autocolour(o->value());
}
void Controls::cb_autocalibratebut(Fl_Light_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_autocalibratebut_i(o,v);
}

void Controls::cb_tmslider_i(Myslider* o, void*) {
  mwtb->set_time(int(o->value()));
}
void Controls::cb_tmslider(Myslider* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_tmslider_i(o,v);
}

void Controls::cb_11_i(Fl_Button*, void*) {
  mwtb->animate_skip( int(frameskip->value()),this );
}
void Controls::cb_11(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_11_i(o,v);
}

void Controls::cb_12_i(Fl_Button*, void*) {
  mwtb->animate_skip(0,this);
}
void Controls::cb_12(Fl_Button* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_12_i(o,v);
}

void Controls::cb_frameskip_i(Fl_Counter*, void*) {
  mwtb->animate_skip(int(frameskip->value()),NULL);
}
void Controls::cb_frameskip(Fl_Counter* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_frameskip_i(o,v);
}

void Controls::cb_animdelay_i(Fl_Value_Input* o, void*) {
  mwtb->animate_delay(o->value()/1000.);
}
void Controls::cb_animdelay(Fl_Value_Input* o, void* v) {
  ((Controls*)(o->parent()->parent()->user_data()))->cb_animdelay_i(o,v);
}

Controls::Controls() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = window = new Fl_Double_Window(350, 650, "Meshalyzer Controls");
    w = o;
    o->box(FL_UP_BOX);
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = mainbar = new Fl_Menu_Bar(0, 0, 350, 30);
      o->labelcolor((Fl_Color)1);
 {Fl_Menu_Item* o = &menu_mainbar[16];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[17];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[18];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[19];
      o->image(image_pnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[22];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[23];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[24];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[25];
      o->image(image_pnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[28];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[29];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[30];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[31];
      o->image(image_pnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[34];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[35];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[36];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[37];
      o->image(image_pnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[40];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[41];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[42];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[43];
      o->image(image_pnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[46];
      o->image(image_ppaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[47];
      o->image(image_npaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[48];
      o->image(image_nnaxis);
      }
 {Fl_Menu_Item* o = &menu_mainbar[49];
      o->image(image_pnaxis);
      }
      o->menu(menu_mainbar);
    }
    { Fl_Choice* o = datachc = new Fl_Choice(75, 50, 110, 25, "Data on");
      o->tooltip("use data to color which elements");
      o->down_box(FL_BORDER_BOX);
      o->menu(menu_datachc);
      o->value(3);
    }
    { Fl_Light_Button* o = draw_axes = new Fl_Light_Button(10, 85, 80, 25, "Axes");
      o->tooltip("toggle axs display");
      o->callback((Fl_Callback*)cb_draw_axes);
    }
    { Fl_Button* o = new Fl_Button(95, 85, 85, 25, "Voxele  colour");
      o->labelsize(13);
      o->callback((Fl_Callback*)cb_Voxele);
    }
    { Fl_Group* o = new Fl_Group(190, 50, 150, 60, "Display as:");
      o->box(FL_ENGRAVED_BOX);
      { Fl_Check_Button* o = new Fl_Check_Button(195, 55, 90, 25, "Surfaces");
        o->type(102);
        o->down_box(FL_DIAMOND_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)cb_Surfaces1);
      }
      { Fl_Check_Button* o = new Fl_Check_Button(195, 80, 140, 25, "Tetrahedral Mesh");
        o->type(102);
        o->down_box(FL_DIAMOND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Tetrahedral);
      }
      o->end();
    }
    { Fl_Group* o = regiondisp = new Fl_Group(10, 120, 330, 145, "Region");
      o->box(FL_ENGRAVED_BOX);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Light_Button* o = vertbut = new Fl_Light_Button(160, 141, 100, 25, "Vertices");
        o->callback((Fl_Callback*)cb_vertbut);
        o->when(FL_WHEN_CHANGED);
      }
      { Fl_Light_Button* o = cabbut = new Fl_Light_Button(160, 166, 100, 24, "Cables");
        o->callback((Fl_Callback*)cb_cabbut);
      }
      { Fl_Light_Button* o = cnnxbut = new Fl_Light_Button(160, 190, 100, 25, "Connections");
        o->callback((Fl_Callback*)cb_cnnxbut);
      }
      { Fl_Button* o = new Fl_Button(260, 140, 45, 25, "colour");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_colour);
      }
      { Fl_Button* o = new Fl_Button(260, 165, 45, 25, "colour");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_colour1);
      }
      { Fl_Button* o = new Fl_Button(260, 190, 45, 25, "colour");
        o->labelsize(12);
        o->callback((Fl_Callback*)cb_colour2);
      }
      { MyValueInput* o = vertstride = new MyValueInput(305, 140, 25, 25, "Tetrahedron:");
        o->tooltip("stride when rendering vertices");
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NO_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->minimum(1);
        o->maximum(1000);
        o->step(1);
        o->value(1);
        o->callback((Fl_Callback*)cb_vertstride);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_CHANGED);
      }
      { MyValueInput* o = cabstridein = new MyValueInput(305, 164, 25, 25, "Tetrahedron:");
        o->tooltip("stride");
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NO_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->minimum(1);
        o->maximum(100);
        o->step(1);
        o->value(1);
        o->callback((Fl_Callback*)cb_cabstridein);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_CHANGED);
      }
      { MyValueInput* o = cnnxstridein = new MyValueInput(305, 187, 25, 25, "Tetrahedron:");
        o->tooltip("stride");
        o->box(FL_DOWN_BOX);
        o->color(FL_BACKGROUND2_COLOR);
        o->selection_color(FL_SELECTION_COLOR);
        o->labeltype(FL_NO_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->minimum(1);
        o->maximum(100);
        o->step(1);
        o->value(1);
        o->callback((Fl_Callback*)cb_cnnxstridein);
        o->align(FL_ALIGN_LEFT);
        o->when(FL_WHEN_CHANGED);
      }
      { Fl_Light_Button* o = visbut = new Fl_Light_Button(160, 215, 100, 20, "visible");
        o->value(1);
        o->callback((Fl_Callback*)cb_visbut);
      }
      { Fl_Button* o = new Fl_Button(160, 240, 80, 20, "select all");
        o->callback((Fl_Callback*)cb_select);
      }
      { Fl_Button* o = new Fl_Button(243, 240, 85, 20, "deselect all");
        o->callback((Fl_Callback*)cb_deselect);
      }
      { Fl_Browser* o = reglist = new Fl_Browser(20, 140, 125, 115);
        o->type(3);
        o->callback((Fl_Callback*)cb_reglist);
      }
      o->end();
    }
    { Fl_Tabs* o = tabwidget = new Fl_Tabs(10, 270, 330, 215);
      o->align(FL_ALIGN_CENTER);
      { Fl_Group* o = hilightgrp = new Fl_Group(10, 305, 330, 170, "Highlight");
        o->labelfont(1);
        o->labelsize(12);
        o->labelcolor((Fl_Color)121);
        o->align(FL_ALIGN_LEFT);
        o->hide();
        { MyValueInput* o = tethi = new MyValueInput(100, 345, 85, 25, "Tetrahedron:");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NO_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->step(1);
          o->callback((Fl_Callback*)cb_tethi);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_CHANGED);
        }
        { MyValueInput* o = elehi = new MyValueInput(190, 345, 85, 25, ":Triangle");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->step(1);
          o->callback((Fl_Callback*)cb_elehi);
          o->align(FL_ALIGN_RIGHT);
          o->when(FL_WHEN_CHANGED);
        }
        { MyValueInput* o = cabhi = new MyValueInput(190, 375, 85, 25, ":Cable");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->step(1);
          o->callback((Fl_Callback*)cb_cabhi);
          o->align(FL_ALIGN_RIGHT);
          o->when(FL_WHEN_CHANGED);
        }
        { MyValueInput* o = verthi = new MyValueInput(100, 405, 85, 25, "Vertex:");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->step(1);
          o->callback((Fl_Callback*)cb_verthi);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_CHANGED);
        }
        { MyValueInput* o = cnnxhi = new MyValueInput(100, 375, 85, 25, "Connection:");
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->selection_color(FL_SELECTION_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_FOREGROUND_COLOR);
          o->step(1);
          o->callback((Fl_Callback*)cb_cnnxhi);
          o->align(FL_ALIGN_LEFT);
          o->when(FL_WHEN_CHANGED);
        }
        { Fl_Light_Button* o = hilighton = new Fl_Light_Button(100, 315, 85, 25, "on");
          o->callback((Fl_Callback*)cb_hilighton);
        }
        { Fl_Choice* o = attachtype = new Fl_Choice(90, 435, 100, 20, "attached");
          o->tooltip("draw which objects associated with vertex");
          o->down_box(FL_BORDER_BOX);
          o->align(FL_ALIGN_BOTTOM);
          o->when(FL_WHEN_CHANGED);
          o->menu(menu_attachtype);
        }
        { Fl_Button* o = new Fl_Button(190, 315, 85, 25, "current reg/surf");
          o->tooltip("set all objects to 1st in currently selected surface");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_current);
        }
        { Fl_Button* o = new Fl_Button(290, 315, 30, 25, "?");
          o->tooltip("display info on highlighted objects");
          o->box(FL_ROUND_UP_BOX);
          o->color((Fl_Color)133);
          o->callback((Fl_Callback*)cb_6);
        }
        { Fl_Value_Output* o = vertvalout = new Fl_Value_Output(190, 405, 85, 25, ":value");
          o->tooltip("vertex value");
          o->color((Fl_Color)174);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Choice* o = hitettype = new Fl_Choice(15, 345, 85, 25);
          o->tooltip("display style");
          o->down_box(FL_BORDER_BOX);
          o->textsize(10);
          o->menu(menu_hitettype);
        }
        { Fl_Button* o = pickvert = new Fl_Button(15, 435, 70, 30, "Pick Vertex");
          o->tooltip("select a vertex with mouse");
          o->color((Fl_Color)131);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_pickvert);
        }
        { Fl_Button* o = new Fl_Button(195, 435, 105, 30, "plot time series");
          o->color((Fl_Color)124);
          o->callback((Fl_Callback*)cb_plot);
        }
        o->end();
      }
      { Fl_Group* o = vectorgrp = new Fl_Group(15, 325, 315, 140, "Vectors");
        o->labelsize(12);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        o->deactivate();
        { Fl_Light_Button* o = veconbut = new Fl_Light_Button(20, 340, 70, 25, "Vectors");
          o->tooltip("display vectors?");
          o->value(1);
          o->callback((Fl_Callback*)cb_veconbut);
        }
        { Fl_Roller* o = veclength = new Fl_Roller(100, 340, 150, 25, "Scale Arrows");
          o->tooltip("scale all vectors");
          o->type(1);
          o->labelsize(12);
          o->maximum(100);
          o->step(0.1);
          o->value(1);
          o->callback((Fl_Callback*)cb_veclength);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Button* o = veccolor = new Fl_Button(255, 375, 75, 25, "colour");
          o->tooltip("fixed colour");
          o->callback((Fl_Callback*)cb_veccolor);
        }
        { Fl_Light_Button* o = vecautocal = new Fl_Light_Button(20, 410, 80, 30, "auto cs");
          o->tooltip("calibrate every new time");
          o->callback((Fl_Callback*)cb_vecautocal);
        }
        { Fl_Choice* o = veccstype = new Fl_Choice(220, 410, 110, 30, "colour scale");
          o->down_box(FL_BORDER_BOX);
          o->labelsize(10);
          o->align(FL_ALIGN_BOTTOM);
 {Fl_Menu_Item* o = &menu_veccstype[0];
          o->image(image_rainbow);
          }
 {Fl_Menu_Item* o = &menu_veccstype[1];
          o->image(image_blrainbow);
          }
 {Fl_Menu_Item* o = &menu_veccstype[2];
          o->image(image_hot);
          }
 {Fl_Menu_Item* o = &menu_veccstype[3];
          o->image(image_coldhot);
          }
 {Fl_Menu_Item* o = &menu_veccstype[4];
          o->image(image_blwhite);
          }
          o->menu(menu_veccstype);
          o->value(1);
        }
        { Fl_Menu_Button* o = veclengthdeterm = new Fl_Menu_Button(20, 375, 90, 25, "Length");
          o->tooltip("determinant of vector length");
          o->menu(menu_veclengthdeterm);
        }
        { Fl_Menu_Button* o = veccoldeterm = new Fl_Menu_Button(140, 375, 90, 25, "Colour");
          o->tooltip("determinant of vector colour");
          o->menu(menu_veccoldeterm);
        }
        { Fl_Button* o = new Fl_Button(120, 410, 75, 30, "optimal");
          o->tooltip("calibrate for current time");
          o->box(FL_ROUND_UP_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_optimal);
        }
        o->end();
      }
      { Fl_Group* o = lightgrp = new Fl_Group(10, 295, 330, 185, "Lights");
        o->labelsize(12);
        o->labelcolor((Fl_Color)188);
        o->hide();
        { Fl_Value_Slider* o = lightx = new Fl_Value_Slider(15, 330, 120, 20, "X direction");
          o->tooltip("X component of light direction");
          o->type(1);
          o->selection_color((Fl_Color)71);
          o->labelsize(12);
          o->minimum(-1);
          o->callback((Fl_Callback*)cb_lightx);
        }
        { Fl_Value_Slider* o = lighty = new Fl_Value_Slider(15, 370, 120, 20, "Y direction");
          o->tooltip("Y component of light direction");
          o->type(1);
          o->selection_color((Fl_Color)190);
          o->labelsize(12);
          o->minimum(-1);
          o->callback((Fl_Callback*)cb_lighty);
        }
        { Fl_Value_Slider* o = lightz = new Fl_Value_Slider(15, 410, 120, 20, "Z directtion");
          o->tooltip("z component of light direction");
          o->type(1);
          o->selection_color((Fl_Color)244);
          o->labelsize(12);
          o->minimum(-1);
          o->value(1);
          o->callback((Fl_Callback*)cb_lightz);
        }
        { Fl_Button* o = new Fl_Button(165, 305, 60, 20, "reset");
          o->tooltip("reset light direction to default");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_reset);
        }
        { Fl_Light_Button* o = showLightDir = new Fl_Light_Button(125, 450, 100, 25, "show direction");
          o->tooltip("draw an arrow indicating the light direction");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_showLightDir);
        }
        { Fl_Button* o = new Fl_Button(15, 305, 35, 20, "zero X");
          o->tooltip("set x component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero);
        }
        { Fl_Button* o = new Fl_Button(60, 305, 35, 20, "zero Y");
          o->tooltip("set y component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero1);
        }
        { Fl_Button* o = new Fl_Button(105, 305, 35, 20, "zero Z");
          o->tooltip("set z component to 0");
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_zero2);
        }
        { Fl_Light_Button* o = illBut = new Fl_Light_Button(15, 450, 100, 25, "Illuminate");
          o->tooltip("turn on light");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_illBut);
        }
        { Fl_Value_Slider* o = ambientslide = new Fl_Value_Slider(150, 330, 25, 95, "Ambient");
          o->tooltip("ambient lighting component level");
          o->selection_color((Fl_Color)3);
          o->labelsize(12);
          o->value(0.2);
          o->callback((Fl_Callback*)cb_ambientslide);
        }
        { Fl_Light_Button* o = facetshadBut = new Fl_Light_Button(235, 450, 100, 25, "facet shading");
          o->tooltip("do not blend colours over surface");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_facetshadBut);
        }
        { Fl_Light_Button* o = new Fl_Light_Button(240, 305, 60, 20, "fixed");
          o->tooltip("Fixed light - headlamp mode");
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_fixed);
          o->align(132|FL_ALIGN_INSIDE);
        }
        { Fl_Value_Slider* o = specularslide = new Fl_Value_Slider(200, 330, 25, 95, "Specular");
          o->tooltip("specular lighting component level");
          o->selection_color((Fl_Color)6);
          o->labelsize(12);
          o->value(0.65);
          o->callback((Fl_Callback*)cb_specularslide);
        }
        { Fl_Value_Slider* o = diffuseslide = new Fl_Value_Slider(245, 330, 25, 95, "Diffuse");
          o->tooltip("specular lighting component level");
          o->selection_color((Fl_Color)6);
          o->labelsize(12);
          o->value(0.65);
          o->callback((Fl_Callback*)cb_diffuseslide);
        }
        { Fl_Value_Slider* o = backintensityslide = new Fl_Value_Slider(300, 330, 25, 95, "Backside");
          o->tooltip("intensity of back side of surface");
          o->selection_color((Fl_Color)6);
          o->labelsize(12);
          o->value(0.5);
          o->callback((Fl_Callback*)cb_backintensityslide);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(15, 310, 315, 165, "Surface");
        o->labelsize(12);
        o->labelcolor((Fl_Color)90);
        { Fl_Light_Button* o = surfvisbut = new Fl_Light_Button(30, 365, 90, 30, "visible");
          o->value(1);
          o->selection_color((Fl_Color)2);
          o->callback((Fl_Callback*)cb_surfvisbut);
          o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        }
        { Fl_Choice* o = currsurf = new Fl_Choice(150, 320, 120, 30, "Apply to Surface#");
          o->tooltip("shells affected by settings");
          o->down_box(FL_BORDER_BOX);
          o->callback((Fl_Callback*)cb_currsurf);
          o->menu(menu_currsurf);
        }
        { Fl_Light_Button* o = surfoutlinebut = new Fl_Light_Button(135, 365, 85, 30, "Outline");
          o->callback((Fl_Callback*)cb_surfoutlinebut);
        }
        { Fl_Light_Button* o = surffillbut = new Fl_Light_Button(235, 365, 85, 30, "Filled");
          o->value(1);
          o->callback((Fl_Callback*)cb_surffillbut);
        }
        { Fl_Button* o = new Fl_Button(135, 405, 85, 25, "Outline colour");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Outline);
        }
        { Fl_Button* o = new Fl_Button(235, 405, 85, 25, "Fill colour");
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_Fill);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = colorscalegrp = new Fl_Group(10, 490, 330, 60);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Button* o = new Fl_Button(15, 495, 45, 20, "optimal");
        o->tooltip("calibrate for current time");
        o->box(FL_ROUND_UP_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_optimal1);
      }
      { Fl_Choice* o = cstype = new Fl_Choice(230, 500, 105, 25, "colour scale");
        o->down_box(FL_BORDER_BOX);
        o->labelsize(10);
        o->align(FL_ALIGN_BOTTOM);
 {Fl_Menu_Item* o = &menu_cstype[0];
        o->image(image_rainbow);
        }
 {Fl_Menu_Item* o = &menu_cstype[1];
        o->image(image_blrainbow);
        }
 {Fl_Menu_Item* o = &menu_cstype[2];
        o->image(image_hot);
        }
 {Fl_Menu_Item* o = &menu_cstype[3];
        o->image(image_coldhot);
        }
 {Fl_Menu_Item* o = &menu_cstype[4];
        o->image(image_blwhite);
        }
        o->menu(menu_cstype);
        o->value(1);
      }
      { Fl_Value_Input* o = mincolval = new Fl_Value_Input(65, 500, 65, 25, "min");
        o->labelsize(10);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_mincolval);
        o->align(FL_ALIGN_BOTTOM);
      }
      { Fl_Value_Input* o = maxcolval = new Fl_Value_Input(130, 500, 65, 25, "max");
        o->labelsize(10);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_maxcolval);
        o->align(FL_ALIGN_BOTTOM);
      }
      { Fl_Value_Input* o = numcolev = new Fl_Value_Input(195, 500, 30, 25, "levels");
        o->tooltip("colourmap size");
        o->labelsize(10);
        o->minimum(4);
        o->maximum(252);
        o->step(1);
        o->value(64);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_numcolev);
        o->align(FL_ALIGN_BOTTOM);
      }
      { Fl_Light_Button* o = autocalibratebut = new Fl_Light_Button(15, 520, 45, 15, "auto");
        o->tooltip("autoscale every timestep");
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_autocalibratebut);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      }
      o->end();
    }
    { Fl_Group* o = animate_group = new Fl_Group(10, 555, 330, 80);
      o->box(FL_ENGRAVED_BOX);
      { Myslider* o = tmslider = new Myslider(15, 570, 220, 25, "time");
        o->tooltip("time displayed");
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_tmslider);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Button* o = new Fl_Button(245, 570, 40, 25, "@>>");
        o->tooltip("start animation");
        o->labelcolor((Fl_Color)71);
        o->callback((Fl_Callback*)cb_11);
      }
      { Fl_Button* o = new Fl_Button(290, 570, 40, 25, "@||");
        o->tooltip("stop animation");
        o->labelcolor((Fl_Color)1);
        o->callback((Fl_Callback*)cb_12);
      }
      { Fl_Counter* o = frameskip = new Fl_Counter(75, 605, 130, 20, "#frames");
        o->tooltip("#frames to  increment");
        o->step(1);
        o->value(1);
        o->callback((Fl_Callback*)cb_frameskip);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Value_Input* o = animdelay = new Fl_Value_Input(260, 605, 70, 20, "delay:");
        o->tooltip("delay between frames (ms )");
        o->maximum(2000);
        o->step(5);
        o->value(10);
        o->callback((Fl_Callback*)cb_animdelay);
      }
      o->end();
    }
    o->end();
  }
}

void Controls::outputwin( TBmeshWin *w ) {
  mwtb = w;
}

void Controls::pickcolor(Object_t obj, const char* wintitle ) {
  bool* sel=regselected();
for( int i=0; i<reglist->size(); i++ )
  if( sel[i] ) { 
   GLfloat *c = mwtb->get_color(obj, i);
   colourChoice *cc = new colourChoice( c, sel, reglist->size(), obj, mwtb );
   cc->window->label(wintitle);
   cc->window->show();
   break;
   }
}

void Controls::update_surfGUI( int s ) {
  if( !mwtb->model->numSurf ) return;
if( s==-1) s=0;
surfvisbut->value( mwtb->model->surface(s)->visible() );
surfoutlinebut->value( mwtb->model->surface(s)->outline() );
surffillbut->value( mwtb->model->surface(s)->filled() );
}

void Controls::update_regionGUI( int r ) {
  visbut->value( mwtb->visibility(r) );
vertbut->value( mwtb->showobj(Vertex, r) );
cabbut->value( mwtb->showobj(Cable, r) );
cnnxbut->value( mwtb->showobj(Cnnx, r) );
}

void Controls::highlight_region() {
  int regnum;
for( regnum=0; regnum<reglist->size(); regnum++ )
  if( reglist->selected(regnum) )
    break;
regnum--;

int objnum = mwtb->reg_first( regnum, Tetrahedron );
mwtb->highlight( Tetrahedron, objnum );
tethi->value( objnum );
objnum = mwtb->reg_first(regnum, Cnnx );
mwtb->highlight( Cnnx, objnum );
cnnxhi->value( objnum );
objnum = mwtb->reg_first( regnum, Cable );
mwtb->highlight( Cable, objnum );
cabhi->value( objnum );
objnum = mwtb->model->surface(regnum)->start();
mwtb->highlight( SurfEle, objnum );
elehi->value( objnum );
objnum = mwtb->reg_first( regnum, Vertex );
mwtb->highlight( Vertex, objnum );
verthi->value( objnum );
}

void Controls::set_rot( char n, int neg, int view ) {
  V3f xaxis(1,0,0);
V3f yaxis(0,1,0);
V3f zaxis(0,0,1);

if( n == 'X' ) {
  mwtb->trackball.SetRotation(-M_PI_2*(1-2*neg),yaxis);
  if( !neg )mwtb->trackball.Rotation(-M_PI_2,zaxis);
} else if( n == 'Y' ) { 
  mwtb->trackball.SetRotation(M_PI_2*(1-2*neg),xaxis);
  if( !neg )mwtb->trackball.Rotation(M_PI_2,zaxis);
} else {
  mwtb->trackball.SetRotation(M_PI*neg,yaxis);
  if( neg )mwtb->trackball.Rotation(-M_PI_2,zaxis);
}
mwtb->trackball.Rotation(-view*M_PI_2,zaxis);

mwtb->redraw();
}

void Controls::set_tet_region( Model *model) {
  for( int i=0; i<model->_numReg; i++ ) {
  char text[256];
  sprintf( text, "%d", (model->region(i))->label() );
  reglist->add( text, NULL );
  reglist->select(i+1);
}
}

bool * Controls::regselected() {
  bool *sel = new bool[reglist->size()];
for( int i=1; i<=reglist->size(); i++ )
  sel[i-1] = reglist->selected(i);
return sel;
}

void Controls::save_state() {
  char *fn = fl_file_chooser("meshalyzer state file","*.mshz",NULL);
if( fn==NULL) return;
string xfn( fn );
if( xfn.rfind(".mshz") == string::npos ) xfn += ".mshz";
ofstream mshzf( xfn.c_str() );

mshzf << "TRACKBALL ======" << endl;
mwtb->trackball.save(mshzf);
mshzf << "CLIPPING ======" << endl;
mwtb->cplane->save(mshzf);
mshzf << "DATA_OPACITY ======" << endl;
mwtb->dataopac->save(mshzf);

SAVE_WIDGET(mshzf,read_recalibrate);
SAVE_WIDGET(mshzf,revdraworder);
SAVE_WIDGET(mshzf,datachc);
SAVE_WIDGET(mshzf,draw_axes);
//region group
SAVE_WIDGET(mshzf,vertbut);
SAVE_WIDGET(mshzf,cabbut);
SAVE_WIDGET(mshzf,cnnxbut);
SAVE_WIDGET(mshzf,vertstride);
SAVE_WIDGET(mshzf,cabstridein);
SAVE_WIDGET(mshzf,cnnxstridein);
//hilighttab
SAVE_WIDGET(mshzf,hilighton);
SAVE_WIDGET(mshzf,hitettype);
SAVE_WIDGET(mshzf,tethi);
SAVE_WIDGET(mshzf,elehi);
SAVE_WIDGET(mshzf,verthi);
SAVE_WIDGET(mshzf,cnnxhi);
SAVE_WIDGET(mshzf,verthi);
SAVE_WIDGET(mshzf,cabhi);
SAVE_WIDGET(mshzf,attachtype);
//vector tab
SAVE_WIDGET(mshzf,veconbut);
SAVE_WIDGET(mshzf,veccstype);
SAVE_WIDGET(mshzf,veclength);
SAVE_WIDGET(mshzf,vecautocal);
//light tab
SAVE_WIDGET(mshzf,lightx);
SAVE_WIDGET(mshzf,lighty);
SAVE_WIDGET(mshzf,lightz);
SAVE_WIDGET(mshzf,ambientslide);
SAVE_WIDGET(mshzf,specularslide);
SAVE_WIDGET(mshzf,diffuseslide);
SAVE_WIDGET(mshzf,backintensityslide);
SAVE_WIDGET(mshzf,showLightDir);
SAVE_WIDGET(mshzf,facetshadBut);
SAVE_WIDGET(mshzf,illBut);
//surface tab
SAVE_WIDGET(mshzf,currsurf);
SAVE_WIDGET(mshzf,surfvisbut);
SAVE_WIDGET(mshzf,surfoutlinebut);
SAVE_WIDGET(mshzf,surffillbut);
// colour scale
SAVE_WIDGET(mshzf,autocalibratebut);
SAVE_WIDGET(mshzf,mincolval);
SAVE_WIDGET(mshzf,maxcolval);
SAVE_WIDGET(mshzf,numcolev);
SAVE_WIDGET(mshzf,cstype);
// animation
SAVE_WIDGET(mshzf,tmslider);
SAVE_WIDGET(mshzf,frameskip);
SAVE_WIDGET(mshzf,animdelay);

mshzf << "SURFACE_COLOURS = " << mwtb->model->numSurf << endl;
for( int i=0; i<mwtb->model->numSurf; i++ ) {
  save_colour( mshzf, mwtb->model->surface(i)->fillcolor() );
  mshzf << " ";
  save_colour( mshzf, mwtb->model->surface(i)->outlinecolor() );
  mshzf << " " << mwtb->model->surface(i)->visible();
  mshzf << " " << mwtb->model->surface(i)->filled();
  mshzf << " " << mwtb->model->surface(i)->outline();
  mshzf << endl;
}

mshzf << "REGION_COLOURS = " << mwtb->model->_numReg << endl;
for( int i=0; i<mwtb->model->_numReg; i++ ) {
  save_colour( mshzf, mwtb->model->region(i)->get_color(Vertex) );
  mshzf << " " << mwtb->model->region(i)->show(Vertex) << " ";
  save_colour( mshzf, mwtb->model->region(i)->get_color(Cable) );
  mshzf << " " << mwtb->model->region(i)->show(Cable) << " ";
  save_colour( mshzf, mwtb->model->region(i)->get_color(Cnnx) );
  mshzf << " " << mwtb->model->region(i)->show(Cnnx) << " " 
        << mwtb->model->region(i)->visible() << endl; 
}
mshzf << "BGD_COLOUR = " << (mwtb->bgd())[1] << endl;
}

void Controls::save_colour( ofstream&ofs, GLfloat *col ) {
  for( int c=0; c<3; c++ ) ofs << col[c] << " ";
ofs << col[3];
}

void Controls::pick_surf_color(Object_t ot, const char *winlab) {
  int msz = currsurf->size()-2;

if( msz==0 ) return;

bool* cs = new bool[msz];
GLfloat *col;

int picked = currsurf->value()-1;

if( picked==-1 ) {
  for( int mi=0; mi<msz; mi++ ) cs[mi] = true;
  col = mwtb->get_color(ot, 0);
} else {
  for( int mi=0; mi<msz; mi++ ) cs[mi] = false;;
  cs[picked] = true;
  col = mwtb->get_color(ot, picked);
}   

colourChoice *cc = new colourChoice( col, cs, msz, ot, mwtb );
cc->window->label(winlab);
cc->window->show();
}

void Controls::restore_state(const char* fname) {
  ifstream mshzf;
if( fname==NULL ) {
  char *fn=fl_file_chooser("Meshalyzer state file", "*.mshz", NULL );
  if( fn==NULL) return;
  mshzf.open(fn);
} else
  mshzf.open(fname);

int BUFLEN=1024;
char buf[BUFLEN];
while( mshzf.getline( buf, BUFLEN ) ) {
  
  float val;
  char  var[1024];
  if( sscanf( buf, "%s = %f", var, &val ) <1 )
    continue;
  if( !strcmp( var, "TRACKBALL" ) ) {
	mwtb->trackball.read(mshzf); 
	continue;
  } 
  if( !strcmp( var, "DATA_OPACITY" ))  {
	mwtb->dataopac->read(mshzf); 
	continue;
  } 
  if( !strcmp( var, "CLIPPING" ))  {
	mwtb->cplane->read(mshzf); 
	continue;
  } 
  if( !strcmp( var, "SURFACE_COLOURS" ) ) {
    for( int i=0; i<val; i++ ) {
      if( i >= mwtb->model->numSurf ){
        mshzf.getline(var, 1024);
        continue;
      }
      float r,g,b,a;
      mshzf >> r >> g >> b >> a;
      mwtb->model->surface(i)->fillcolor(r,g,b,a);
      mshzf >> r >> g >> b >> a;
      mwtb->model->surface(i)->outlinecolor(r,g,b,a);
      mshzf >> r >> g >> b;
      mwtb->model->surface(i)->visible(int(r));
      mwtb->model->surface(i)->filled(int(g));
      mwtb->model->surface(i)->outline(int(b));
	}
	continue;
  } 
  if( !strcmp( var, "REGION_COLOURS" ) ) {
    float r, g, b, a;
    bool  v;
    for( int i=0; i<val; i++ ) {
      if( i >= mwtb->model->_numReg ) {
         mshzf.getline( var, 1024 );
         continue;
      }     
      mshzf >> r >> g >> b >> a >> v;
      mwtb->model->region(i)->set_color(Vertex, r, g, b, a );
      mwtb->model->region(i)->show( Vertex, v );
      mshzf >> r >> g >> b >> a >> v;
      mwtb->model->region(i)->set_color(Cable, r, g, b, a );   
      mwtb->model->region(i)->show( Cable, v );
      mshzf >> r >> g >> b >> a >> v;
      mwtb->model->region(i)->set_color(Cnnx, r, g, b, a ); 
      mwtb->model->region(i)->show( Cnnx, v );
      mshzf >> v;
      mwtb->model->region(i)->visible(v);
    }
	continue;
  } 
  TEST_MENUVAR( read_recalibrate, var, val )  
  TEST_MENUVAR( revdraworder, var, val )  
  TEST_CHOICE( datachc, var, int(val) )  
  TEST_VAR( draw_axes, var, int(val) )  
  TEST_VAR( vertbut, var, int(val) )  
  TEST_VAR( cabbut, var, int(val) )  
  TEST_VAR( cnnxbut, var, int(val) )  
  TEST_VAR( vertstride, var, int(val) ) 
  TEST_VAR( cabstridein, var, int(val) ) 
  TEST_VAR( cnnxstridein, var, int(val) ) 
  TEST_VAR( hilighton, var, int(val) ) 
  TEST_CHOICE( hitettype, var, int(val) ) 
  TEST_VAR( tethi, var, int(val) ) 
  TEST_VAR( elehi, var, int(val) ) 
  TEST_VAR( verthi, var, int(val) ) 
  TEST_VAR( cnnxhi, var, int(val) ) 
  TEST_VAR( cabhi, var, int(val) ) 
  TEST_CHOICE( attachtype, var, int(val) ) 
  if( mwtb->vecdata != NULL ) {
    TEST_CHOICE( veccstype, var, int(val) )
    TEST_VAR( veconbut, var, int(val) ) 
    TEST_VAR( veclength, var, val ) 
    TEST_VAR( vecautocal, var, int(val) ) 
  } else {
    IGNORE_VAR( veccstype, var )
    IGNORE_VAR( veconbut, var ) 
    IGNORE_VAR( veclength, var ) 
    IGNORE_VAR( vecautocal, var ) 
  }
  TEST_VAR( lightx, var, val ) 
  TEST_VAR( lighty, var, val ) 
  TEST_VAR( lightz, var, val ) 
  TEST_VAR( ambientslide, var, val ) 
  TEST_VAR( specularslide, var, val ) 
  TEST_VAR( diffuseslide, var, val ) 
  TEST_VAR( backintensityslide, var, val ) 
  TEST_VAR( showLightDir, var, int(val) ) 
  TEST_VAR( facetshadBut, var, int(val) ) 
  TEST_VAR( illBut, var, int(val) ) 
  TEST_VAR( currsurf, var, int(val) ) 
  TEST_VAR( surfvisbut, var, int(val) ) 
  TEST_VAR( surfoutlinebut, var, int(val) ) 
  TEST_VAR( surffillbut, var, int(val) ) 
  TEST_VAR( autocalibratebut, var, int(val) ) 
  TEST_VAR( mincolval, var, val ) 
  TEST_VAR( maxcolval, var, val ) 
  TEST_VAR( numcolev, var, int(val) ) 
  TEST_CHOICE( cstype, var, int(val) ) 
  TEST_VAR( tmslider, var, int(val) ) 
  TEST_VAR( frameskip, var, int(val) ) 
  TEST_VAR( animdelay, var, int(val) ) 
  if( !strcmp( "BGD_COLOUR", var )) { mwtb->bgd(val); continue; }

  cerr << "Unknown variable specified: " << var << endl;
}
mwtb->lights(illBut->value());
}
