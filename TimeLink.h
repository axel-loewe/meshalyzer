// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef TimeLink_h
#define TimeLink_h
#include <FL/Fl.H>
#include <set>
#include <map>
#include <LinkMessages.h>
using namespace std;
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>

class TimeLink {
public:
  TimeLink( set<int>& lnks );
  Fl_Double_Window *window;
  Fl_Browser *meshList;
private:
  inline void cb_link_i(Fl_Button*, void*);
  static void cb_link(Fl_Button*, void*);
  inline void cb_refresh_i(Fl_Button*, void*);
  static void cb_refresh(Fl_Button*, void*);
public:
  Fl_Browser *linkList;
private:
  inline void cb_Unlink_i(Fl_Button*, void*);
  static void cb_Unlink(Fl_Button*, void*);
  inline void cb_close_i(Fl_Button*, void*);
  static void cb_close(Fl_Button*, void*);
public:
  void list_mesh_pids();
  void link();
  void unlink();
  void list_links();
  int LinkMessageQueue(int pid);
  int link(int pid);
  int unlink(int pid);
  int CreateMessageQueue();
  int DeleteMessageQueue();
  int SignalNewMessageInQueue(int pid);
  int SendMsg(LinkMessage::CommandMsg& msg, int pid);
  void SendMsgToAll(LinkMessage::CommandMsg& msg);
  int ReceiveMsg(LinkMessage::CommandMsg& msg);
  ~TimeLink();
  const char* MSQ_KEY_PATH; 
private:
  int msqId_; 
  set<int>& linkages_; 
  std::map<int, int> linkageMsqIds_; 
};
#endif
