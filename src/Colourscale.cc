#include "Colourscale.h"
#include <iostream>
#include <vector>

Colourscale :: Colourscale( int ts, CScale_t tcs ) : scaletype(tcs)
{
  size( ts );
}


void Colourscale :: calibrate( double tmin, double tmax )
{
  mindat = tmin;
  maxdat = tmax;

  if ( maxdat != mindat ) {
    a = static_cast<float>(n)/(maxdat-mindat);
    b = static_cast<float>(n) - a*maxdat;
  } else {
    a = 0.;
    b = 1.;
  }
}

int viridis[][3] = {
   {  68,   1,  84 },   {  68,   2,  85 },   {  68,   3,  87 },   {  69,   5,  88 },
   {  69,   6,  90 },   {  69,   8,  91 },   {  70,   9,  92 },   {  70,  11,  94 },
   {  70,  12,  95 },   {  70,  14,  97 },   {  71,  15,  98 },   {  71,  17,  99 },
   {  71,  18, 101 },   {  71,  20, 102 },   {  71,  21, 103 },   {  71,  22, 105 },
   {  71,  24, 106 },   {  72,  25, 107 },   {  72,  26, 108 },   {  72,  28, 110 },
   {  72,  29, 111 },   {  72,  30, 112 },   {  72,  32, 113 },   {  72,  33, 114 },
   {  72,  34, 115 },   {  72,  35, 116 },   {  71,  37, 117 },   {  71,  38, 118 },
   {  71,  39, 119 },   {  71,  40, 120 },   {  71,  42, 121 },   {  71,  43, 122 },
   {  71,  44, 123 },   {  70,  45, 124 },   {  70,  47, 124 },   {  70,  48, 125 },
   {  70,  49, 126 },   {  69,  50, 127 },   {  69,  52, 127 },   {  69,  53, 128 },
   {  69,  54, 129 },   {  68,  55, 129 },   {  68,  57, 130 },   {  67,  58, 131 },
   {  67,  59, 131 },   {  67,  60, 132 },   {  66,  61, 132 },   {  66,  62, 133 },
   {  66,  64, 133 },   {  65,  65, 134 },   {  65,  66, 134 },   {  64,  67, 135 },
   {  64,  68, 135 },   {  63,  69, 135 },   {  63,  71, 136 },   {  62,  72, 136 },
   {  62,  73, 137 },   {  61,  74, 137 },   {  61,  75, 137 },   {  61,  76, 137 },
   {  60,  77, 138 },   {  60,  78, 138 },   {  59,  80, 138 },   {  59,  81, 138 },
   {  58,  82, 139 },   {  58,  83, 139 },   {  57,  84, 139 },   {  57,  85, 139 },
   {  56,  86, 139 },   {  56,  87, 140 },   {  55,  88, 140 },   {  55,  89, 140 },
   {  54,  90, 140 },   {  54,  91, 140 },   {  53,  92, 140 },   {  53,  93, 140 },
   {  52,  94, 141 },   {  52,  95, 141 },   {  51,  96, 141 },   {  51,  97, 141 },
   {  50,  98, 141 },   {  50,  99, 141 },   {  49, 100, 141 },   {  49, 101, 141 },
   {  49, 102, 141 },   {  48, 103, 141 },   {  48, 104, 141 },   {  47, 105, 141 },
   {  47, 106, 141 },   {  46, 107, 142 },   {  46, 108, 142 },   {  46, 109, 142 },
   {  45, 110, 142 },   {  45, 111, 142 },   {  44, 112, 142 },   {  44, 113, 142 },
   {  44, 114, 142 },   {  43, 115, 142 },   {  43, 116, 142 },   {  42, 117, 142 },
   {  42, 118, 142 },   {  42, 119, 142 },   {  41, 120, 142 },   {  41, 121, 142 },
   {  40, 122, 142 },   {  40, 122, 142 },   {  40, 123, 142 },   {  39, 124, 142 },
   {  39, 125, 142 },   {  39, 126, 142 },   {  38, 127, 142 },   {  38, 128, 142 },
   {  38, 129, 142 },   {  37, 130, 142 },   {  37, 131, 141 },   {  36, 132, 141 },
   {  36, 133, 141 },   {  36, 134, 141 },   {  35, 135, 141 },   {  35, 136, 141 },
   {  35, 137, 141 },   {  34, 137, 141 },   {  34, 138, 141 },   {  34, 139, 141 },
   {  33, 140, 141 },   {  33, 141, 140 },   {  33, 142, 140 },   {  32, 143, 140 },
   {  32, 144, 140 },   {  32, 145, 140 },   {  31, 146, 140 },   {  31, 147, 139 },
   {  31, 148, 139 },   {  31, 149, 139 },   {  31, 150, 139 },   {  30, 151, 138 },
   {  30, 152, 138 },   {  30, 153, 138 },   {  30, 153, 138 },   {  30, 154, 137 },
   {  30, 155, 137 },   {  30, 156, 137 },   {  30, 157, 136 },   {  30, 158, 136 },
   {  30, 159, 136 },   {  30, 160, 135 },   {  31, 161, 135 },   {  31, 162, 134 },
   {  31, 163, 134 },   {  32, 164, 133 },   {  32, 165, 133 },   {  33, 166, 133 },
   {  33, 167, 132 },   {  34, 167, 132 },   {  35, 168, 131 },   {  35, 169, 130 },
   {  36, 170, 130 },   {  37, 171, 129 },   {  38, 172, 129 },   {  39, 173, 128 },
   {  40, 174, 127 },   {  41, 175, 127 },   {  42, 176, 126 },   {  43, 177, 125 },
   {  44, 177, 125 },   {  46, 178, 124 },   {  47, 179, 123 },   {  48, 180, 122 },
   {  50, 181, 122 },   {  51, 182, 121 },   {  53, 183, 120 },   {  54, 184, 119 },
   {  56, 185, 118 },   {  57, 185, 118 },   {  59, 186, 117 },   {  61, 187, 116 },
   {  62, 188, 115 },   {  64, 189, 114 },   {  66, 190, 113 },   {  68, 190, 112 },
   {  69, 191, 111 },   {  71, 192, 110 },   {  73, 193, 109 },   {  75, 194, 108 },
   {  77, 194, 107 },   {  79, 195, 105 },   {  81, 196, 104 },   {  83, 197, 103 },
   {  85, 198, 102 },   {  87, 198, 101 },   {  89, 199, 100 },   {  91, 200,  98 },
   {  94, 201,  97 },   {  96, 201,  96 },   {  98, 202,  95 },   { 100, 203,  93 },
   { 103, 204,  92 },   { 105, 204,  91 },   { 107, 205,  89 },   { 109, 206,  88 },
   { 112, 206,  86 },   { 114, 207,  85 },   { 116, 208,  84 },   { 119, 208,  82 },
   { 121, 209,  81 },   { 124, 210,  79 },   { 126, 210,  78 },   { 129, 211,  76 },
   { 131, 211,  75 },   { 134, 212,  73 },   { 136, 213,  71 },   { 139, 213,  70 },
   { 141, 214,  68 },   { 144, 214,  67 },   { 146, 215,  65 },   { 149, 215,  63 },
   { 151, 216,  62 },   { 154, 216,  60 },   { 157, 217,  58 },   { 159, 217,  56 },
   { 162, 218,  55 },   { 165, 218,  53 },   { 167, 219,  51 },   { 170, 219,  50 },
   { 173, 220,  48 },   { 175, 220,  46 },   { 178, 221,  44 },   { 181, 221,  43 },
   { 183, 221,  41 },   { 186, 222,  39 },   { 189, 222,  38 },   { 191, 223,  36 },
   { 194, 223,  34 },   { 197, 223,  33 },   { 199, 224,  31 },   { 202, 224,  30 },
   { 205, 224,  29 },   { 207, 225,  28 },   { 210, 225,  27 },   { 212, 225,  26 },
   { 215, 226,  25 },   { 218, 226,  24 },   { 220, 226,  24 },   { 223, 227,  24 },
   { 225, 227,  24 },   { 228, 227,  24 },   { 231, 228,  25 },   { 233, 228,  25 },
   { 236, 228,  26 },   { 238, 229,  27 },   { 241, 229,  28 },   { 243, 229,  30 },
   { 246, 230,  31 },   { 248, 230,  33 },   { 250, 230,  34 },   { 253, 231,  36 }
};

int viridis_light[][3] = {
   { 113,  48, 193 },   { 113,  50, 194 },   { 112,  51, 194 },   { 111,  53, 195 },
   { 111,  55, 195 },   { 110,  56, 196 },   { 110,  58, 196 },   { 109,  60, 196 },
   { 108,  61, 197 },   { 108,  63, 197 },   { 107,  64, 198 },   { 106,  66, 198 },
   { 106,  67, 198 },   { 105,  69, 198 },   { 104,  70, 199 },   { 103,  72, 199 },
   { 103,  73, 199 },   { 102,  75, 199 },   { 101,  76, 199 },   { 100,  77, 199 },
   { 100,  79, 199 },   {  99,  80, 199 },   {  98,  81, 199 },   {  97,  83, 199 },
   {  96,  84, 199 },   {  96,  85, 199 },   {  95,  87, 199 },   {  94,  88, 199 },
   {  93,  89, 199 },   {  92,  91, 199 },   {  92,  92, 199 },   {  91,  93, 198 },
   {  90,  94, 198 },   {  89,  95, 198 },   {  88,  97, 198 },   {  88,  98, 197 },
   {  87,  99, 197 },   {  86, 100, 197 },   {  85, 101, 196 },   {  84, 102, 196 },
   {  84, 104, 196 },   {  83, 105, 195 },   {  82, 106, 195 },   {  81, 107, 195 },
   {  81, 108, 194 },   {  80, 109, 194 },   {  79, 110, 193 },   {  78, 111, 193 },
   {  78, 112, 193 },   {  77, 113, 192 },   {  76, 114, 192 },   {  76, 115, 191 },
   {  75, 116, 191 },   {  75, 117, 190 },   {  74, 118, 190 },   {  74, 119, 189 },
   {  73, 120, 189 },   {  73, 121, 188 },   {  72, 122, 188 },   {  72, 123, 187 },
   {  71, 124, 187 },   {  71, 125, 187 },   {  70, 125, 186 },   {  70, 126, 186 },
   {  70, 127, 185 },   {  69, 128, 185 },   {  69, 129, 184 },   {  69, 130, 184 },
   {  68, 131, 183 },   {  68, 132, 183 },   {  68, 132, 182 },   {  67, 133, 182 },
   {  67, 134, 182 },   {  67, 135, 181 },   {  67, 136, 181 },   {  67, 136, 180 },
   {  67, 137, 180 },   {  66, 138, 179 },   {  66, 139, 179 },   {  66, 140, 179 },
   {  66, 140, 178 },   {  66, 141, 178 },   {  66, 142, 178 },   {  66, 143, 177 },
   {  66, 144, 177 },   {  66, 144, 176 },   {  66, 145, 176 },   {  65, 146, 176 },
   {  65, 147, 175 },   {  65, 147, 175 },   {  65, 148, 175 },   {  65, 149, 174 },
   {  65, 150, 174 },   {  65, 151, 174 },   {  65, 151, 173 },   {  65, 152, 173 },
   {  65, 153, 173 },   {  65, 154, 172 },   {  65, 154, 172 },   {  65, 155, 172 },
   {  65, 156, 171 },   {  65, 157, 171 },   {  65, 157, 171 },   {  64, 158, 170 },
   {  64, 159, 170 },   {  64, 160, 170 },   {  64, 161, 169 },   {  64, 161, 169 },
   {  64, 162, 169 },   {  64, 163, 168 },   {  64, 164, 168 },   {  63, 164, 168 },
   {  63, 165, 167 },   {  63, 166, 167 },   {  63, 167, 167 },   {  63, 168, 166 },
   {  62, 168, 166 },   {  62, 169, 166 },   {  62, 170, 165 },   {  62, 171, 165 },
   {  61, 171, 164 },   {  61, 172, 164 },   {  61, 173, 164 },   {  60, 174, 163 },
   {  60, 175, 163 },   {  59, 176, 162 },   {  59, 176, 162 },   {  59, 177, 161 },
   {  58, 178, 161 },   {  58, 179, 161 },   {  57, 180, 160 },   {  57, 180, 159 },
   {  57, 181, 159 },   {  56, 182, 158 },   {  56, 183, 158 },   {  55, 184, 157 },
   {  55, 184, 157 },   {  54, 185, 156 },   {  53, 186, 155 },   {  53, 187, 155 },
   {  52, 188, 154 },   {  52, 189, 154 },   {  51, 189, 153 },   {  51, 190, 152 },
   {  50, 191, 151 },   {  50, 192, 151 },   {  49, 193, 150 },   {  48, 194, 149 },
   {  48, 194, 148 },   {  47, 195, 148 },   {  47, 196, 147 },   {  46, 197, 146 },
   {  46, 198, 145 },   {  45, 199, 144 },   {  45, 199, 143 },   {  44, 200, 142 },
   {  44, 201, 141 },   {  43, 202, 140 },   {  43, 203, 139 },   {  43, 204, 138 },
   {  42, 204, 137 },   {  42, 205, 136 },   {  42, 206, 135 },   {  42, 207, 134 },
   {  41, 208, 133 },   {  41, 209, 131 },   {  41, 209, 130 },   {  41, 210, 129 },
   {  41, 211, 128 },   {  42, 212, 126 },   {  42, 213, 125 },   {  42, 213, 124 },
   {  43, 214, 122 },   {  43, 215, 121 },   {  44, 216, 119 },   {  44, 217, 118 },
   {  45, 217, 116 },   {  46, 218, 115 },   {  47, 219, 113 },   {  48, 220, 112 },
   {  49, 221, 110 },   {  50, 221, 108 },   {  51, 222, 107 },   {  53, 223, 105 },
   {  54, 224, 103 },   {  56, 224, 101 },   {  57, 225,  99 },   {  59, 226,  97 },
   {  61, 226,  95 },   {  63, 227,  93 },   {  64, 228,  91 },   {  66, 229,  89 },
   {  69, 229,  87 },   {  71, 230,  85 },   {  73, 231,  82 },   {  75, 231,  80 },
   {  78, 232,  78 },   {  80, 232,  75 },   {  83, 233,  73 },   {  86, 234,  70 },
   {  89, 234,  68 },   {  91, 235,  65 },   {  94, 235,  62 },   {  98, 236,  59 },
   { 101, 236,  57 },   { 104, 236,  54 },   { 108, 237,  51 },   { 111, 237,  48 },
   { 115, 237,  46 },   { 119, 238,  43 },   { 123, 238,  41 },   { 126, 238,  40 },
   { 130, 238,  38 },   { 134, 238,  37 },   { 138, 239,  37 },   { 141, 239,  37 },
   { 145, 239,  37 },   { 149, 239,  38 },   { 152, 239,  39 },   { 155, 239,  40 },
   { 159, 239,  41 },   { 162, 239,  42 },   { 165, 239,  43 },   { 168, 240,  45 },
   { 171, 240,  46 },   { 174, 240,  48 },   { 177, 240,  49 },   { 180, 240,  50 },
   { 182, 240,  51 },   { 185, 240,  52 },   { 188, 240,  53 },   { 191, 241,  54 },
   { 193, 241,  55 },   { 196, 241,  56 },   { 199, 241,  56 },   { 201, 241,  57 },
   { 204, 241,  57 },   { 206, 241,  57 },   { 209, 241,  57 },   { 212, 242,  57 },
   { 214, 242,  57 },   { 217, 242,  57 },   { 219, 242,  56 },   { 222, 242,  56 },
   { 224, 242,  55 },   { 227, 242,  54 },   { 229, 242,  53 },   { 232, 243,  51 },
   { 234, 243,  50 },   { 237, 243,  48 },   { 239, 243,  46 },   { 241, 243,  44 },
   { 244, 243,  42 },   { 246, 243,  39 },   { 249, 243,  36 },   { 251, 244,  32 }
};

int magma[][3] = {
  { 0,   0,    4  }, { 1,   0,    5  }, { 1,   1,    6  }, { 1,   1,    8  },
  { 2,   1,    9  }, { 2,   2,   11  }, { 2,   2,   13  }, { 3,   3,   15  },
  { 3,   3,   18  }, { 4,   4,   20  }, { 5,   4,   22  }, { 6,   5,   24  },
  { 6,   5,   26  }, { 7,   6,   28  }, { 8,   7,   30  }, { 9,   7,   32  },
  { 10,  8,   34  }, { 11,  9,   36  }, { 12,  9,   38  }, { 13,  10,  41  },
  { 14,  11,  43  }, { 16,  11,  45  }, { 17,  12,  47  }, { 18,  13,  49  },
  { 19,  13,  52  }, { 20,  14,  54  }, { 21,  14,  56  }, { 22,  15,  59  },
  { 24,  15,  61  }, { 25,  16,  63  }, { 26,  16,  66  }, { 28,  16,  68  },
  { 29,  17,  71  }, { 30,  17,  73  }, { 32,  17,  75  }, { 33,  17,  78  },
  { 34,  17,  80  }, { 36,  18,  83  }, { 37,  18,  85  }, { 39,  18,  88  },
  { 41,  17,  90  }, { 42,  17,  92  }, { 44,  17,  95  }, { 45,  17,  97  },
  { 47,  17,  99  }, { 49,  17,  101 }, { 51,  16,  103 }, { 52,  16,  105 },
  { 54,  16,  107 }, { 56,  16,  108 }, { 57,  15,  110 }, { 59,  15,  112 },
  { 61,  15,  113 }, { 63,  15,  114 }, { 64,  15,  116 }, { 66,  15,  117 },
  { 68,  15,  118 }, { 69,  16,  119 }, { 71,  16,  120 }, { 73,  16,  120 },
  { 74,  16,  121 }, { 76,  17,  122 }, { 78,  17,  123 }, { 79,  18,  123 },
  { 81,  18,  124 }, { 82,  19,  124 }, { 84,  19,  125 }, { 86,  20,  125 },
  { 87,  21,  126 }, { 89,  21,  126 }, { 90,  22,  126 }, { 92,  22,  127 },
  { 93,  23,  127 }, { 95,  24,  127 }, { 96,  24,  128 }, { 98,  25,  128 },
  { 100, 26,  128 }, { 101, 26,  128 }, { 103, 27,  128 }, { 104, 28,  129 },
  { 106, 28,  129 }, { 107, 29,  129 }, { 109, 29,  129 }, { 110, 30,  129 },
  { 112, 31,  129 }, { 114, 31,  129 }, { 115, 32,  129 }, { 117, 33,  129 },
  { 118, 33,  129 }, { 120, 34,  129 }, { 121, 34,  130 }, { 123, 35,  130 },
  { 124, 35,  130 }, { 126, 36,  130 }, { 128, 37,  130 }, { 129, 37,  129 },
  { 131, 38,  129 }, { 132, 38,  129 }, { 134, 39,  129 }, { 136, 39,  129 },
  { 137, 40,  129 }, { 139, 41,  129 }, { 140, 41,  129 }, { 142, 42,  129 },
  { 144, 42,  129 }, { 145, 43,  129 }, { 147, 43,  128 }, { 148, 44,  128 },
  { 150, 44,  128 }, { 152, 45,  128 }, { 153, 45,  128 }, { 155, 46,  127 },
  { 156, 46,  127 }, { 158, 47,  127 }, { 160, 47,  127 }, { 161, 48,  126 },
  { 163, 48,  126 }, { 165, 49,  126 }, { 166, 49,  125 }, { 168, 50,  125 },
  { 170, 51,  125 }, { 171, 51,  124 }, { 173, 52,  124 }, { 174, 52,  123 },
  { 176, 53,  123 }, { 178, 53,  123 }, { 179, 54,  122 }, { 181, 54,  122 },
  { 183, 55,  121 }, { 184, 55,  121 }, { 186, 56,  120 }, { 188, 57,  120 },
  { 189, 57,  119 }, { 191, 58,  119 }, { 192, 58,  118 }, { 194, 59,  117 },
  { 196, 60,  117 }, { 197, 60,  116 }, { 199, 61,  115 }, { 200, 62,  115 },
  { 202, 62,  114 }, { 204, 63,  113 }, { 205, 64,  113 }, { 207, 64,  112 },
  { 208, 65,  111 }, { 210, 66,  111 }, { 211, 67,  110 }, { 213, 68,  109 },
  { 214, 69,  108 }, { 216, 69,  108 }, { 217, 70,  107 }, { 219, 71,  106 },
  { 220, 72,  105 }, { 222, 73,  104 }, { 223, 74,  104 }, { 224, 76,  103 },
  { 226, 77,  102 }, { 227, 78,  101 }, { 228, 79,  100 }, { 229, 80,  100 },
  { 231, 82,  99  }, { 232, 83,  98  }, { 233, 84,  98  }, { 234, 86,  97  },
  { 235, 87,  96  }, { 236, 88,  96  }, { 237, 90,  95  }, { 238, 91,  94  },
  { 239, 93,  94  }, { 240, 95,  94  }, { 241, 96,  93  }, { 242, 98,  93  },
  { 242, 100, 92  }, { 243, 101, 92  }, { 244, 103, 92  }, { 244, 105, 92  },
  { 245, 107, 92  }, { 246, 108, 92  }, { 246, 110, 92  }, { 247, 112, 92  },
  { 247, 114, 92  }, { 248, 116, 92  }, { 248, 118, 92  }, { 249, 120, 93  },
  { 249, 121, 93  }, { 249, 123, 93  }, { 250, 125, 94  }, { 250, 127, 94  },
  { 250, 129, 95  }, { 251, 131, 95  }, { 251, 133, 96  }, { 251, 135, 97  },
  { 252, 137, 97  }, { 252, 138, 98  }, { 252, 140, 99  }, { 252, 142, 100 },
  { 252, 144, 101 }, { 253, 146, 102 }, { 253, 148, 103 }, { 253, 150, 104 },
  { 253, 152, 105 }, { 253, 154, 106 }, { 253, 155, 107 }, { 254, 157, 108 },
  { 254, 159, 109 }, { 254, 161, 110 }, { 254, 163, 111 }, { 254, 165, 113 },
  { 254, 167, 114 }, { 254, 169, 115 }, { 254, 170, 116 }, { 254, 172, 118 },
  { 254, 174, 119 }, { 254, 176, 120 }, { 254, 178, 122 }, { 254, 180, 123 },
  { 254, 182, 124 }, { 254, 183, 126 }, { 254, 185, 127 }, { 254, 187, 129 },
  { 254, 189, 130 }, { 254, 191, 132 }, { 254, 193, 133 }, { 254, 194, 135 },
  { 254, 196, 136 }, { 254, 198, 138 }, { 254, 200, 140 }, { 254, 202, 141 },
  { 254, 204, 143 }, { 254, 205, 144 }, { 254, 207, 146 }, { 254, 209, 148 },
  { 254, 211, 149 }, { 254, 213, 151 }, { 254, 215, 153 }, { 254, 216, 154 },
  { 253, 218, 156 }, { 253, 220, 158 }, { 253, 222, 160 }, { 253, 224, 161 },
  { 253, 226, 163 }, { 253, 227, 165 }, { 253, 229, 167 }, { 253, 231, 169 },
  { 253, 233, 170 }, { 253, 235, 172 }, { 252, 236, 174 }, { 252, 238, 176 },
  { 252, 240, 178 }, { 252, 242, 180 }, { 252, 244, 182 }, { 252, 246, 184 },
  { 252, 247, 185 }, { 252, 249, 187 }, { 252, 251, 189 }, { 252, 253, 191 }
};

int inferno[][3] = {
  {  0,   0,   4  }, {  1,   0,   5  }, {  1,   1,   6  }, {  1,   1,   8  },
  {  2,   1,  10  }, {  2,   2,  12  }, {  2,   2,  14  }, {  3,   2,  16  },
  {  4,   3,  18  }, {  4,   3,  20  }, {  5,   4,  23  }, {  6,   4,  25  },
  {  7,   5,  27  }, {  8,   5,  29  }, {  9,   6,  31  }, { 10,   7,  34  },
  { 11,   7,  36  }, { 12,   8,  38  }, { 13,   8,  41  }, { 14,   9,  43  },
  { 16,   9,  45  }, { 17,  10,  48  }, { 18,  10,  50  }, { 20,  11,  52  },
  { 21,  11,  55  }, { 22,  11,  57  }, { 24,  12,  60  }, { 25,  12,  62  },
  { 27,  12,  65  }, { 28,  12,  67  }, { 30,  12,  69  }, { 31,  12,  72  },
  { 33,  12,  74  }, { 35,  12,  76  }, { 36,  12,  79  }, { 38,  12,  81  },
  { 40,  11,  83  }, { 41,  11,  85  }, { 43,  11,  87  }, { 45,  11,  89  },
  { 47,  10,  91  }, { 49,  10,  92  }, { 50,  10,  94  }, { 52,  10,  95  },
  { 54,   9,  97  }, { 56,   9,  98  }, { 57,   9,  99  }, { 59,   9,  100 },
  { 61,   9,  101 }, { 62,   9,  102 }, { 64,  10,  103 }, { 66,  10,  104 },
  { 68,  10,  104 }, { 69,  10,  105 }, { 71,  11,  106 }, { 73,  11,  106 },
  { 74,  12,  107 }, { 76,  12,  107 }, { 77,  13,  108 }, { 79,  13,  108 },
  { 81,  14,  108 }, { 82,  14,  109 }, { 84,  15,  109 }, { 85,  15,  109 },
  { 87,  16,  110 }, { 89,  16,  110 }, { 90,  17,  110 }, { 92,  18,  110 },
  { 93,  18,  110 }, { 95,  19,  110 }, { 97,  19,  110 }, { 98,  20,  110 },
  { 100, 21,  110 }, { 101, 21,  110 }, { 103, 22,  110 }, { 105, 22,  110 },
  { 106, 23,  110 }, { 108, 24,  110 }, { 109, 24,  110 }, { 111, 25,  110 },
  { 113, 25,  110 }, { 114, 26,  110 }, { 116, 26,  110 }, { 117, 27,  110 },
  { 119, 28,  109 }, { 120, 28,  109 }, { 122, 29,  109 }, { 124, 29,  109 },
  { 125, 30,  109 }, { 127, 30,  108 }, { 128, 31,  108 }, { 130, 32,  108 },
  { 132, 32,  107 }, { 133, 33,  107 }, { 135, 33,  107 }, { 136, 34,  106 },
  { 138, 34,  106 }, { 140, 35,  105 }, { 141, 35,  105 }, { 143, 36,  105 },
  { 144, 37,  104 }, { 146, 37,  104 }, { 147, 38,  103 }, { 149, 38,  103 },
  { 151, 39,  102 }, { 152, 39,  102 }, { 154, 40,  101 }, { 155, 41,  100 },
  { 157, 41,  100 }, { 159, 42,  99  }, { 160, 42,  99  }, { 162, 43,  98  },
  { 163, 44,  97  }, { 165, 44,  96  }, { 166, 45,  96  }, { 168, 46,  95  },
  { 169, 46,  94  }, { 171, 47,  94  }, { 173, 48,  93  }, { 174, 48,  92  },
  { 176, 49,  91  }, { 177, 50,  90  }, { 179, 50,  90  }, { 180, 51,  89  },
  { 182, 52,  88  }, { 183, 53,  87  }, { 185, 53,  86  }, { 186, 54,  85  },
  { 188, 55,  84  }, { 189, 56,  83  }, { 191, 57,  82  }, { 192, 58,  81  },
  { 193, 58,  80  }, { 195, 59,  79  }, { 196, 60,  78  }, { 198, 61,  77  },
  { 199, 62,  76  }, { 200, 63,  75  }, { 202, 64,  74  }, { 203, 65,  73  },
  { 204, 66,  72  }, { 206, 67,  71  }, { 207, 68,  70  }, { 208, 69,  69  },
  { 210, 70,  68  }, { 211, 71,  67  }, { 212, 72,  66  }, { 213, 74,  65  },
  { 215, 75,  63  }, { 216, 76,  62  }, { 217, 77,  61  }, { 218, 78,  60  },
  { 219, 80,  59  }, { 221, 81,  58  }, { 222, 82,  56  }, { 223, 83,  55  },
  { 224, 85,  54  }, { 225, 86,  53  }, { 226, 87,  52  }, { 227, 89,  51  },
  { 228, 90,  49  }, { 229, 92,  48  }, { 230, 93,  47  }, { 231, 94,  46  },
  { 232, 96,  45  }, { 233, 97,  43  }, { 234, 99,  42  }, { 235, 100, 41  },
  { 235, 102, 40  }, { 236, 103, 38  }, { 237, 105, 37  }, { 238, 106, 36  },
  { 239, 108, 35  }, { 239, 110, 33  }, { 240, 111, 32  }, { 241, 113, 31  },
  { 241, 115, 29  }, { 242, 116, 28  }, { 243, 118, 27  }, { 243, 120, 25  },
  { 244, 121, 24  }, { 245, 123, 23  }, { 245, 125, 21  }, { 246, 126, 20  },
  { 246, 128, 19  }, { 247, 130, 18  }, { 247, 132, 16  }, { 248, 133, 15  },
  { 248, 135, 14  }, { 248, 137, 12  }, { 249, 139, 11  }, { 249, 140, 10  },
  { 249, 142,  9  }, { 250, 144,  8  }, { 250, 146,  7  }, { 250, 148,  7  },
  { 251, 150,  6  }, { 251, 151,  6  }, { 251, 153,  6  }, { 251, 155,  6  },
  { 251, 157,  7  }, { 252, 159,  7  }, { 252, 161,  8  }, { 252, 163,  9  },
  { 252, 165, 10  }, { 252, 166, 12  }, { 252, 168, 13  }, { 252, 170, 15  },
  { 252, 172, 17  }, { 252, 174, 18  }, { 252, 176, 20  }, { 252, 178, 22  },
  { 252, 180, 24  }, { 251, 182, 26  }, { 251, 184, 29  }, { 251, 186, 31  },
  { 251, 188, 33  }, { 251, 190, 35  }, { 250, 192, 38  }, { 250, 194, 40  },
  { 250, 196, 42  }, { 250, 198, 45  }, { 249, 199, 47  }, { 249, 201, 50  },
  { 249, 203, 53  }, { 248, 205, 55  }, { 248, 207, 58  }, { 247, 209, 61  },
  { 247, 211, 64  }, { 246, 213, 67  }, { 246, 215, 70  }, { 245, 217, 73  },
  { 245, 219, 76  }, { 244, 221, 79  }, { 244, 223, 83  }, { 244, 225, 86  },
  { 243, 227, 90  }, { 243, 229, 93  }, { 242, 230, 97  }, { 242, 232, 101 },
  { 242, 234, 105 }, { 241, 236, 109 }, { 241, 237, 113 }, { 241, 239, 117 },
  { 241, 241, 121 }, { 242, 242, 125 }, { 242, 244, 130 }, { 243, 245, 134 },
  { 243, 246, 138 }, { 244, 248, 142 }, { 245, 249, 146 }, { 246, 250, 150 },
  { 248, 251, 154 }, { 249, 252, 157 }, { 250, 253, 161 }, { 252, 255, 164 }
};
  
#define INTERP(a,b,c) ( (int) (((float) (a) / (float) (b)) * (c)) )


void Colourscale :: scale( CScale_t cs )
{
  int   i;
  float intrvl, val;
  float ispan = static_cast<float>(n);
  float step  = ispan/(ispan-1.);

  scaletype = cs;
  switch ( cs ) {
    case CS_GREY: 							/* bw */
      for ( i=0; i<n; i++ )
        cmap[i][0] = cmap[i][1] = cmap[i][2] = ((float)i)/(ispan-1.);
      break;
    case CS_RGREY: 							/* red */
      for ( i=0; i<n; i++ ) {
        cmap[i][0] = ((float)i)/(ispan-1.);
        cmap[i][1] = cmap[i][2] = 0;
      }
      break;
    case CS_GGREY: 							/* green */
      for ( i=0; i<n; i++ ) {
        cmap[i][1] = ((float)i)/(ispan-1.);
        cmap[i][0] = cmap[i][2] = 0;
      }
      break;
    case CS_BGREY: 							/* blue */
      for ( i=0; i<n; i++ ) {
        cmap[i][2] = ((float)i)/(ispan-1.);
        cmap[i][0] = cmap[i][1] = 0;
      }
      break;
    case CS_HOT:
      intrvl = ispan/3.;
      for( i=0; i<n; i++  ) {
        val = i*step/intrvl;
        if ( val<1. ) {
          cmap[i][0] = val;
          cmap[i][1] = cmap[i][2] = 0;
        } else if ( val<2 ) {
          cmap[i][0] = 1;
          cmap[i][1] = val-1.0;
          cmap[i][2] = 0;
        } else { 
          cmap[i][0] = 1;
          cmap[i][1] = 1;
          cmap[i][2] = val-2;
        }
      }
      break;
    case CS_RAINBOW:
      intrvl = ispan/6.;
      for( i=0; i<n; i++  ) {
        val = i*step;
        if( i<intrvl ) {
          cmap[i][0] =  1-val/intrvl;
          cmap[i][1] = 0;
          cmap[i][2] = 1;
        } else if( val<2*intrvl ) {
          cmap[i][0] = 0;
          cmap[i][1] = (val-intrvl)/intrvl;
          cmap[i][2] = 1;
        } else if( val<3*intrvl ) {
          cmap[i][0] = 0;
          cmap[i][1] = 1;
          cmap[i][2] = 1-(val-2*intrvl)/intrvl;
        } else if( val<4*intrvl ) {
          cmap[i][0] = (val-3*intrvl)/intrvl;
          cmap[i][1] = 1;
          cmap[i][2] = 0;
        } else if( val<5*intrvl ) {
          cmap[i][0] = 1;
          cmap[i][1] = 1-(val-4*intrvl)/intrvl;
          cmap[i][2] = 0;
        } else {
          cmap[i][0] = 1;
          cmap[i][1] = 0;
          cmap[i][2] =(val-5*intrvl)/intrvl;
        }
      }
      break;
    case CS_COLD_HOT:
      intrvl = ispan/2.;
      for( i=0; i<n; i++  ) {
        val = i*step;
        if ( val<intrvl ) {
          cmap[i][2] =  1;
          cmap[i][0] =  cmap[i][1] = val/intrvl ;
        } else {
          cmap[i][0] = 1;
          cmap[i][1] =  cmap[i][2] = (2*intrvl-val)/intrvl ;
        }
      }
      break;
    case CS_CG:
      intrvl = ispan/4.;
      for( i=0; i<n; i++  ) {
        val = i*step;
        if ( val<intrvl ) {
          cmap[i][0] = 0;
          cmap[i][1] = val/intrvl;
          cmap[i][2] = 1;
        } else if ( val<2*intrvl ) {
          cmap[i][0] = 0;
          cmap[i][1] = 1;
          cmap[i][2] = (2*intrvl-val)/intrvl;
        } else if ( val<3*intrvl ) {
          cmap[i][0] = (val-2*intrvl)/intrvl;
          cmap[i][1] = 1;
          cmap[i][2] = 0;
        } else {
          cmap[i][0] = 1;
          cmap[i][1] = (4*intrvl-val)/intrvl;
          cmap[i][2] = 0;
        }
      }
      break;
    case CS_MATLAB: // should be CS_MATLAB_REV according controls window
      intrvl = ispan/8.;
      for( i=0; i<n; i++  ) {
        val = i*step;
        if ( val<intrvl ) {
          cmap[i][0] = 0.5 + val/(2*intrvl);
          cmap[i][1] = 0;
          cmap[i][2] = 0;
        } else if ( val<3*intrvl ) {
          cmap[i][0] = 1;
          cmap[i][1] = (val-intrvl)/(2*intrvl);
          cmap[i][2] = 0;
        } else if ( val<5*intrvl ) {
          cmap[i][0] = (5*intrvl-val)/(2*intrvl);
          cmap[i][1] = 1;
          cmap[i][2] = (val-3*intrvl)/(2*intrvl);
        } else if ( val<7*intrvl ) {
          cmap[i][0] = 0;
          cmap[i][1] = (7*intrvl-val)/(2*intrvl);
          cmap[i][2] = 1;
        }else {
          cmap[i][0] = 0;
          cmap[i][1] = 0;
          cmap[i][2] = (9*intrvl-val)/(2*intrvl);;
        }
      }
      break;
    case CS_BL_RAINBOW:
    default:
      intrvl = ispan/6.;
      for( i=0; i<n; i++  ) {
        val = i*step/intrvl;
        if ( val<1. ) {
          cmap[i][0] = 0;
          cmap[i][1] = 0;
          cmap[i][2] = val ;
        } else if( val<2. ) {
          cmap[i][0] = 0;
          cmap[i][1] = val-1;
          cmap[i][2] = 1;
        } else if( val<3 ) {
          cmap[i][0] = 0;
          cmap[i][1] = 1;
          cmap[i][2] = 3.-val;
        } else if( val<4 ) {
          cmap[i][0] = val-3.;
          cmap[i][1] = 1;
          cmap[i][2] = 0;
        } else if ( val<5 ) {
          cmap[i][0] = 1;
          cmap[i][1] = 5.-val;
          cmap[i][2] = 0;
        } else {
          cmap[i][0] = 1;
          cmap[i][1] = val-5.;
          cmap[i][2] = val-5.;
        }
      }
      break;
    case CS_ACID:
      intrvl = ispan/2.;
      for( i=0; i<n; i++  ) {
        val = i*step/intrvl;
        if ( val<1. ) {
          cmap[i][0] = cmap[i][2] = 1.0;
          cmap[i][1] = val ;
        } else {
          cmap[i][0] = cmap[i][1] = 1.0;
          cmap[i][2] = 2-val;
        }
      }
      break;
    case CS_P2G:
      for ( i = 0; i < n; i++ ) {
        cmap[i][0] = cmap[i][2] = 1.0 - (((float)i)/(ispan-1.));
        cmap[i][1] = ((float)i)/(ispan-1);
      }
      break;
    case CS_VIRIDIS:
      for ( i = 0; i < n; i++ ) {
        cmap[i][0] = ((float) viridis[INTERP(i,n-1,255)][0] / 255.0);
        cmap[i][1] = ((float) viridis[INTERP(i,n-1,255)][1] / 255.0);
        cmap[i][2] = ((float) viridis[INTERP(i,n-1,255)][2] / 255.0);
      }
      break;
    case CS_VIRIDIS_LIGHT:
      for ( i = 0; i < n; i++ ) {
        cmap[i][0] = ((float) viridis_light[INTERP(i,n-1,255)][0] / 255.0);
        cmap[i][1] = ((float) viridis_light[INTERP(i,n-1,255)][1] / 255.0);
        cmap[i][2] = ((float) viridis_light[INTERP(i,n-1,255)][2] / 255.0);
      }
      break;
    case CS_MAGMA:
      for ( i = 0; i < n; i++ ) {
        cmap[i][0] = ((float) magma[INTERP(i,n-1,255)][0] / 255.0);
        cmap[i][1] = ((float) magma[INTERP(i,n-1,255)][1] / 255.0);
        cmap[i][2] = ((float) magma[INTERP(i,n-1,255)][2] / 255.0);
      }
      break;
    case CS_INFERNO:
      for ( i = 0; i < n; i++ ) {
        cmap[i][0] = ((float) inferno[INTERP(i,n-1,255)][0] / 255.0);
        cmap[i][1] = ((float) inferno[INTERP(i,n-1,255)][1] / 255.0);
        cmap[i][2] = ((float) inferno[INTERP(i,n-1,255)][2] / 255.0);
      }
      break;
    case CS_DISTINCT:
      // cheap Latin Hypercube Sampling of RGB colorspace
      srand(1);
      const float min_br = 0.1;
      const float max_br = 1.;
      vector<float> rgb[3];
      for ( i = 0; i < 3; i++ ) 
        rgb[i].resize(n);
      for ( i = 0; i < n; i++ ) 
        rgb[0][i] = rgb[1][i] = rgb[2][i] = min_br + (max_br-min_br)/n*(i+0.5);
      for ( i=0; i<n; i++ ) {
        for( int j=0; j<3; j++ ) {
          int ri = rand()%(n-i);
          cmap[i][j] = rgb[j][ri];
          rgb[j].erase(rgb[j].begin()+ri);
        }
      }
      break;
  }
}
#undef INTERP


void Colourscale :: colourize( float val, float alpha )
{
  GLfloat *col = colorvec( val, alpha );
  glColor4fv( col );
}

void Colourscale :: size( int s )
{
  if ( s<3 ) return;

  if ( n ) {
    for ( int i=0; i<n; i++ ) delete[] cmap[i];
    delete[] cmap;
  }

  n = s;
  cmap = new GLfloat* [n];
  for ( int i=0; i<n; i++ ) cmap[i] = new GLfloat[4];

  calibrate( mindat, maxdat );
  scale( scaletype );
}


GLfloat* Colourscale :: colorvec( double val, float alpha )
{
  if( !NO_DEAD && (
           ( _deadRange&DEAD_MIN && val<_deadMin ) ||
           ( _deadRange&DEAD_MAX && val>_deadMax ) ||
           ( _deadRange&DEAD_NaN && isnan(val) ) 
                  )                                  ){
    return _deadColour;
  }
  int indx=int(a*val+b);
  if ( indx<0 ) indx = 0;
  else if ( indx>=n ) indx = n-1;
  cmap[indx][3] = alpha;
  return cmap[indx];
}


void
Colourscale :: output_png( const char *filename )
{
  PNGwrite cbar( fopen(filename,"w") );
  int y        = 128;
  int colwidth = 1024/n;
  if (!colwidth)
    colwidth = 1;
  int x        = colwidth*n;
  cbar.size( x, y );
  unsigned char buffer[x*y*3];
  for( int line = 0; line<y; line++ ){
    for( int i=0; i<n; i++ ) {
      unsigned char r=lroundf(cmap[i][0]*255);
      unsigned char g=lroundf(cmap[i][1]*255);
      unsigned char b=lroundf(cmap[i][2]*255);
      for( int j=0; j<colwidth; j++ ) {
        buffer[(i*colwidth+j+line*x)*3]   = r;
        buffer[(i*colwidth+j+line*x)*3+1] = g;
        buffer[(i*colwidth+j+line*x)*3+2] = b;
      }
    }
  }
  cbar.write( buffer, 1 );
}


void  
Colourscale::deadColour( GLfloat *dc, GLfloat dopac )
{
  memcpy( _deadColour, dc, 3*sizeof(GLfloat) );
  _deadColour[3] = dopac;
}

void
Colourscale::deadRange( double min, double max, bool nan, DeadRange dr )
{
  _deadMin   = min;
  _deadMax   = max;
  _deadNaN   = nan;
  _deadRange = dr;
}
