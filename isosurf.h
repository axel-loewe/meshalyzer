// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef isosurf_h
#define isosurf_h
#include <FL/Fl.H>
#include "TBmeshWin.h"
#include <FL/gl.h>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Value_Output.H>

class IsosurfControl {
  friend class TBmeshWin; 
public:
  IsosurfControl(TBmeshWin *tb);
  Fl_Double_Window *isowin;
  Fl_Button *isocol0;
private:
  inline void cb_isocol0_i(Fl_Button*, void*);
  static void cb_isocol0(Fl_Button*, void*);
public:
  Fl_Light_Button *isoOn0;
private:
  inline void cb_isoOn0_i(Fl_Light_Button*, void*);
  static void cb_isoOn0(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *isoval0;
private:
  inline void cb_isoval0_i(Fl_Value_Input*, void*);
  static void cb_isoval0(Fl_Value_Input*, void*);
public:
  Fl_Value_Slider *opacity0;
private:
  inline void cb_opacity0_i(Fl_Value_Slider*, void*);
  static void cb_opacity0(Fl_Value_Slider*, void*);
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
public:
  Fl_Light_Button *isolineOn;
private:
  inline void cb_isolineOn_i(Fl_Light_Button*, void*);
  static void cb_isolineOn(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *isolineVal0;
private:
  inline void cb_isolineVal0_i(Fl_Value_Input*, void*);
  static void cb_isolineVal0(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *isolineVal1;
private:
  inline void cb_isolineVal1_i(Fl_Value_Input*, void*);
  static void cb_isolineVal1(Fl_Value_Input*, void*);
public:
  Fl_Spinner *isoNumLines;
private:
  inline void cb_isoNumLines_i(Fl_Spinner*, void*);
  static void cb_isoNumLines(Fl_Spinner*, void*);
public:
  Fl_Spinner *isolineThick;
private:
  inline void cb_isolineThick_i(Fl_Spinner*, void*);
  static void cb_isolineThick(Fl_Spinner*, void*);
public:
  Fl_Light_Button *islDatify;
private:
  inline void cb_islDatify_i(Fl_Light_Button*, void*);
  static void cb_islDatify(Fl_Light_Button*, void*);
public:
  Fl_Button *islcol;
private:
  inline void cb_islcol_i(Fl_Button*, void*);
  static void cb_islcol(Fl_Button*, void*);
public:
  Fl_Value_Output *isoinc;
private:
  inline void cb_save_i(Fl_Button*, void*);
  static void cb_save(Fl_Button*, void*);
public:
  Fl_Light_Button *isoLineRestrict;
private:
  inline void cb_isoLineRestrict_i(Fl_Light_Button*, void*);
  static void cb_isoLineRestrict(Fl_Light_Button*, void*);
public:
  Fl_Button *isocol1;
private:
  inline void cb_isocol1_i(Fl_Button*, void*);
  static void cb_isocol1(Fl_Button*, void*);
public:
  Fl_Light_Button *isoOn1;
private:
  inline void cb_isoOn1_i(Fl_Light_Button*, void*);
  static void cb_isoOn1(Fl_Light_Button*, void*);
public:
  Fl_Value_Input *isoval1;
private:
  inline void cb_isoval1_i(Fl_Value_Input*, void*);
  static void cb_isoval1(Fl_Value_Input*, void*);
public:
  Fl_Value_Slider *opacity1;
private:
  inline void cb_opacity1_i(Fl_Value_Slider*, void*);
  static void cb_opacity1(Fl_Value_Slider*, void*);
  inline void cb_Save1_i(Fl_Button*, void*);
  static void cb_Save1(Fl_Button*, void*);
  TBmeshWin* mwtb; 
  GLfloat _color[2][4]; 
  GLfloat _islColor[4]; 
  int isosurfT; 
  int isolineT; 
  bool _islDirty; 
  bool _issDirty[2]; 
  bool unrestricted = true; 
public:
  const GLfloat* issColor(int s);
  void issColor(int s,float r, float g, float b, float a);
  bool islDirty(bool b=false);
  bool issDirty(int s, bool b=false);
  GLfloat islThickness();
  const GLfloat * islColor();
  void islColor(GLfloat r, GLfloat g, GLfloat b, GLfloat a);
};
#endif
