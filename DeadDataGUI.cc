// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "DeadDataGUI.h"
#include "TBmeshWin.h"

void DeadDataGUI::cb_showDeadData_i(Fl_Light_Button* o, void*) {
  if( o->value() ) {
  deadApp->do_callback();
  deadgrp->activate();
} else {
  deadgrp->deactivate();
  mwtb->cs->deadRange();
  mwtb->redraw();
};
}
void DeadDataGUI::cb_showDeadData(Fl_Light_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->user_data()))->cb_showDeadData_i(o,v);
}

void DeadDataGUI::cb_Recalibrate_i(Fl_Button*, void*) {
  double min, max;

if( minValid->value() )
  min = minValidVal->value();
else
  min = mwtb->cs->min();
  
if( maxValid->value() )
  max = maxValidVal->value();
else
  max = mwtb->cs->max();

mwtb->cs->calibrate( min, max );
}
void DeadDataGUI::cb_Recalibrate(Fl_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->parent()->user_data()))->cb_Recalibrate_i(o,v);
}

void DeadDataGUI::cb_dead_color_i(Fl_Color_Chooser* o, void*) {
  uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
workingCol->color(fl_rgb_color(ri,gi,bi));
workingCol->redraw();
}
void DeadDataGUI::cb_dead_color(Fl_Color_Chooser* o, void* v) {
  ((DeadDataGUI*)(o->parent()->parent()->user_data()))->cb_dead_color_i(o,v);
}

void DeadDataGUI::cb_minValid_i(Fl_Light_Button* o, void*) {
  if( o->value())
  minValidVal->activate();
else
  minValidVal->deactivate();
}
void DeadDataGUI::cb_minValid(Fl_Light_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->parent()->user_data()))->cb_minValid_i(o,v);
}

void DeadDataGUI::cb_deadApp_i(Fl_Button*, void*) {
  curCol->color(workingCol->color());
curCol->redraw();

DeadRange dr;
if( minValid->value() ) {
  if( maxValid->value() )
    dr = DEAD_RANGE;
  else
    dr = DEAD_MIN;
} else {
  if( maxValid->value() )
    dr = DEAD_MAX;
  else
    dr = NO_DEAD;
}
mwtb->cs->deadRange(minValidVal->value(),
         maxValidVal->value(), dr );

GLfloat col[3];
col[0] = dead_color->r();
col[1] = dead_color->g();
col[2] = dead_color->b();

mwtb->cs->deadColour(col,deadopac->value());

mwtb->redraw();
}
void DeadDataGUI::cb_deadApp(Fl_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->parent()->user_data()))->cb_deadApp_i(o,v);
}

void DeadDataGUI::cb_maxValid_i(Fl_Light_Button* o, void*) {
  if( o->value() ) 
  maxValidVal->activate();
else
  maxValidVal->deactivate();
}
void DeadDataGUI::cb_maxValid(Fl_Light_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->parent()->user_data()))->cb_maxValid_i(o,v);
}

void DeadDataGUI::cb_Done_i(Fl_Return_Button*, void*) {
  window->hide();
}
void DeadDataGUI::cb_Done(Fl_Return_Button* o, void* v) {
  ((DeadDataGUI*)(o->parent()->user_data()))->cb_Done_i(o,v);
}

DeadDataGUI::DeadDataGUI( TBmeshWin *w) {
  { window = new Fl_Double_Window(285, 355, "Dead Data ");
    window->user_data((void*)(this));
    { showDeadData = new Fl_Light_Button(27, 23, 110, 40, "Dead data");
      showDeadData->tooltip("Determine if data is valid or not");
      showDeadData->callback((Fl_Callback*)cb_showDeadData);
    } // Fl_Light_Button* showDeadData
    { deadgrp = new Fl_Group(12, 24, 260, 320);
      deadgrp->deactivate();
      { minValidVal = new Fl_Value_Input(132, 109, 70, 30, "min valid value");
        minValidVal->tooltip("colour data below this value");
        minValidVal->maximum(0);
        minValidVal->deactivate();
      } // Fl_Value_Input* minValidVal
      { maxValidVal = new Fl_Value_Input(132, 69, 70, 30, "max valid value");
        maxValidVal->tooltip("colour data above this value");
        maxValidVal->maximum(0);
        maxValidVal->value(1);
        maxValidVal->deactivate();
      } // Fl_Value_Input* maxValidVal
      { Fl_Button* o = new Fl_Button(158, 24, 110, 30, "Recalibrate");
        o->tooltip("recalibrate colour scale using valid max & min values");
        o->color((Fl_Color)134);
        o->callback((Fl_Callback*)cb_Recalibrate);
      } // Fl_Button* o
      { dead_color = new Fl_Color_Chooser(16, 164, 200, 95, "Dead Color");
        dead_color->tooltip("colour of invalid data");
        dead_color->box(FL_NO_BOX);
        dead_color->color(FL_BACKGROUND_COLOR);
        dead_color->selection_color(FL_BACKGROUND_COLOR);
        dead_color->labeltype(FL_NORMAL_LABEL);
        dead_color->labelfont(0);
        dead_color->labelsize(14);
        dead_color->labelcolor(FL_FOREGROUND_COLOR);
        dead_color->callback((Fl_Callback*)cb_dead_color);
        dead_color->align(Fl_Align(257));
        dead_color->when(FL_WHEN_RELEASE);
      } // Fl_Color_Chooser* dead_color
      { deadopac = new Fl_Value_Slider(233, 164, 35, 95, "Opacity");
        deadopac->tooltip("opacity of invalid data");
        deadopac->type(4);
        deadopac->color((Fl_Color)26);
        deadopac->minimum(1);
        deadopac->maximum(0);
        deadopac->value(1);
        deadopac->textsize(14);
        deadopac->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Value_Slider* deadopac
      { curCol = new Fl_Box(12, 279, 125, 25, "Current");
        curCol->tooltip("current colour");
        curCol->box(FL_GTK_DOWN_BOX);
        curCol->labelcolor((Fl_Color)98);
        curCol->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Box* curCol
      { workingCol = new Fl_Box(147, 279, 125, 25, "Working");
        workingCol->tooltip("selected colour");
        workingCol->box(FL_GTK_DOWN_BOX);
        workingCol->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Box* workingCol
      { minValid = new Fl_Light_Button(213, 109, 55, 30, "Min");
        minValid->tooltip("specify a minimum vaid data value");
        minValid->callback((Fl_Callback*)cb_minValid);
      } // Fl_Light_Button* minValid
      { deadApp = new Fl_Button(12, 309, 125, 35, "Apply");
        deadApp->tooltip("apply colour and range changes");
        deadApp->color((Fl_Color)238);
        deadApp->callback((Fl_Callback*)cb_deadApp);
      } // Fl_Button* deadApp
      { maxValid = new Fl_Light_Button(213, 69, 55, 30, "Max");
        maxValid->tooltip("specify a maximum valid data value");
        maxValid->callback((Fl_Callback*)cb_maxValid);
      } // Fl_Light_Button* maxValid
      deadgrp->end();
    } // Fl_Group* deadgrp
    { Fl_Return_Button* o = new Fl_Return_Button(147, 309, 125, 35, "Done");
      o->tooltip("close window");
      o->color((Fl_Color)215);
      o->callback((Fl_Callback*)cb_Done);
    } // Fl_Return_Button* o
    window->end();
  } // Fl_Double_Window* window
  mwtb = w;
}
