/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "igbhead"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "igbhead"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.2"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int x_arg;	/**< @brief number of x pixels.  */
  char * x_orig;	/**< @brief number of x pixels original value given at command line.  */
  const char *x_help; /**< @brief number of x pixels help description.  */
  int y_arg;	/**< @brief number of y pixels.  */
  char * y_orig;	/**< @brief number of y pixels original value given at command line.  */
  const char *y_help; /**< @brief number of y pixels help description.  */
  int z_arg;	/**< @brief number of z pixels.  */
  char * z_orig;	/**< @brief number of z pixels original value given at command line.  */
  const char *z_help; /**< @brief number of z pixels help description.  */
  int t_arg;	/**< @brief number of time slices.  */
  char * t_orig;	/**< @brief number of time slices original value given at command line.  */
  const char *t_help; /**< @brief number of time slices help description.  */
  char * data_type_arg;	/**< @brief char byte int uint float long double vec3f vec4f vec3d vec4d OR rgba.  */
  char * data_type_orig;	/**< @brief char byte int uint float long double vec3f vec4f vec3d vec4d OR rgba original value given at command line.  */
  const char *data_type_help; /**< @brief char byte int uint float long double vec3f vec4f vec3d vec4d OR rgba help description.  */
  char * system_arg;	/**< @brief big_||little_endian.  */
  char * system_orig;	/**< @brief big_||little_endian original value given at command line.  */
  const char *system_help; /**< @brief big_||little_endian help description.  */
  float dim_x_arg;	/**< @brief Size in x.  */
  char * dim_x_orig;	/**< @brief Size in x original value given at command line.  */
  const char *dim_x_help; /**< @brief Size in x help description.  */
  float dim_y_arg;	/**< @brief Size in y.  */
  char * dim_y_orig;	/**< @brief Size in y original value given at command line.  */
  const char *dim_y_help; /**< @brief Size in y help description.  */
  float dim_z_arg;	/**< @brief Size in z.  */
  char * dim_z_orig;	/**< @brief Size in z original value given at command line.  */
  const char *dim_z_help; /**< @brief Size in z help description.  */
  float dim_t_arg;	/**< @brief Duration.  */
  char * dim_t_orig;	/**< @brief Duration original value given at command line.  */
  const char *dim_t_help; /**< @brief Duration help description.  */
  float fac_x_arg;	/**< @brief Scaling factor in x.  */
  char * fac_x_orig;	/**< @brief Scaling factor in x original value given at command line.  */
  const char *fac_x_help; /**< @brief Scaling factor in x help description.  */
  float fac_y_arg;	/**< @brief Scaling factor in y.  */
  char * fac_y_orig;	/**< @brief Scaling factor in y original value given at command line.  */
  const char *fac_y_help; /**< @brief Scaling factor in y help description.  */
  float fac_z_arg;	/**< @brief Scaling factor in z.  */
  char * fac_z_orig;	/**< @brief Scaling factor in z original value given at command line.  */
  const char *fac_z_help; /**< @brief Scaling factor in z help description.  */
  float fac_t_arg;	/**< @brief Scaling factor in t.  */
  char * fac_t_orig;	/**< @brief Scaling factor in t original value given at command line.  */
  const char *fac_t_help; /**< @brief Scaling factor in t help description.  */
  float org_x_arg;	/**< @brief Origin for x.  */
  char * org_x_orig;	/**< @brief Origin for x original value given at command line.  */
  const char *org_x_help; /**< @brief Origin for x help description.  */
  float org_y_arg;	/**< @brief Origin for y.  */
  char * org_y_orig;	/**< @brief Origin for y original value given at command line.  */
  const char *org_y_help; /**< @brief Origin for y help description.  */
  float org_z_arg;	/**< @brief Origin for z.  */
  char * org_z_orig;	/**< @brief Origin for z original value given at command line.  */
  const char *org_z_help; /**< @brief Origin for z help description.  */
  float org_t_arg;	/**< @brief Origin for t.  */
  char * org_t_orig;	/**< @brief Origin for t original value given at command line.  */
  const char *org_t_help; /**< @brief Origin for t help description.  */
  float inc_x_arg;	/**< @brief Increment in x.  */
  char * inc_x_orig;	/**< @brief Increment in x original value given at command line.  */
  const char *inc_x_help; /**< @brief Increment in x help description.  */
  float inc_y_arg;	/**< @brief Increment in y.  */
  char * inc_y_orig;	/**< @brief Increment in y original value given at command line.  */
  const char *inc_y_help; /**< @brief Increment in y help description.  */
  float inc_z_arg;	/**< @brief Increment in z.  */
  char * inc_z_orig;	/**< @brief Increment in z original value given at command line.  */
  const char *inc_z_help; /**< @brief Increment in z help description.  */
  float inc_t_arg;	/**< @brief Increment in t.  */
  char * inc_t_orig;	/**< @brief Increment in t original value given at command line.  */
  const char *inc_t_help; /**< @brief Increment in t help description.  */
  float data_factor_arg;	/**< @brief Scaling factor for data.  */
  char * data_factor_orig;	/**< @brief Scaling factor for data original value given at command line.  */
  const char *data_factor_help; /**< @brief Scaling factor for data help description.  */
  float data_zero_arg;	/**< @brief Origin for data scaling.  */
  char * data_zero_orig;	/**< @brief Origin for data scaling original value given at command line.  */
  const char *data_zero_help; /**< @brief Origin for data scaling help description.  */
  char * author_arg;	/**< @brief Author name with no spaces.  */
  char * author_orig;	/**< @brief Author name with no spaces original value given at command line.  */
  const char *author_help; /**< @brief Author name with no spaces help description.  */
  char * units_arg;	/**< @brief Data units.  */
  char * units_orig;	/**< @brief Data units original value given at command line.  */
  const char *units_help; /**< @brief Data units help description.  */
  char * x_units_arg;	/**< @brief Units for x.  */
  char * x_units_orig;	/**< @brief Units for x original value given at command line.  */
  const char *x_units_help; /**< @brief Units for x help description.  */
  char * y_units_arg;	/**< @brief Units for y.  */
  char * y_units_orig;	/**< @brief Units for y original value given at command line.  */
  const char *y_units_help; /**< @brief Units for y help description.  */
  char * z_units_arg;	/**< @brief Units for z.  */
  char * z_units_orig;	/**< @brief Units for z original value given at command line.  */
  const char *z_units_help; /**< @brief Units for z help description.  */
  char * t_units_arg;	/**< @brief Units for t.  */
  char * t_units_orig;	/**< @brief Units for t original value given at command line.  */
  const char *t_units_help; /**< @brief Units for t help description.  */
  const char *jive_time_help; /**< @brief Make no. time slices jive with data size help description.  */
  char * transparent_arg;	/**< @brief Transparent pixel value in hex.  */
  char * transparent_orig;	/**< @brief Transparent pixel value in hex original value given at command line.  */
  const char *transparent_help; /**< @brief Transparent pixel value in hex help description.  */
  const char *no_transparent_help; /**< @brief Turn transparency off help description.  */
  const char *decapitate_help; /**< @brief Remove header help description.  */
  char * comment_arg;	/**< @brief Add a line of comment.  */
  char * comment_orig;	/**< @brief Add a line of comment original value given at command line.  */
  const char *comment_help; /**< @brief Add a line of comment help description.  */
  const char *clear_comment_help; /**< @brief Clear all comments help description.  */
  char * output_file_arg;	/**< @brief output file.  */
  char * output_file_orig;	/**< @brief output file original value given at command line.  */
  const char *output_file_help; /**< @brief output file help description.  */
  char * frankenstein_arg;	/**< @brief attach header to this file.  */
  char * frankenstein_orig;	/**< @brief attach header to this file original value given at command line.  */
  const char *frankenstein_help; /**< @brief attach header to this file help description.  */
  const char *explode_help; /**< @brief explode file into igb time slices help description.  */
  const char *memfeminize_help; /**< @brief convert igb to memfem format help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int x_given ;	/**< @brief Whether x was given.  */
  unsigned int y_given ;	/**< @brief Whether y was given.  */
  unsigned int z_given ;	/**< @brief Whether z was given.  */
  unsigned int t_given ;	/**< @brief Whether t was given.  */
  unsigned int data_type_given ;	/**< @brief Whether data-type was given.  */
  unsigned int system_given ;	/**< @brief Whether system was given.  */
  unsigned int dim_x_given ;	/**< @brief Whether dim-x was given.  */
  unsigned int dim_y_given ;	/**< @brief Whether dim-y was given.  */
  unsigned int dim_z_given ;	/**< @brief Whether dim-z was given.  */
  unsigned int dim_t_given ;	/**< @brief Whether dim-t was given.  */
  unsigned int fac_x_given ;	/**< @brief Whether fac-x was given.  */
  unsigned int fac_y_given ;	/**< @brief Whether fac-y was given.  */
  unsigned int fac_z_given ;	/**< @brief Whether fac-z was given.  */
  unsigned int fac_t_given ;	/**< @brief Whether fac-t was given.  */
  unsigned int org_x_given ;	/**< @brief Whether org-x was given.  */
  unsigned int org_y_given ;	/**< @brief Whether org-y was given.  */
  unsigned int org_z_given ;	/**< @brief Whether org-z was given.  */
  unsigned int org_t_given ;	/**< @brief Whether org-t was given.  */
  unsigned int inc_x_given ;	/**< @brief Whether inc-x was given.  */
  unsigned int inc_y_given ;	/**< @brief Whether inc-y was given.  */
  unsigned int inc_z_given ;	/**< @brief Whether inc-z was given.  */
  unsigned int inc_t_given ;	/**< @brief Whether inc-t was given.  */
  unsigned int data_factor_given ;	/**< @brief Whether data-factor was given.  */
  unsigned int data_zero_given ;	/**< @brief Whether data-zero was given.  */
  unsigned int author_given ;	/**< @brief Whether author was given.  */
  unsigned int units_given ;	/**< @brief Whether units was given.  */
  unsigned int x_units_given ;	/**< @brief Whether x-units was given.  */
  unsigned int y_units_given ;	/**< @brief Whether y-units was given.  */
  unsigned int z_units_given ;	/**< @brief Whether z-units was given.  */
  unsigned int t_units_given ;	/**< @brief Whether t-units was given.  */
  unsigned int jive_time_given ;	/**< @brief Whether jive-time was given.  */
  unsigned int transparent_given ;	/**< @brief Whether transparent was given.  */
  unsigned int no_transparent_given ;	/**< @brief Whether no-transparent was given.  */
  unsigned int decapitate_given ;	/**< @brief Whether decapitate was given.  */
  unsigned int comment_given ;	/**< @brief Whether comment was given.  */
  unsigned int clear_comment_given ;	/**< @brief Whether clear-comment was given.  */
  unsigned int output_file_given ;	/**< @brief Whether output-file was given.  */
  unsigned int frankenstein_given ;	/**< @brief Whether frankenstein was given.  */
  unsigned int explode_given ;	/**< @brief Whether explode was given.  */
  unsigned int memfeminize_given ;	/**< @brief Whether memfeminize was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
