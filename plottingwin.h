// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef plottingwin_h
#define plottingwin_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <cstring>
#include <string>
using namespace std;
#include "Graph.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Light_Button.H>

class PlotWin {
  double *data; 
  int datasize; 
  double datamin; 
  int tm; // datum to highlight
  int _id; // vertex id
  double *xv; 
  double tmx[2], tmy[2]; 
public:
  Fl_Button *but; 
private:
  bool rotated; 
public:
  void set_data( int, int, double *, int t=-1, float dt=1,float torg=0, double* xd=NULL); 
  void set_data( int, int, float *, int t=-1, float dt=1, float torg=0, float* xd=NULL); 
  void highlight( int ); 
  void rotate( bool ); 
private:
  void writedata(); 
public:
  PlotWin(  string title );
  Fl_Double_Window *window;
private:
  inline void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
public:
  Graph *graph;
  Fl_Group *button_grp;
private:
  inline void cb_Close_i(Fl_Return_Button*, void*);
  static void cb_Close(Fl_Return_Button*, void*);
  inline void cb_Write_i(Fl_Button*, void*);
  static void cb_Write(Fl_Button*, void*);
public:
  Fl_Light_Button *rotbut;
private:
  inline void cb_rotbut_i(Fl_Light_Button*, void*);
  static void cb_rotbut(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *autoscalebut;
private:
  inline void cb_autoscalebut_i(Fl_Light_Button*, void*);
  static void cb_autoscalebut(Fl_Light_Button*, void*);
  inline void cb_Hold_i(Fl_Button*, void*);
  static void cb_Hold(Fl_Button*, void*);
public:
  ~PlotWin(); 
  void autoscale(int a);
};
#endif
