# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
decl {\#include "TBmeshWin.h"} {private global
}

decl {\#include "Frame.h"} {private local
}

decl {using namespace std;} {private local
}

decl {\#include <vector>} {public global
}

decl {\#include <algorithm>} {private local
}

decl {\#include <sstream>} {private local
}

decl {\#include <unistd.h>} {private local
}

decl {\#include <sys/stat.h>} {private local
}

decl {\#include <sys/types.h>} {private local
}

decl {class Controls;} {public global
}

decl {\#include "Vector3D.h"} {public global
}

decl {\#include "Quaternion.h"} {public global
}

decl {class TBmeshWin;} {public global
}

class FlyByData {open
} {
  decl {int steps;} {public local
  }
  decl {stringstream *state;} {public local
  }
  decl {Quaternion qRot;} {public local
  }
  decl {V3f translate;} {public local
  }
  decl {float scale;} {public local
  }
  Function {FlyByData() = default} {open
  } {}
  Function {FlyByData(int st, stringstream *ss, Quaternion &qr, const V3f &tr, float sc )} {open
  } {
    code {steps     = st;
state     = ss;
qRot      = qr;
translate = tr;
scale     = sc;} {}
  }
  Function {~FlyByData()} {open return_type virtual
  } {
    code {delete state;} {}
  }
}

class FlyBy {open
} {
  Function {FlyBy( TBmeshWin *tb, Controls *c )} {open
  } {
    Fl_Window fb_win {
      label FlyBy open
      xywh {1267 248 340 325} type Double align 4 visible
    } {
      Fl_Browser fb_list {
        callback {FlyByData* fbdat = static_cast<FlyByData*>(fb_list->data(fb_list->value()));
if( fbdat ) fb_steps->value(fbdat->steps);}
        xywh {15 15 205 155} type Hold when 4
      }
      Fl_Button fb_load {
        label {@reload}
        callback {FlyByData *fbdat = static_cast<FlyByData*>(fb_list->data(fb_list->value()));
if( !fbdat ) return;
stringstream sstr(fbdat->state->str());
controls->restore_state( sstr );}
        tooltip {load selected state} xywh {15 180 65 35} color 127
      }
      Fl_Button fb_add {
        label {@+}
        callback {stringstream newlabel;
newlabel << "view " << viewno++;

int selstate=fb_list->value();
if( !selstate ) selstate=fb_list->size();

stringstream *sstr = new stringstream;
controls->save_state( *sstr, false );

int sts;
if( selstate>1 ) 
	sts = static_cast<FlyByData*>(fb_list->data(selstate-1))->steps;
else
	sts = 10;

FlyByData *fbdat = new FlyByData( sts, sstr,tbwm->trackball.qRot,
          tbwm->trackball.GetTranslation(),tbwm->trackball.GetScale() );
          
fb_list->insert( selstate+1, newlabel.str().c_str(), fbdat );
fb_list->select( selstate+1 );
last_added=selstate+1;

if( fb_list->size() >= 2 ) {
  fb_play->activate();
  fb_rec->activate();
}}
        tooltip {add current state to list} xywh {90 180 58 35} color 222
      }
      Fl_Spinner fb_steps {
        label {\#steps}
        callback {FlyByData *fbdat = static_cast<FlyByData*>(fb_list->data(fb_list->value()));
if( !fbdat ) return;
fbdat->steps = o->value();}
        tooltip {number of frames to interpolate to next state} xywh {235 30 90 25} align 1 maximum 1000 value 10
      }
      Fl_Button fb_play {
        label {@>|}
        callback {fly();}
        tooltip {play flyby from selected state} xywh {10 275 95 35} deactivate
      }
      Fl_Button fb_rec {
        label {@circle}
        callback {string base = fb_fname->value();
auto dp = base.find_last_of( "." );
if( dp != string::npos ) {
  base.erase(dp,string::npos);
  fb_fname->value(base.c_str());
}

fly( base );}
        tooltip {play and record flyby} xywh {125 275 95 35} labelcolor 1 deactivate
      }
      Fl_Return_Button fb_close {
        label close
        callback {fb_win->hide();}
        tooltip {close this dialogue} xywh {235 275 95 35}
      }
      Fl_Menu_Button fb_del {
        label Delete
        tooltip {delete selected state from list} xywh {235 180 95 35} color 90 labelcolor 7 textcolor 7
      } {
        MenuItem {} {
          label really
          callback {int selstate = fb_list->value();
if( !selstate ) return;

FlyByData *fbdat = static_cast<FlyByData*>(fb_list->data(selstate));
fb_list->remove(selstate);
delete fbdat;

if( fb_list->size() < 2 ) {
  fb_rec->deactivate();
  fb_play->deactivate();
}}
          xywh {0 0 31 20}
        }
      }
      Fl_Button {} {
        label {@8}
        callback {int curpos = fb_list->value();
if( curpos<2 ) return;
fb_list->select(curpos,0);
fb_list->move(curpos-1, curpos);
fb_list->select(curpos-1);
fb_list->redraw();}
        tooltip {move selected state up} xywh {235 60 30 30}
      }
      Fl_Button {} {
        label {@2}
        callback {int curpos = fb_list->value();
if( !curpos or curpos==fb_list->size() ) return;
fb_list->select(curpos,0);
fb_list->move(curpos+1, curpos);
fb_list->select(curpos+1);
fb_list->redraw();}
        tooltip {move selected state down} xywh {235 95 30 30}
      }
      Fl_Button {} {
        label rename
        callback {int selstate = fb_list->value();
if( !selstate ) return;
const char *curname = fb_list->text(selstate);
const char *newname = fl_input("rename state",curname);
string nname = newname;
// '$' is not allowed in name
std:replace( nname.begin(), nname.end(), '$', '&' ); 
if( newname ) fb_list->text(selstate,nname.c_str());}
        tooltip {rename selected state} xywh {270 70 55 40} color 94
      }
      Fl_Value_Input fb_delay {
        label {delay:}
        tooltip {frame delay in ms when playing flyby} xywh {280 147 45 27} minimum 1 maximum 1000 value 100
      }
      Fl_File_Input fb_fname {
        label {output file name base:}
        xywh {10 238 230 29} align 1
      }
      Fl_Button {} {
        label browse
        callback {const char* fn=fl_file_chooser("Choose output file name base", "*.png",fb_fname->value() );
if( fn != NULL ) fb_fname->value(fn);}
        tooltip {select new file name base} xywh {250 236 75 29}
      }
      Fl_Check_Button fb_tmadv {
        label {adv time}
        tooltip {advance time with position} xywh {240 120 55 30} down_box DOWN_BOX
      }
      Fl_Button fb_spin {
        label Spin
        callback {const char* axis = fl_input("Rotation axis", "0 0 1");
if( !axis ) return;

V3f rotaxis;
istringstream axis_str(axis);
axis_str >> rotaxis.X() >> rotaxis.Y() >> rotaxis.Z();
Quaternion rot;
rot.SetRotationAboutAxis(2*M_PI/3., rotaxis );
if( !fb_list->size() ) {
  fb_add->do_callback();
  stringstream label;
  label << "spin (" << axis << ") 0";
  fb_list->text(last_added, label.str().c_str() );
}
for( int i=0; i<3; i++ ) {
  tbwm->trackball.Rotation(rot);
  fb_add->do_callback();
  stringstream label;
  label << "spin (" << axis << ") " << (i+1)*120;
  fb_list->text(last_added, label.str().c_str());
}}
        comment {Spin completely about an axis}
        tooltip {add complete spin about an axis} xywh {165 180 58 35} color 173
      }
    }
    code {tbwm = tb;
controls = c;
fb_fname->value("flyby");
viewno = 0;} {}
  }
  decl {TBmeshWin *tbwm;} {private local
  }
  decl {Controls* controls;} {private local
  }
  decl {const char *ofile="flyby";} {private local
  }
  decl {const char *odir=".";} {private local
  }
  decl {int last_added=0;} {private local
  }
  decl {int viewno;} {private local
  }
  Function {fly( string fbase = string("") )} {open
  } {
    code {int start = fb_list->value();
if( !start ) start = 1;

unsigned int frameno=start;

FlyByData *fbdat_e = static_cast<FlyByData*>(fb_list->data(start));
FlyByData *fbdat_s;

stringstream sstr(fbdat_e->state->str());
controls->restore_state( sstr );
int start_tm = tbwm->time();
bool first   = true;

for( int i=start+1; i<=fb_list->size(); i++ ) {
  fbdat_s = fbdat_e;
  fbdat_e = static_cast<FlyByData*>(fb_list->data(i));
  Quaternion start = fbdat_s->qRot;
  Quaternion end   = fbdat_e->qRot;
  for( int j=0; j<fbdat_s->steps; j++ ){
    float t= float(j)/float(fbdat_s->steps-1);
    tbwm->trackball.qRot = start.Slurp(end, t);
    V3f trans = (1-t)*fbdat_s->translate + t*fbdat_e->translate;
    tbwm->trackball.SetTranslation(trans);
    tbwm->trackball.SetScale(  (1-t)*fbdat_s->scale + t*fbdat_e->scale );
    if( fb_tmadv->value() ) {
      if ( !tbwm->set_time( start_tm++ ) )
        tbwm->set_time( start_tm=0 );
    }
    tbwm->redraw();
    Fl::flush();
    if( fbase.size() ) {
      char framename[1024];
      sprintf( framename, "%s%05d.png", fbase.c_str(), frameno++ );
      if( first ) {
      	first = false;
        struct stat buffer;
        cout << framename << endl;   
        if(!stat(framename, &buffer) ) {  // file exists
          if( fl_choice("Overwrite image files?", "No", "Yes", 0 ) == 0 )
            return;
        } 
      }
      Frame frame( tbwm );
      frame.write( tbwm->w(), tbwm->h(), framename, tbwm->time() );
    } else 
      usleep( fb_delay->value()*1000 );
  }
  stringstream s2ss(fbdat_e->state->str());
  controls->restore_state( s2ss );
}
tbwm->redraw();
Fl::flush(); 
if( fbase.size() ) {
  char framename[1024];
  sprintf( framename, "%s%05d.png", fbase.c_str(), frameno++ );
  Frame frame( tbwm );
  frame.write( tbwm->w(), tbwm->h(), framename, tbwm->time());
}} {selected
    }
  }
  Function {save( ostream &ostr )} {open
  } {
    code {for( int i=1; i<=fb_list->size(); i++ ) {
  FlyByData *fbd = static_cast<FlyByData *>(fb_list->data(i));
  string state = fbd->state->str();
  std:replace( state.begin(), state.end(), '\\n', '$' );
  ostr << fbd->steps << " " << fbd->qRot << " " << 
          fbd->scale << " " << fbd->translate << 
          " " << fb_list->text(i) << endl;
  ostr << state << endl;
}} {}
  }
  Function {restore( istream &istr, int newno )} {open
  } {
    code {for( int i=1; i<=fb_list->size(); i++ ) {
  delete static_cast<FlyByData *>(fb_list->data(i));
}
fb_list->clear();

for( int i=1; i<=newno; i++ ) { 
  FlyByData *fbd = new FlyByData();
  istr >> fbd->steps >> fbd->qRot >> fbd->scale >> fbd->translate;
  string label;
  std::getline( istr, label );
  string state; 
  std::getline( istr, state );
  std:replace( state.begin(), state.end(), '$', '\\n' );
  fbd ->state = new stringstream(state);
  fb_list->add(label.substr(1).c_str(), fbd);
}

viewno = newno;

if( fb_list->size() >= 2 ) {
  fb_rec->activate();
  fb_play->activate();
} else {
  fb_rec->deactivate();
  fb_play->deactivate();
}} {}
  }
}
