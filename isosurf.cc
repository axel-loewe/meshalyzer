// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "isosurf.h"
#include <FL/Fl_Color_Chooser.H>

void IsosurfControl::cb_isocol0_i(Fl_Button*, void*) {
  double r=_color[0][0], g=_color[0][1], b=_color[0][2];
if(fl_color_chooser( "Isosurface 0",r,g,b ) ){
  issColor(0,r,g,b,opacity0->value());
  if( isoOn0->value() )
    mwtb->redraw();
};
}
void IsosurfControl::cb_isocol0(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isocol0_i(o,v);
}

void IsosurfControl::cb_isoOn0_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void IsosurfControl::cb_isoOn0(Fl_Light_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoOn0_i(o,v);
}

void IsosurfControl::cb_isoval0_i(Fl_Value_Input*, void*) {
  _issDirty[0] = true;
if( isoOn0->value() )
  mwtb->redraw();
}
void IsosurfControl::cb_isoval0(Fl_Value_Input* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoval0_i(o,v);
}

void IsosurfControl::cb_opacity0_i(Fl_Value_Slider*, void*) {
  if( isoOn0->value() )
  mwtb->redraw();
}
void IsosurfControl::cb_opacity0(Fl_Value_Slider* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_opacity0_i(o,v);
}

void IsosurfControl::cb_Save_i(Fl_Button*, void*) {
  char *file = fl_file_chooser( "Auxillary File Base Name", "*.pts_t", "isoSurf0", 0 );
if( !file  ) return;
mwtb->iso0->saveAux( file );
}
void IsosurfControl::cb_Save(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void IsosurfControl::cb_isolineOn_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void IsosurfControl::cb_isolineOn(Fl_Light_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isolineOn_i(o,v);
}

void IsosurfControl::cb_isolineVal0_i(Fl_Value_Input*, void*) {
  _islDirty = true;
isoinc->value((isolineVal1->value()-isolineVal0->value())/(float)(isoNumLines->value()-1.));
if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_isolineVal0(Fl_Value_Input* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isolineVal0_i(o,v);
}

void IsosurfControl::cb_isolineVal1_i(Fl_Value_Input*, void*) {
  _islDirty = true;
isoinc->value((isolineVal1->value()-isolineVal0->value())/(isoNumLines->value()-1.));
if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_isolineVal1(Fl_Value_Input* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isolineVal1_i(o,v);
}

void IsosurfControl::cb_isoNumLines_i(Fl_Spinner*, void*) {
  _islDirty = true;
isoinc->value((isolineVal1->value()-isolineVal0->value())/(isoNumLines->value()-1.));
if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_isoNumLines(Fl_Spinner* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoNumLines_i(o,v);
}

void IsosurfControl::cb_isolineThick_i(Fl_Spinner*, void*) {
  if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_isolineThick(Fl_Spinner* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isolineThick_i(o,v);
}

void IsosurfControl::cb_islDatify_i(Fl_Light_Button*, void*) {
  if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_islDatify(Fl_Light_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_islDatify_i(o,v);
}

void IsosurfControl::cb_islcol_i(Fl_Button*, void*) {
  double r=_islColor[0], g=_islColor[1], b=_islColor[2];
if(fl_color_chooser( "Isoline",r,g,b ) ){
  _islColor[0] = r;
  _islColor[1] = g;
  _islColor[2] = b;
  if( isolineOn->value() ) mwtb->redraw();
};
}
void IsosurfControl::cb_islcol(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_islcol_i(o,v);
}

void IsosurfControl::cb_save_i(Fl_Button*, void*) {
  char *fname = fl_file_chooser( "Auxiliary mesh name", "*.pts_t", "isoLines.pts_t", 0 );
if( !fname ) return;
mwtb->isoline->auxMesh( fname );
}
void IsosurfControl::cb_save(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_save_i(o,v);
}

void IsosurfControl::cb_isoLineRestrict_i(Fl_Light_Button* o, void*) {
  unrestricted = o->value();
_islDirty = true;
if( isolineOn->value() ) mwtb->redraw();
}
void IsosurfControl::cb_isoLineRestrict(Fl_Light_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoLineRestrict_i(o,v);
}

void IsosurfControl::cb_isocol1_i(Fl_Button*, void*) {
  double r=_color[1][0], g=_color[1][1], b=_color[1][2];
if(fl_color_chooser( "Isosurface 1",r,g,b ) ){
  issColor( 1, r, g, b, opacity1->value() );
  if( isoOn1->value() )
    mwtb->redraw();
};
}
void IsosurfControl::cb_isocol1(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isocol1_i(o,v);
}

void IsosurfControl::cb_isoOn1_i(Fl_Light_Button*, void*) {
  mwtb->redraw();
}
void IsosurfControl::cb_isoOn1(Fl_Light_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoOn1_i(o,v);
}

void IsosurfControl::cb_isoval1_i(Fl_Value_Input*, void*) {
  _issDirty[1] = true;
if( isoOn1->value() )
  mwtb->redraw();
}
void IsosurfControl::cb_isoval1(Fl_Value_Input* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_isoval1_i(o,v);
}

void IsosurfControl::cb_opacity1_i(Fl_Value_Slider*, void*) {
  if( isoOn1->value() )
  mwtb->redraw();
}
void IsosurfControl::cb_opacity1(Fl_Value_Slider* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_opacity1_i(o,v);
}

void IsosurfControl::cb_Save1_i(Fl_Button*, void*) {
  char *file = fl_file_chooser( "Auxillary File Base Name", "*.pts_t", "isoSurf1", 0 );
if( !file  ) return;
mwtb->iso1->saveAux( file );
}
void IsosurfControl::cb_Save1(Fl_Button* o, void* v) {
  ((IsosurfControl*)(o->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

IsosurfControl::IsosurfControl(TBmeshWin *tb) {
  { isowin = new Fl_Double_Window(305, 410);
    isowin->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(7, 8, 290, 115, "Isosurface 0");
      o->box(FL_UP_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { isocol0 = new Fl_Button(232, 82, 55, 29, "colour");
        isocol0->callback((Fl_Callback*)cb_isocol0);
      } // Fl_Button* isocol0
      { isoOn0 = new Fl_Light_Button(25, 40, 45, 28, "on");
        isoOn0->callback((Fl_Callback*)cb_isoOn0);
      } // Fl_Light_Button* isoOn0
      { isoval0 = new Fl_Value_Input(135, 40, 70, 28, "value:");
        isoval0->callback((Fl_Callback*)cb_isoval0);
        isoval0->when(FL_WHEN_ENTER_KEY);
      } // Fl_Value_Input* isoval0
      { opacity0 = new Fl_Value_Slider(77, 83, 145, 25, "Opacity:");
        opacity0->type(1);
        opacity0->value(1);
        opacity0->textsize(14);
        opacity0->callback((Fl_Callback*)cb_opacity0);
        opacity0->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* opacity0
      { Fl_Button* o = new Fl_Button(220, 40, 66, 25, "Save Aux");
        o->callback((Fl_Callback*)cb_Save);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(9, 251, 290, 150, "Isolines");
      o->box(FL_UP_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(16);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { isolineOn = new Fl_Light_Button(20, 274, 70, 26, "on");
        isolineOn->callback((Fl_Callback*)cb_isolineOn);
      } // Fl_Light_Button* isolineOn
      { isolineVal0 = new Fl_Value_Input(224, 277, 60, 29, "start value:");
        isolineVal0->callback((Fl_Callback*)cb_isolineVal0);
        isolineVal0->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* isolineVal0
      { isolineVal1 = new Fl_Value_Input(224, 307, 60, 29, "end value:");
        isolineVal1->callback((Fl_Callback*)cb_isolineVal1);
        isolineVal1->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* isolineVal1
      { isoNumLines = new Fl_Spinner(224, 337, 60, 24, "#lines:");
        isoNumLines->callback((Fl_Callback*)cb_isoNumLines);
      } // Fl_Spinner* isoNumLines
      { isolineThick = new Fl_Spinner(91, 367, 50, 24, "thickness");
        isolineThick->minimum(0);
        isolineThick->callback((Fl_Callback*)cb_isolineThick);
      } // Fl_Spinner* isolineThick
      { islDatify = new Fl_Light_Button(20, 304, 70, 26, "datified");
        islDatify->selection_color((Fl_Color)78);
        islDatify->callback((Fl_Callback*)cb_islDatify);
      } // Fl_Light_Button* islDatify
      { islcol = new Fl_Button(95, 305, 50, 25, "colour");
        islcol->callback((Fl_Callback*)cb_islcol);
      } // Fl_Button* islcol
      { isoinc = new Fl_Value_Output(215, 364, 71, 27, "increment:");
        isoinc->tooltip("increment between isolines");
        isoinc->color((Fl_Color)3);
        isoinc->selection_color((Fl_Color)17);
      } // Fl_Value_Output* isoinc
      { Fl_Button* o = new Fl_Button(95, 275, 50, 25, "save");
        o->tooltip("save lines as auxiliary grid");
        o->callback((Fl_Callback*)cb_save);
      } // Fl_Button* o
      { isoLineRestrict = new Fl_Light_Button(20, 335, 135, 25, "undisplayed surf\'s");
        isoLineRestrict->tooltip("calculate isolines on undisplayed surfaces");
        isoLineRestrict->value(1);
        isoLineRestrict->selection_color((Fl_Color)133);
        isoLineRestrict->callback((Fl_Callback*)cb_isoLineRestrict);
        isoLineRestrict->when(FL_WHEN_CHANGED);
      } // Fl_Light_Button* isoLineRestrict
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(7, 130, 290, 115, "Isosurface 1");
      o->box(FL_UP_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
      { isocol1 = new Fl_Button(230, 204, 55, 29, "colour");
        isocol1->callback((Fl_Callback*)cb_isocol1);
      } // Fl_Button* isocol1
      { isoOn1 = new Fl_Light_Button(25, 162, 45, 28, "on");
        isoOn1->callback((Fl_Callback*)cb_isoOn1);
      } // Fl_Light_Button* isoOn1
      { isoval1 = new Fl_Value_Input(135, 162, 70, 28, "value:");
        isoval1->callback((Fl_Callback*)cb_isoval1);
        isoval1->when(FL_WHEN_ENTER_KEY);
      } // Fl_Value_Input* isoval1
      { opacity1 = new Fl_Value_Slider(77, 205, 145, 25, "Opacity:");
        opacity1->type(1);
        opacity1->value(1);
        opacity1->textsize(14);
        opacity1->callback((Fl_Callback*)cb_opacity1);
        opacity1->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* opacity1
      { Fl_Button* o = new Fl_Button(220, 165, 66, 25, "Save Aux");
        o->callback((Fl_Callback*)cb_Save1);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    isowin->end();
  } // Fl_Double_Window* isowin
  mwtb = tb;
  _color[0][0] = _color[0][3] = 1.;
  _color[0][1] = _color[0][2] = 0;
  _color[1][0] = _color[1][2]  = 0;
  _color[1][1] = 0.8;
  _color[1][3] = 1.;
  _islDirty = true;
  _islColor[0] = _islColor[1] = _islColor[2] = 0;
  _islColor[3] = 1.;
  _issDirty[0] = true;
  _issDirty[1] = true;
}

const GLfloat* IsosurfControl::issColor(int s) {
  if( s==0 )
    _color[s][3] = opacity0->value();
  else if( s== 1 )
    _color[s][3] = opacity1->value();
  return _color[s];
}

void IsosurfControl::issColor(int s,float r, float g, float b, float a) {
  _color[s][0] = r;
  _color[s][1] = g;
  _color[s][2] = b;
  _color[s][3] = a;
}

bool IsosurfControl::islDirty(bool b) {
  bool od = _islDirty;
  _islDirty = b;
  return od;
}

bool IsosurfControl::issDirty(int s, bool b) {
  bool od = _issDirty[s];
  _issDirty[s]=b;
  return od;
}

GLfloat IsosurfControl::islThickness() {
  return isolineThick->value();
}

const GLfloat * IsosurfControl::islColor() {
  return _islColor;
}

void IsosurfControl::islColor(GLfloat r, GLfloat g, GLfloat b, GLfloat a) {
  _islColor[0] = r;
  _islColor[1] = g;
  _islColor[2] = b;
  _islColor[3] = a;
}
