// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "colourchoice.h"
#include "TBmeshWin.h"
#include "AuxGrid.h"
#include <string>

void colourChoice::cb_rgb_choice_i(Fl_Color_Chooser* o, void*) {
  uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();
}
void colourChoice::cb_rgb_choice(Fl_Color_Chooser* o, void* v) {
  ((colourChoice*)(o->parent()->user_data()))->cb_rgb_choice_i(o,v);
}

void colourChoice::cb_Done_i(Fl_Return_Button*, void*) {
  apbut->do_callback();
window->hide();
}
void colourChoice::cb_Done(Fl_Return_Button* o, void* v) {
  ((colourChoice*)(o->parent()->user_data()))->cb_Done_i(o,v);
}

void colourChoice::cb_apbut_i(Fl_Button*, void*) {
  GLfloat col[4];
col[0] = rgb_choice->r();
col[1] = rgb_choice->g();
col[2] = rgb_choice->b();
col[3] = opacity->value();
for( int r=0; r<ch_br->nitems(); r++ )
  if( ch_br->checked(r+1) ) 
    tbmw->set_color( obj, r, col[0], col[1], col[2], col[3] );
tbmw->redraw();
}
void colourChoice::cb_apbut(Fl_Button* o, void* v) {
  ((colourChoice*)(o->parent()->user_data()))->cb_apbut_i(o,v);
}

colourChoice::colourChoice( GLfloat *c, Fl_Check_Browser *cb, Object_t o, TBmeshWin *t ) {
  { window = new Fl_Double_Window(225, 260, "Choose colour");
    window->user_data((void*)(this));
    { rgb_choice = new Fl_Color_Chooser(0, 0, 225, 175);
      rgb_choice->box(FL_NO_BOX);
      rgb_choice->color(FL_BACKGROUND_COLOR);
      rgb_choice->selection_color(FL_BACKGROUND_COLOR);
      rgb_choice->labeltype(FL_NORMAL_LABEL);
      rgb_choice->labelfont(0);
      rgb_choice->labelsize(14);
      rgb_choice->labelcolor(FL_FOREGROUND_COLOR);
      rgb_choice->callback((Fl_Callback*)cb_rgb_choice);
      rgb_choice->align(Fl_Align(FL_ALIGN_CENTER));
      rgb_choice->when(FL_WHEN_RELEASE);
    } // Fl_Color_Chooser* rgb_choice
    { opacity = new Fl_Slider(10, 190, 205, 25, "Opacity");
      opacity->type(3);
      opacity->selection_color(FL_FOREGROUND_COLOR);
      opacity->step(0.01);
      opacity->value(1);
      opacity->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Slider* opacity
    { Fl_Return_Button* o = new Fl_Return_Button(125, 225, 90, 30, "Done");
      o->callback((Fl_Callback*)cb_Done);
    } // Fl_Return_Button* o
    { apbut = new Fl_Button(15, 225, 95, 30, "Apply");
      apbut->callback((Fl_Callback*)cb_apbut);
    } // Fl_Button* apbut
    window->end();
  } // Fl_Double_Window* window
  obj = o;
  tbmw = t;
  ch_br = cb;
  
  rgb_choice->rgb(c[0], c[1], c[2] );
  opacity->value( c[3] );
}

void AuxColourChoice::cb_rgb_choice1_i(Fl_Color_Chooser* o, void*) {
  uchar ri = o->r()*255.;
uchar bi = o->b()*255.;
uchar gi = o->g()*255.;
opacity->selection_color(fl_rgb_color(ri,gi,bi));
opacity->redraw();
}
void AuxColourChoice::cb_rgb_choice1(Fl_Color_Chooser* o, void* v) {
  ((AuxColourChoice*)(o->parent()->user_data()))->cb_rgb_choice1_i(o,v);
}

void AuxColourChoice::cb_Done1_i(Fl_Return_Button*, void*) {
  apbut->do_callback();
window->hide();
}
void AuxColourChoice::cb_Done1(Fl_Return_Button* o, void* v) {
  ((AuxColourChoice*)(o->parent()->user_data()))->cb_Done1_i(o,v);
}

void AuxColourChoice::cb_apbut1_i(Fl_Button*, void*) {
  GLfloat col[4];
col[0] = rgb_choice->r();
col[1] = rgb_choice->g();
col[2] = rgb_choice->b();
col[3] = opacity->value(); 
tbmw->auxGrid->color( obj, col );
tbmw->redraw();
}
void AuxColourChoice::cb_apbut1(Fl_Button* o, void* v) {
  ((AuxColourChoice*)(o->parent()->user_data()))->cb_apbut1_i(o,v);
}

AuxColourChoice::AuxColourChoice( GLfloat *c, Object_t o, TBmeshWin *tb) {
  { window = new Fl_Double_Window(225, 260, "Choose colour");
    window->user_data((void*)(this));
    { rgb_choice = new Fl_Color_Chooser(0, 0, 225, 175);
      rgb_choice->box(FL_NO_BOX);
      rgb_choice->color(FL_BACKGROUND_COLOR);
      rgb_choice->selection_color(FL_BACKGROUND_COLOR);
      rgb_choice->labeltype(FL_NORMAL_LABEL);
      rgb_choice->labelfont(0);
      rgb_choice->labelsize(14);
      rgb_choice->labelcolor(FL_FOREGROUND_COLOR);
      rgb_choice->callback((Fl_Callback*)cb_rgb_choice1);
      rgb_choice->align(Fl_Align(FL_ALIGN_CENTER));
      rgb_choice->when(FL_WHEN_RELEASE);
    } // Fl_Color_Chooser* rgb_choice
    { opacity = new Fl_Slider(10, 190, 205, 25, "Opacity");
      opacity->type(3);
      opacity->selection_color(FL_FOREGROUND_COLOR);
      opacity->step(0.01);
      opacity->value(1);
      opacity->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Slider* opacity
    { Fl_Return_Button* o = new Fl_Return_Button(125, 225, 90, 30, "Done");
      o->callback((Fl_Callback*)cb_Done1);
    } // Fl_Return_Button* o
    { apbut = new Fl_Button(15, 225, 95, 30, "Apply");
      apbut->callback((Fl_Callback*)cb_apbut1);
    } // Fl_Button* apbut
    window->end();
  } // Fl_Double_Window* window
  col = c;
  obj = o;
  tbmw = tb;
  
  rgb_choice->rgb(col[0], col[1], col[2] );
  opacity->value( col[3] );
  string title="Aux ";
  title += objnames[obj];
  title += " color";
  window->label( title.c_str() );
  window->show();
}
